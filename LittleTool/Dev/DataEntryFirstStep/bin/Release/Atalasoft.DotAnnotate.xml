<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Atalasoft.DotAnnotate</name>
  </assembly>
  <members>
    <member name="T:Atalasoft.Annotate.AnnotateInteractMode">
      <summary> Specifies the user interaction mode for the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /></summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.None">
      <summary> Mouse events are ignored. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.View">
      <summary> Annotations cannot be modified. Hot spot annotations are not rendered but react to mouse events.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.Author">
      <summary> Annotations can be selected, moved and resized using the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotateSpace">
      <summary>Used to specify the coordinate space used by various methods.</summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.View">
      <summary> Use the view space of the control. View space is always represented in pixels
            with its origin at the top-left of the control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.Document">
      <summary> Use the document space of the viewer with its origin at the top-left of the document. Coordinates are
            specified in document <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.Annotation">
      <summary> Use annotation space coordinates. The origin is at the location of the annotation specified in document
            <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotateSpaceConverter">
      <summary>
            The <strong>AnnotateSpaceConverter</strong> class provides helper methods for
            converting from one coordinate space to another.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.#ctor(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData)">
      <summary> Creates a new instance of <STRONG>AnnotateSpaceConverter</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" />
            parent and <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects that will be used for the conversion methods. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> converted from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> The points to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> converted from annotation space to document space. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF)">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from annotation space to document space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts from annotation space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted into view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts from annotation space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF)">
      <summary> Converts from annotation space to view space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted into view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from annotation space to view space. </summary>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose">
      <summary> Releases resources used for conversion. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose(System.Boolean)">
      <summary> Releases resources used by this object. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the points converted from document space to annotation
            space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from document space to annotation space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to annotation space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the points converted from document space to annotation
            space. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF)">
      <summary> Converts a point from document space to annotation space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to annotation space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
      <summary> Converts a point from document space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
      <summary> Converts a rectangle from document space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF)">
      <summary> Converts a point from document space to view space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to view space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.RectangleF)">
      <summary> Converts a rectangle from document space to view space. </summary>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from view space to annotation space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point value in annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF)">
      <summary> Converts a point from view space to annotation space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point value in annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF[])">
      <summary> Converts an array of <STRONG>PointF</STRONG> from view space to annotation space. </summary>
      <param name="points"> An array of points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
      <summary> Converts a point from view space to document space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
      <summary> Converts a rectangle from view space to document space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF)">
      <summary> Converts a point from view space to document space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from view space to document space. </summary>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.RectangleF)">
      <summary> Converts a rectangle from view space to document space. </summary>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to document space. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationBrush">
      <summary> This class describes a brush object used for drawing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage)">
      <summary> Creates a texture brush using the specified image. </summary>
      <param name="image"> The image used for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode)">
      <summary> Creates a new texture brush with the specified image and wrap mode. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)">
      <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.RectangleF)">
      <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Rectangle)">
      <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF)">
      <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Color)">
      <summary> Creates a solid brush with the specified color. </summary>
      <param name="color"> The color of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color)">
      <summary> Creates a hatch brush with the specified hatch style and forecolor. </summary>
      <param name="hatchStyle"> The hatch style used by this brush. </param>
      <param name="foreColor"> The forecolor of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a hatch brush with the specified hatch style, forecolor and background color. </summary>
      <param name="hatchStyle"> The hatch style used by this brush. </param>
      <param name="foreColor"> The forecolor of the brush. </param>
      <param name="backColor"> The background color of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
      <param name="point1"> The starting point of the gradient. </param>
      <param name="point2"> The ending point of the gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
      <param name="point1"> The starting point of the gradient. </param>
      <param name="point2"> The ending point of the gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
      <param name="rect"> The bounding rectangle of the linear gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
      <param name="linearGradientMode"> The orientation of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
      <param name="rect"> The bounding rectangle of the linear gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
      <param name="linearGradientMode"> The orientation of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a brush from serialized information. </summary>
      <param name="info"> The SerializationInfo containing the brush data. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.Clone">
      <summary> Creates a copy of the <STRONG>AnnotationBrush</STRONG> object. </summary>
      <returns> A copy of this brush. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Color">
      <summary> Gets or sets the color of a solid brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.Equals(System.Object)">
      <summary> Used to compare two <STRONG>AnnotationBrush</STRONG> objects. </summary>
      <param name="obj"> The <STRONG>AnnotationBrush</STRONG> this object is compared to. </param>
      <returns>
        <STRONG>True</STRONG> if the brush parameters are the same. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.FillType">
      <summary>Gets or sets the type of brush used.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> An identifier for this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about the brush. </summary>
      <param name="info"> A SerializationInfo object that will be filled with brush information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchBackColor">
      <summary> Gets or sets the hatch background color of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchForeColor">
      <summary> Gets or sets the hatch forecolor of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchStyle">
      <summary> Gets or sets the hatch style of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Image">
      <summary>Gets or sets the image used for a texture brush.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearColors">
      <summary> Gets or sets the colors used by a linear gradient brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearGradientMode">
      <summary> The orientation of a linear gradient brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Rectangle">
      <summary>The bounding rectangle a texture or linear gradient brush.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.ToString">
      <summary> Returns a information about this AnnotationBrush. </summary>
      <returns> A string containing information about this object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.WrapMode">
      <summary> Gets or sets the wrap mode of a texture brush. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationConfinementMode">
      <summary> Specifies the type of confinement used for the annotations when they are being moved or resized using the
            mouse. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.None">
      <summary> There is no limitation to the annotation location. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.ClientArea">
      <summary> Annotations can be located outside of the document but not outside of the client
            area of the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.DocumentBounds">
      <summary> Annotations are confined to the document bounds. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotification">
      <summary> Specifies the type of notification being sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.Invalidate">
      <summary> Informs the controller that it needs to invalidate the control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.AddControl">
      <summary> Tells the controller to add a <strong>Control</strong> to the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.RemoveControl">
      <summary> Removes a previously added control from the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.SelectionChange">
      <summary> The <strong>Selection</strong> property of an annotation has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.PropertyChange">
      <summary> A property of the control has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.LayerContentChange">
      <summary> The content of a layer has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.ZoomChanged">
      <summary> The zoom level of the viewer has changed. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs">
      <summary> This class provides information when the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> is sent a notification from
            another object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the type
            of notification being sent. </summary>
      <param name="notification"> The notification to send. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and invalidation region to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region and undo to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region, undo and a special undo action. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
      <param name="undoAction"> A special undo action to take. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and undo to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, undo and special undo action. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
      <param name="undoAction"> A special undo action that should be taken. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Utils.CollectionChangedEventArgs,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> and an undo. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="collectionChangedArgs"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> indicating a change to a
            collection. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,System.Windows.Forms.Control)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and a control to process. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="control"> A control to process. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.CollectionChangedArgs">
      <summary> Gets the <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about the collection
            change. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Control">
      <summary> Gets a <STRONG>System.Windows.Forms.Control</STRONG> object used with this notification. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.InvalidateRegion">
      <summary> Gets or sets a region used for invalidating the parent control. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Notification">
      <summary> Gets the type of notification performed on the object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Undo">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> to store into the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.UndoAction">
      <summary> Gets a special undo action to send to the undo manager. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification" /> event to send
            information to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
      <param name="sender"> The object sending this notification. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information for this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationData">
      <summary>
            This is the main annotation data class used to hold base information required by all annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.#ctor">
      <summary>
            Default constructor of AnnotationData.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Default serialization constructor of AnnotationData.
            </summary>
      <param name="info">SerializationInfo containing annotation data.</param>
      <param name="context">StreamingContext object for this class.</param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.AnnotationBounds">
      <summary>
            Gets the rectangle bounds of the annotation, including any pen or shadow, before
            any matricies are applied.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification">
      <summary>Raised after a property has been changed.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Bounds">
      <summary>Gets the bounding rectangle of the annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used by the annotation, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow, if any. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The bounding rectangle of the annotation without its transforms applied. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
      <param name="bounds"> A bounding rectangle to which the pen and shadow will be applied. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used on this rectangle, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow of this rectangle, if any. </param>
      <param name="shadowOffset"> The position offset of the shadow. </param>
      <returns> The rectangle that includes the pen and shadow offsets. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle for the annotation, taking the pen width, shadow and
            annotation transforms into account. </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used by the annotation, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow, if any. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The bounding rectangle of the annotation in document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will add the annotation pen width, shadow and transforms to the provided rectangle bounds.
            </summary>
      <param name="bounds"> The bounding rectangle to which the pen, shadow and transforms will be applied. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> being applied to the bounds. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The rectangle in document space. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanMirror">
      <summary>
            Gets or sets a value indicating if the annotation can mirror.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanMirrorChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMirror.html">CanMirror</a>
            property is changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanMove">
      <summary>
            Gets or sets a value indicating if the annotation can be moved.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanMoveChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMove.html">CanMove</a>
            property is changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanResize">
      <summary>
            Gets or sets a value indicating if the annotation can be resized.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanResizeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanResize.html">CanResize</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanRotate">
      <summary>
            Gets or sets a value indicating if the annotation can be rotated.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanRotateChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanRotate.html">CanRotate</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanSelect">
      <summary>
            Gets or sets a value indicating if the annotation can be selected.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanSelectChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanSelect.html">CanSelect</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Clone">
      <summary> Returns a copy of this annotation data. </summary>
      <returns> A copy of this data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary> Fills the data object with cloned property values. </summary>
      <param name="data"> A class that derives from <STRONG>AnnotationData</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseDataFrom(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CreationTime">
      <summary>
            Gets or sets the creation time of the annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CreationTimeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CreationTime.html">CreationTime</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Dispose(System.Boolean)">
      <summary> Called to release resources used by the annotation. </summary>
      <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationData.Dispose" /> method or the class finalizer. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Equals(System.Object)">
      <summary> Compares the current annotation with another. </summary>
      <param name="obj"> The object to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetAllExtraProperties">
      <summary> Returns a <STRONG>Dictionary</STRONG> containing the key value pairs for extra properties. </summary>
      <returns> A <STRONG>Dictionary</STRONG> containing the key value pairs. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)">
      <summary> Returns the value stored with <see cref="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)" />. </summary>
      <param name="key"> Key name of the value requested. </param>
      <returns> The object with the given key name, null if it doesn't exist. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetLineCapBounds">
      <summary> Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" />. </summary>
      <returns> The bounds for the line cap. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with properties values for the base <STRONG>AnnotationData</STRONG>
            class. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetRenderTransform">
      <summary> Returns a <STRONG>System.Drawing.Drawing2D.Matrix</STRONG> containing the matrices applied to the
            annotation. </summary>
      <returns> A Matrix containing all of the matrices applied to the annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IgnoreDataChanges">
      <summary>
            Gets or sets a value indicating whether any properties changes should be passed to the undo manager.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredHorizontally">
      <summary> Gets a value indicating whether the annotation is mirrored horizontally. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredVertically">
      <summary> Gets a value indicating whether the annotation is mirrored vertically. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Location">
      <summary>
            Gets or sets the location of this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.LocationChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Location.html">Location</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Flips (mirrors) the annotation horizontally or vertically. </summary>
      <param name="direction"> The direction to mirror the annotation. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.Mirrored">
      <summary>
            Raised when the annotation is mirrored, either by the user dragging a grip across
            its opposite or when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Mirror.html">Mirror</a> method
            is called.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.ModifiedTime">
      <summary>
            Gets or sets the time in which this annotation was modified.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.ModifiedTimeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~ModifiedTime.html">ModifiedTime</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Name">
      <summary>
            Gets or sets a name for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.NameChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Name.html">Name</a> property has
            changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property value has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this
            change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMirrorChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMoveChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMove" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanResizeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanResize" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanRotateChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanRotate" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanSelectChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanSelect" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCreationTimeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Location" /> property value has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)">
      <summary> Called when the annotation has been mirrored. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnModifiedTimeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnNameChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Name" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property has been changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called just before a property value is changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnRotationChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Rotation" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnSecurityChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Security" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size" /> property has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information about this change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnStateChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.State" /> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged" /> event. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged" /> event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnTooltipChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnTransformChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Transform" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnUserNameChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName" /> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged" /> event. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged" /> event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnVisibleChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Visible" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanging">
      <summary>Raised before a property is changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />.
            </summary>
      <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to remove event handlers from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveFontEvents(Atalasoft.Annotate.AnnotationFont)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationFont" />.
            </summary>
      <param name="font"> The font to remove events from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemovePenEvents(Atalasoft.Annotate.AnnotationPen)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationPen" />.
            </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to remove the event handlers from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.IAnnotationLock" />.
            </summary>
      <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock" /> that will have event handlers removed.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Rotate(System.Single)">
      <summary> Applies rotation to the annotation from its current rotation amount. </summary>
      <param name="degrees"> The amount of rotation being added to this annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Rotation">
      <summary>
            Gets or sets the current amount of rotation for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.RotationChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Rotation.html">Rotation</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Security">
      <summary>
            Gets or sets the security lock used for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.SecurityChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Security.html">Security</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Selected">
      <summary> Get or set whether this <STRONG>AnnotationData</STRONG> object is selected </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />. </summary>
      <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)">
      <summary> Sets a custom value within an annotation that can be retrieved using <see cref="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)" />. </summary>
      <param name="key"> Key name of the property to be set to. </param>
      <param name="val"> Object value of the property being set. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetFontEvents(Atalasoft.Annotate.AnnotationFont)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationFont" />.
            </summary>
      <param name="font"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetPenEvents(Atalasoft.Annotate.AnnotationPen)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationPen" />.
            </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.IAnnotationLock" />. </summary>
      <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock" /> to set event handlers for. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Size">
      <summary>
            Gets or sets the size of the annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.SizeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Size.html">Size</a> property has
            changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.State">
      <summary> Get or set the <see cref="T:Atalasoft.Annotate.AnnotationState" /> of this <STRONG>AnnotationData</STRONG> object </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.StateChanged">
      <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.State" /> property value has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.ToolTip">
      <summary>
            Gets or sets the text displayed in the annotation tooltip.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.TooltipChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip" /> property has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Transform">
      <summary>Gets the transformation matrix used for rendering this annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.TransformChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Transform.html">Transform</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.UserName">
      <summary> Gets or sets the username for the annotation.  Internally this is used with PDF annotations. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.UserNameChanged">
      <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName" /> property has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Visible">
      <summary>
            Gets or sets a value indicating if the annotation is visible.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.VisibleChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Visible.html">Visible</a>
            property has changed.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationDataCollection">
      <summary>This class can be used to hold a collection of AnnotationData objects.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG> from serialized information.
            </summary>
      <param name="info"> The SerializationInfo that contains information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Add(Atalasoft.Annotate.AnnotationData)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to the collection. </summary>
      <param name="data"> The class derived from <see cref="T:Atalasoft.Annotate.AnnotationData" /> to add. </param>
      <exception> Thrown if the data parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.AddRange(Atalasoft.Annotate.AnnotationData[])">
      <summary> Adds an array of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to the collection. </summary>
      <param name="data"> An array of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to add. </param>
      <exception> Thrown if the data parameter is null or zero length. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.AnnotationControllerNotification">
      <summary> Raised when the annotation sends a notification to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Clone">
      <summary> Create a copy of the <STRONG>AnnotationDataCollection</STRONG>. </summary>
      <returns> An <STRONG>AnnotationDataCollection</STRONG> containing a clone of every <see cref="T:Atalasoft.Annotate.AnnotationData" />
            object. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.CollectionChanged">
      <summary> Raised when the collection has changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Contains(Atalasoft.Annotate.AnnotationData)">
      <summary> Determines whether the <STRONG>AnnotationDataCollection </STRONG>contains the specified element </summary>
      <param name="data"> The element to locate in the CollectionBase </param>
      <returns>
        <STRONG>true</STRONG> if the <STRONG>AnnotationDataCollection </STRONG>contains the specified
            <I>value</I>; otherwise, <B>false</B>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.CopyTo(Atalasoft.Annotate.AnnotationData[],System.Int32)">
      <summary> Copies items into the specified array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> The index of the target array to being copying. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
      <exception> Thrown if the array is not large enough to perform this task. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Equals(System.Object)">
      <summary> Compares one collection to another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationDataCollection</STRONG> being compared to. </param>
      <returns>
        <STRONG>True</STRONG> if the collections hold equal data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with serialized data for this collection. </summary>
      <param name="info"> The SerializationInfo object where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.IndexOf(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns the index of an item in the collection. </summary>
      <param name="data"> The item to search for. </param>
      <returns> The index of the item or -1 if the item does not exist in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Insert(System.Int32,Atalasoft.Annotate.AnnotationData)">
      <summary> Inserts an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object into the collection at a specified index. </summary>
      <param name="index"> The position within the collection to place this object. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to insert. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index parameter if out of range for this collection. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationDataCollection.Item(System.Int32)">
      <summary>Gets an AnnotationData object form the collection at the specified index.</summary>
      <param name="index">The index of the item to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClear">
      <summary> Called when the Clear method has been invoked. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClearComplete">
      <summary> Called when the collection is cleared. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is a change in the collection. </summary>
      <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about the change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end --><!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end
            --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="method" source="Item" filter=""
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=overloadlist,caption=$$OverloadList$$%%%%filtereditemlist%%</div>"
            --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language"
            filter="type=all" NoHeader="True" NoFooter="True"
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=syntax,caption=$$Syntax$$%%%%FilteredItemList%%" --></summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an add or insert has completed. </summary>
      <param name="index"> The index in the collection where the item was placed. </param>
      <param name="value"> The object that was added to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove has completed. </summary>
      <param name="index"> The index of the item that was removed. </param>
      <param name="value"> The object that was removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when a set has completed. </summary>
      <param name="index"> The index in the collection where the item was changed. </param>
      <param name="oldValue"> The previous object at the specified index. </param>
      <param name="newValue"> The new object at the specified index. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.PropertyChanging">
      <summary> Raised before a property is changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Remove(Atalasoft.Annotate.AnnotationData)">
      <summary> Removes an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object from the collection. </summary>
      <param name="data"> The object to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationDataCollection`1">
      <summary> This class can be used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.#ctor">
      <summary>Creates a new instance of AnnotationDataCollection.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.AnnotationControllerNotification">
      <summary>Raised after a property has been changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.ClearItems"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.Clone"></member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.CollectionChanged">
      <summary>Raised when the collection has changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.InsertItem(System.Int32,`0)"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary>Called when there is a change in the collection.</summary>
      <param name="args">
            An
            <a href="DotAnnotate~Atalasoft.Annotate.Atalasoft.Utils.CollectionChangedEventArgs.html">Atalasoft.Utils.CollectionChangedEventArgs</a>
            containing information about the change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnDeserialization(System.Object)"></member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.PropertyChanging">
      <summary>Raised before a property is changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.RemoveItem(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.SetItem(System.Int32,`0)"></member>
    <member name="T:Atalasoft.Annotate.AnnotationDataFormat">
      <summary> Specifies the format used for serialized annotation data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Xmp">
      <summary> The data is serialized using the <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Wang">
      <summary> The data is serialized using the <see cref="T:Atalasoft.Annotate.Formatters.WangFormatter" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationEventArgs">
      <summary> This class provides information for events that involve an annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Creates a new instance of <STRONG>AnnotationEventArgs</STRONG>. </summary>
      <param name="annotation"> The annotation this event relates to. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationEventArgs.Annotation">
      <summary> Gets the annotation this event relates to. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationEventHandler">
      <summary> This delegate is used for various events that apply to an annotation. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation for the event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationFont">
      <summary>
            This class represents a font used with annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> of type Arial and size 12. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> from serialized data. </summary>
      <param name="info"> A SerializationInfo object containing font data. </param>
      <param name="context"> A StreamingContext for this data. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font name and size. </summary>
      <param name="fontName"> The name of the font. </param>
      <param name="size"> The size of the font. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' is null (Nothing in VB) or an empty string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font parameters. </summary>
      <param name="fontName"> The name of the font. </param>
      <param name="size"> The size of the font. </param>
      <param name="bold"> Indicates if this font is bold. </param>
      <param name="italic"> Indicates if this font is italic. </param>
      <param name="underline"> Indicates if this font is underlined. </param>
      <param name="strikeout"> Indicates if this font has a strikeout. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' argument is null (Nothing in VB) or an empty string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification">
      <summary> Raised after a property of the <STRONG>AnnotationFont </STRONG>is modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Bold">
      <summary> Gets or sets a value indicating whether the font is <STRONG>bold</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.CharSet">
      <summary> Gets or sets the character set for this font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationFont</STRONG>. </summary>
      <returns> A clone of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.Equals(System.Object)">
      <summary> Compares the <STRONG>AnnotationFont</STRONG> with another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationFont</STRONG> to compare against. </param>
      <returns>
        <STRONG>True</STRONG> if they are equal. </returns>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationFont.FallbackFontName">
      <summary> The <STRONG>FallbackFontName</STRONG> is used when a deserialized or requested font does not exist on the
            system. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationFont</STRONG>. </summary>
      <param name="info"> A SerializationInfo object where data will be filled. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' object is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Italic">
      <summary> Gets or sets a value indicating whether the font is <EM>italic</EM>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Name">
      <summary> Gets or sets the name of the font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> about a property change. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging">
      <summary> Raised just before a property is about to be modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Size">
      <summary> Gets or sets the size of the font in points. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Strikeout">
      <summary> Gets or sets a value indicating whether the font has a strikeout. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.ToString">
      <summary> Returns a string representation of this object. </summary>
      <returns> A string containing the font name, size and attributes. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Underline">
      <summary> Gets or sets a value indicating whether the font is <U>underlined</U>. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripAction">
      <summary> Specifies the action that will be taken by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> when a grip is dragged
            with the mouse. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Resizing">
      <summary> The grip is used to resize the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Moving">
      <summary> The grip is used to move the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Rotating">
      <summary> The grip is used for rotating the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Indepenent">
      <summary>
            The grip is used for custom movement determined by the annotation.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Independent">
      <summary> The grip is used for custom movement determined by the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripMode">
      <summary> Specifies the type of grips being used for an annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripMode.Rectangular">
      <summary> Rectangle grips are used. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripMode.Points">
      <summary> Point grips are used. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripState">
      <summary> Specifies the state of a grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.Default">
      <summary> The grip is shown normally. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseOver">
      <summary> The mouse is over the grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseDown">
      <summary> The mouse is pressing the grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationImage">
      <summary> This class represents an image object used by <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> and <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> classes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor">
      <summary> Creates a new empty instance of <STRONG>AnnotationImage</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object used. </summary>
      <param name="image"> A <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object for this class. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Drawing.Image)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>System.Drawing.Image</STRONG> object used. </summary>
      <param name="image"> A <STRONG>System.Drawing.Image</STRONG> object for this class. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count and
            image data. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height"> The height of the image. </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count, image
            and palette data. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height"> The height of the image. </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
      <param name="palette"> A byte array containing the palette data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the image properties. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height">
        <para>The height of the image.</para>
      </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
      <param name="palette"> A byte array containing the palette data or null if a palette is not required. </param>
      <param name="dpiX"> The horizontal resolution of the image. </param>
      <param name="dpiY"> The vertical resolution of the image. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified stream. </summary>
      <param name="stream"> A stream containing the image to load. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing <STRONG>AnnotationImage</STRONG> information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified file. </summary>
      <param name="fileName"> The filename of the image to load. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.BitCount">
      <summary> Gets the bit count (or bits-per-pixel) of the image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationImage</STRONG>. </summary>
      <returns> A copy of this image. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose">
      <summary> Releases resources used by this class. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose(System.Boolean)">
      <summary> Releases resources used by this class. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationImage.Dispose" />
            method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Disposed">
      <summary> Gets a value indicating whether this object has been disposed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.DpiX">
      <summary> Gets the horizontal resolution of the image. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.DpiY">
      <summary> Gets the vertical resolution of the image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Equals(System.Object)">
      <summary> Compares this <STRONG>AnnotationImage</STRONG> with another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationImage</STRONG> to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with image data. </summary>
      <param name="info"> The SerializationInfo object where data will the stored. </param>
      <param name="context"> A StreamingContext for this image. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Height">
      <summary> Gets the height of the image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.ImageData">
      <summary> Gets the image data. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.ImageObject">
      <summary> Gets the actual image object for this <STRONG>AnnotationImage</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.OnCreateImageObject">
      <summary> Called when the <STRONG>ImageObject</STRONG> property is being requested. </summary>
      <returns> The object that will be set for the <see cref="P:Atalasoft.Annotate.AnnotationImage.ImageObject" /> property. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Palette">
      <summary> Gets the image palette, if any. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Width">
      <summary> Gets the width of the image in pixels. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLineCap">
      <summary> This class is used to define a line cap used for <see cref="T:Atalasoft.Annotate.AnnotationPen" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(Atalasoft.Annotate.AnnotationLineCapStyle,System.Drawing.SizeF)">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> specifying the style and size. </summary>
      <param name="style"> The style of the line cap. </param>
      <param name="size"> The size of the line cap. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information about this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.AnnotationControllerNotification">
      <summary> Raised when a notification must be sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationLineCap</STRONG>. </summary>
      <returns> A copy of the <STRONG>AnnotationLineCap</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.Equals(System.Object)">
      <summary> Compares one <STRONG>AnnotationLineCap</STRONG> with another to determine of that contain the same
            property values. </summary>
      <param name="obj"> The <STRONG>AnnotationLineCap</STRONG> to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with properties values for the <STRONG>AnnoationLineCap</STRONG> class.
            </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called when a notification is being sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information for this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called when a property value changes. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about the changed
            property. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanging">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.RenderOffset">
      <summary> Gets the offset from the line point to the top-left of the bounding rectangle for the line cap. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.Size">
      <summary> Gets or sets the size of the line cap. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.Style">
      <summary> Gets or sets the style of the line cap. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLineCapStyle">
      <summary> Specifies the type of line cap for a <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> object. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.None">
      <summary> No line cap is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Arrow">
      <summary> A simple thin line arrow. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledArrow">
      <summary> A filled arrow. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ClosedArrow">
      <summary> A closed arrow that is not filled. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Ellipse">
      <summary> An ellipse is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledEllipse">
      <summary> A filled ellipse is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Rectangle">
      <summary> A rectangle is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledRectangle">
      <summary> A filled rectangle is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Diamond">
      <summary> A diamond is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledDiamond">
      <summary> A filled diamond is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedArrow">
      <summary> An arrow pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedClosedArrow">
      <summary> A closed arrow pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedFilledArrow">
      <summary> A filled, closed array is drawn pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Butt">
      <summary> A line perpendicular to the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Slash">
      <summary> A hash line is drawn </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs">
      <summary> This class is used to hold information for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged" /> event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>AnnotationLocationChangedEventArgs</STRONG>. </summary>
      <param name="oldLocation"> The previous location of the annotation. </param>
      <param name="newLocation"> The new location of the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.NewLocation">
      <summary> Gets the new location of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.OldLocation">
      <summary> Gets the previous location of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged" /> event. </summary>
      <param name="sender"> The annotation sending this event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLock">
      <summary> This class is the default security used for annotations. It uses simple string encryption to secure
            annotations and keep users from being able to modify the data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo containing the serialized data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> whose key is the given string value </summary>
      <param name="encryptedKey"> The key used for the lock encryption. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Clone">
      <summary> Creates a copy of this lock. </summary>
      <returns> A copy of this <STRONG>AnnotationLock</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey">
      <summary>Gets the encrypted key for the lock.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>AnnotationLock</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Lock">
      <summary>Locks the annotation without specifying a password.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Lock(System.String)">
      <summary>Locks the annotation using the specified password.</summary>
      <param name="password">
            The password used to generate the <see cref="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey" />.
            </param>
      <returns>
            Use the <see cref="M:Atalasoft.Annotate.AnnotationLock.Unlock" /> method with the same password to disable the lock.
            </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.Locked">
      <summary>Gets a value indicating whether or not the annotation is currently locked.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.LockedImage">
      <summary>Gets or sets the image displayed on the annotation when it's been locked.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock">
      <summary>This method will disable the lock on a locked annotation.</summary>
      <returns>
        <strong>True</strong> if the annotation was unlocked.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock(System.String)">
      <summary>
            This method will disable the lock on an annotation that was previously locked
            with a password.
            </summary>
      <param name="password">
            The password required to unlock the annotation. This must be the same password
            used with the <see cref="M:Atalasoft.Annotate.AnnotationLock.Lock" /> method.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPen">
      <summary> This class represents a pen object used for drawing lines of annotations.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object.
            </summary>
      <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the pen object. </param>
      <exception> Thrown if the brush parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> and
            pen width. </summary>
      <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the pen object. </param>
      <param name="width"> The width of the pen. This value must be greater than zero. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the brush parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color of the pen. </summary>
      <param name="color"> The color for this pen. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color and width of the pen.
            </summary>
      <param name="color"> The color for the pen. </param>
      <param name="width"> The width of the pen. This value must be greater than zero. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about the pen. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Alignment">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationPenAlignment" /> for the pen. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification">
      <summary> Raised after a property of the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> if modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Brush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to describe this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationPen</STRONG>. </summary>
      <returns> A copy of the <STRONG>AnnotationPen</STRONG> object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Color">
      <summary> Gets or sets the color for the pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashCap">
      <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.AnnotationPen.DashCap" />  used at the end of the dashes that make up dashed lines drawn
            with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashOffset">
      <summary> Gets or sets the distance from the start of a line to the beginning of a dash pattern. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashPattern">
      <summary> Gets or sets the dash pattern used </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashStyle">
      <summary> Gets or sets the style used for dashed lines drawn with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.EndCap">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> used at the end of lines drawn with this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.Equals(System.Object)">
      <summary> Compares this <STRONG>AnnotationPen</STRONG> with another to test if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationPen</STRONG> to compare against. </param>
      <returns>
        <STRONG>True</STRONG> if they are equal. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationPen</STRONG>. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.LineJoin">
      <summary> Gets or sets the join style for the ends of two consecutive lines drawn with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.MiterLimit">
      <summary> Gets or sets the limit of the thickness of the join on a mitered corner. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property is changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging">
      <summary> Raised just before a property is about to be modified. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.RemoveLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
      <summary> This is a helper method used to remove event handler for an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> object.
            </summary>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.SetLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
      <summary> This is a helper method used to add event handling to an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" />. </summary>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to process. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.StartCap">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> used at the beginning of lines drawn with this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.ToString">
      <summary> Returns a string representation of this object. </summary>
      <returns> A string representation of this object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Width">
      <summary> Gets or sets the width of the pen. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this property is set to a value less than or equal to zero.</exception>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPenAlignment">
      <summary> Specifies the alignment of the <see cref="T:Atalasoft.Annotate.AnnotationPen" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Center">
      <summary> The pen is centered over the line. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Inset">
      <summary> The pen is drawn inside the line. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs">
      <summary> Contains information for a property changed event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationPropertyChangedEventArgs</STRONG>. </summary>
      <param name="propertyName"> The name of the property that has been changed. </param>
      <param name="oldValue"> The previous value of the property. </param>
      <param name="newValue"> The new value of the property. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.NewValue">
      <summary> Gets the new value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.OldValue">
      <summary> Gets the old value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.PropertyName">
      <summary> Gets the name of the property. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventHandler">
      <summary> This delegate is used for the <STRONG>PropertyChanged</STRONG> event. </summary>
      <param name="sender"> The object that is affected. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information for the property change.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs">
      <summary>
            This class hold information about a
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~PropertyChanging_EV.html">PropertyChanging</a>
            event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.#ctor(System.Object,System.String,System.Object,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationPropertyChangingEventArgs</STRONG>. </summary>
      <param name="sender"> The object sending this event. </param>
      <param name="propertyName"> The name of the property being changed. </param>
      <param name="currentValue"> The current value of the property. </param>
      <param name="newValue"> The new value of the property. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Cancel">
      <summary> Gets or sets a value indicating whether this change should be accepted. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.CurrentValue">
      <summary> Gets the current value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.NewValue">
      <summary> Gets or sets the new value for the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.PropertyName">
      <summary> Gets the name of the property that is being changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Sender">
      <summary> Gets the object that raised the event. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanging" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationRegion">
      <summary> This class defines a display region used for hit testing. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> with an empty region. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> specifying a <STRONG>GraphicsPath</STRONG> for
            the region. </summary>
      <param name="path"> The <STRONG>GraphicsPath</STRONG> used by the region.  This <STRONG>GraphicsPath</STRONG>
            becomes the property of the <STRONG>AnnotationRegion</STRONG> and will automatically be disposed when the
            <STRONG>AnnotationRegion</STRONG> is disposed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> from a rectangle. </summary>
      <param name="rectangle"> A rectangle used to define the initial region. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose">
      <summary> Releases region resources. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose(System.Boolean)">
      <summary> Releases resources used by the region. </summary>
      <param name="disposing"> A value indicating whether this method was call from the public <see cref="M:Atalasoft.Annotate.AnnotationRegion.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.GetRegion">
      <summary> Returns a .NET Region for this object. </summary>
      <returns> A .NET Region object containing the <STRONG>AnnotationRegion</STRONG> area. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Invalidate(System.Windows.Forms.Control)">
      <summary> Applies this region to a control's invalidation region. </summary>
      <param name="control"> The control to apply the invalidate to. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.IsVisible(System.Drawing.PointF)">
      <summary> Tests if a point is inside this region. </summary>
      <param name="point"> The point to test. </param>
      <returns>
        <STRONG>True</STRONG> if the point is within this region. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationRegion.Path">
      <summary> The <STRONG>GraphicsPath</STRONG> used by the <STRONG>AnnotationRegion</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Transform(System.Drawing.Drawing2D.Matrix)">
      <summary> Applies a transformation matrix to this region. </summary>
      <param name="matrix"> The matrix to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(Atalasoft.Annotate.AnnotationRegion)">
      <summary> Performs a union of the supplied <STRONG>AnnotationRegion</STRONG> and the existing region. </summary>
      <param name="region"> The <STRONG>AnnotationRegion</STRONG> to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Drawing2D.GraphicsPath)">
      <summary> Performs a union of the supplied <STRONG>GraphcisPath </STRONG>and the existing region. </summary>
      <param name="path"> The <STRONG>GraphicsPath</STRONG> to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Rectangle)">
      <summary> Performs a union of the supplied rectangle and the existing region. </summary>
      <param name="rectangle"> The rectangle to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.RectangleF)">
      <summary> Performs a union of the supplied <STRONG>RectangleF</STRONG> and the existing region. </summary>
      <param name="rectangle"> The RectangleF to apply. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs">
      <summary> This class is used to hold information about the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged" /> event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary> Creates a new instance of <STRONG>AnnotationSizeChangedEventArgs</STRONG>. </summary>
      <param name="oldSize"> The previous size of the annotation. </param>
      <param name="newSize"> The new size of the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.NewSize">
      <summary> Gets the new size of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.OldSize">
      <summary> Gets the previous size of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged" /> event. </summary>
      <param name="sender"> The annotation sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationState">
      <summary> Specifies the current state of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Moving">
      <summary> The annotation is being moved by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Resizing">
      <summary> The annotation is being resized by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Creating">
      <summary> The annotation is being created by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Idle">
      <summary> The annotation is sitting idle. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Loading">
      <summary> The annotation is loading from XMP or WANG data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Rotating">
      <summary> The annotation is being rotated by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.GripMoving">
      <summary> Indicates that a grip is moving. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationUnit">
      <summary> Specifies the unit of measure used for annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Custom">
      <summary> A custom value in pixels per unit. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Pixel">
      <summary> Pixels. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Inch">
      <summary> Inches. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Micrometer">
      <summary> Micrometers. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Centimeter">
      <summary> Centimeters. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Foot">
      <summary> Feet. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Yard">
      <summary> Yards. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Meter">
      <summary> Meters. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Mile">
      <summary> Miles. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Kilometer">
      <summary> Kilometers. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CalloutData">
      <summary> Callout data used with the <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> from serialized information. </summary>
      <param name="info"> A SerializationInfo object containing the annotation data information. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text for the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush and padding
            for the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush, padding,
            outline and line pen. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The distance from the leader will stick out from the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The distance the leader will stick out from the annotation. </param>
      <param name="targetPosition"> The document position the line will point to. </param>
      <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Alignment">
      <summary> Gets or sets the horizontal alignment of the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.AllowEditing">
      <summary>
        <para>Gets or sets a value indicating whether the annotation's text data should be editable or
            read-only.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.AnnotationBounds"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.Clone"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.Fill">
      <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Font">
      <summary> Gets or sets the font used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.FontBrush">
      <summary> Gets or sets the brush used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.FormatFlags">
      <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetLeaderPoints">
      <summary> Returns an array of points used for rendering the callout leader line. </summary>
      <returns> An array of points for the leader line. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.Leader">
      <summary> Gets or sets the pen used for the leader of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.LeaderFlatLength">
      <summary> Gets or sets the length of the leader line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.LineAlignment">
      <summary> Gets or sets the line alignment. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Outline">
      <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Padding">
      <summary> Gets or sets the amount of padding to add around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.TargetPosition">
      <summary> Gets or sets the position on the document the leader will point to. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Text">
      <summary> Gets or sets the text of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Trimming">
      <summary> Get or sets the type of character trimming to perform on the text. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.ChangePositionMethod">
      <summary> Specifies the reordering to perform on a layer or annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToFront">
      <summary> Moves the item to the beginning of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveUp">
      <summary> Moves the item one position closer to the beginning of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveBack">
      <summary> Moves the item one position closer to the end of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToBack">
      <summary> Moves the item to the end of the collection. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CommentData">
      <summary> The <STRONG>CommentData</STRONG> class is used for adding comments to other annotations, but it can also
            be used standalone. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> from WANG annotation information. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation location and size.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> from serialized information. </summary>
      <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.Clone"></member>
    <member name="M:Atalasoft.Annotate.CommentData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.CommentData.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Annotate.CommentData.GetHashCode"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Guid"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Parent"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Replies">
      <summary> Gets a list of <STRONG>CommentData</STRONG> replies. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CreateAnnotationMode">
      <summary> Specifies the annotation creation mode when calling <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.Default">
      <summary> Annotations are created by click and drag or with multiple clicks. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickLocation">
      <summary> Annotations are added with a single click and the annotation location is set to
            the document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickLocation">
      <summary> Annotations are added with a double-click and the annotation location is set to
            the document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickCenter">
      <summary> Annotations are added with a single click and the annotation is centered on the
            document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickCenter">
      <summary> Annotations are added with a double-click and the annotation is centered on the
            document position that was clicked. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.DocumentRotation">
      <summary> Specifies the amount of rotation to apply to the document and annotations by the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)" /> method. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate90">
      <summary> Rotates 90 degrees clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate180">
      <summary> Rotates 180 degrees clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate270">
      <summary> Rotates 270 degrees clockwise. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.EllipseData">
      <summary>
            Ellipse annotation data.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and fill.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle, fill, outline
            and shadow options. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
      <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
      <param name="shadowOffset"> The amount of offset applied to the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing the ellipse data. </param>
      <param name="context"> A context containing information about this object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.Clone">
      <summary> Creates a copy of the <STRONG>EllipseData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.Equals(System.Object)">
      <summary> Determines if another <STRONG>EllipseData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>EllipseData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>EllipseData</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object to fill with data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.EllipseData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.EmbeddedImageData">
      <summary> Data for the <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image. </summary>
      <param name="image"> The image for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, shadow and shadow
            offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from WANG data. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Clone">
      <summary> Creates a copy of this object. </summary>
      <returns> A copy of this <STRONG>EmbeddedImageData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Equals(System.Object)">
      <summary> Determines if another <STRONG>EmbeddedImageData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>EmbeddedImageData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this data. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Image">
      <summary> Gets or sets the image of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FillType">
      <summary>
            Specifies the type of fill used by an
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationBrush.html">AnnotationBrush</a>.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Solid">
      <summary> A solid fill. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Hatch">
      <summary> A hatch brush. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Texture">
      <summary> A texture brush. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.LinearGradient">
      <summary> A linear gradient brush. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FreehandData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> with no initial points, specifying the fill,
            outline and translucency </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline, fill and initial
            points.</para>
      </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the lines or curves. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline and initial points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the freehand points. These points must be in
            annotation space. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from WANG attribute data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this object. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
      <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.Clone">
      <summary> Create a copy of this annotation. </summary>
      <returns> A copy of this <STRONG>FreehandData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.FreehandData.ClosedShape">
      <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.Equals(System.Object)">
      <summary> Determines if another <STRONG>FreehandData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>FreehandData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Fill">
      <summary> Gets or sets the fill for the freehand. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.LineType">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType" /> used for the lines or curves of this annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.FreehandData.Outline">
      <summary> Gets or sets the outline for this freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FreehandLineType">
      <summary> Specifies the line type used for freehand annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Straight">
      <summary> The points are joined with straight lines. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Curves">
      <summary> The points are joined with curved lines. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Beziers">
      <summary> The points are used for Bezier curves. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.HotSpotData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds fill. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, fill and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
      <param name="activeFill"> The fill used when the annotation is active. </param>
      <param name="activeOutline"> The outline used when the annotation is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information of this object. </param>
      <param name="context"> A context containing information about this object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Active">
      <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.ActiveFill">
      <summary> Gets or sets the fill used when the HotSpot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.ActiveOutline">
      <summary> Gets or sets the outline used when the HotSpot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.Clone">
      <summary> Creates a copy of this <STRONG>HotSpotData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.Equals(System.Object)">
      <summary> Determines if another <STRONG>HotSpotData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>HotSpotData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Fill">
      <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>HotSpotData</STRONG>. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Outline">
      <summary> Gets or sets the outline used when the HotSpot is inactive. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.HotSpotFreehandData">
      <summary>
            Data for a hot spot freehand annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill and active fill.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
      <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill when the hotspot is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
      <param name="fill"> The fill for the hotspot. </param>
      <param name="activeFill"> The fill used when the hotspot is active. </param>
      <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if a parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
      <param name="fill"> The fill for the hotspot. </param>
      <param name="points"> The initial point for the hotspot.  These points must be in annotation space. </param>
      <exception> Thrown if a parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Active">
      <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.ActiveFill">
      <summary> Gets or sets the fill used when the HotSpot is active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Clone"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Equals(System.Object)">
      <summary> Determines if another <STRONG>HotSpotFreehandData</STRONG> object has the same property settings.
            </summary>
      <param name="obj"> An <STRONG>HotSpotFreehandData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Fill">
      <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.LineType">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType" /> used for the lines or curves of this annotation.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IAnnotationLock">
      <summary>
            The interface used to define the security when locking annotations is required.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Clone">
      <summary>Creates a copy of this IAnnotationLock.</summary>
      <returns>A copy of the security lock.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.EncryptionKey">
      <summary>
            Gets or sets the encrypted key used to lock or unlock the annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock">
      <summary>
            Locks the annotation without a password.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock(System.String)">
      <summary>
            Locks the annotation with a password.
            </summary>
      <param name="password">A password that will be required to unlock the annotation.</param>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.Locked">
      <summary>
            Gets a value indicating whether the object is currently locked.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.LockedImage">
      <summary>
            Gets or sets the image used to indicate that an annotation is locked.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanged">
      <summary> Raised when a property has been changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock">
      <summary>
            Unlocks an annotation previously locked with the Lock method.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock(System.String)">
      <summary>
            Unlocks an annotation that has be locked with a password.
            </summary>
      <param name="password">The password required to unlock the annotation.</param>
      <returns>True if the unlock was successful.</returns>
    </member>
    <member name="T:Atalasoft.Annotate.IAttachableAnnotation">
      <summary> This interface is implemented by annotation data classes, such as <see cref="T:Atalasoft.Annotate.CommentData" />, that can be
            attached to other annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Guid">
      <summary> Gets a <STRONG>Guid</STRONG> used to identify the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Parent">
      <summary> Gets or sets the annotation this annotation is attached to, if any. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IHighlighter">
      <summary> This interface is used by <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to indicate that they have highlighter
            support. This information is used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" /> when burning annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IHighlighter.Translucent">
      <summary> Gets a value indicating whether the annotation is a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IWangCompatible">
      <summary>
            This interface is used to indicate that an AnnotationData object is WANG
            compatible.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IWangCompatible.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about the annotation to be
            formatted as WANG data. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing the information required to generate WANG data.
            </returns>
    </member>
    <member name="T:Atalasoft.Annotate.LayerData">
      <summary> The <STRONG>LayerData</STRONG> class is used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects,
            including other <STRONG>LayerData</STRONG> objects, allowing the annotations to be organized into layers. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.#ctor">
      <summary>Creates a new instance of <strong>LayerData</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerData</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about this <STRONG>LayerData</STRONG>.
            </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Clone">
      <summary> Creates a copy of this <STRONG>LayerData</STRONG> object. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LayerData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LayerData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.GetAttachments(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData" /> for all annotations attached to the
            specified parent. </summary>
      <param name="parent"> The parent annotation. </param>
      <returns> An <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData" /> for all annotations attached to the
            specified parent. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LayerData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>LayerData</STRONG>. </summary>
      <param name="info"> The SerializationInfo where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.GroupAnnotation">
      <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.Items">
      <summary> Gets an <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> used to hold the data for this layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end --></summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnRotationChanged(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Rotate(System.Single)"></member>
    <member name="P:Atalasoft.Annotate.LayerData.SerializeCollection">
      <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> is serialized along
            with the <STRONG>LayerData</STRONG> object. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.LineData">
      <summary> This class holds data for the <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor">
      <summary> Creates a new instance of <STRONG>LineData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline and translucency. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the start point, end point, outline and
            translucency. </summary>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this <STRONG>LineData</STRONG>. </param>
      <param name="context"> The StreamingContext of this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LineData.Clone">
      <summary>Creates a copy of this LineData.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.LineData.EndPoint">
      <summary> Gets or sets the ending point for the line. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LineData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LineData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LineData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.LineData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with data describing this <STRONG>LineData</STRONG>. </summary>
      <param name="info"> A SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information required for WANG serialization.
            </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LineData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.LineData.Outline">
      <summary> Gets or sets the outline for the <STRONG>LineData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.ResizeToBounds(System.Drawing.RectangleF)">
      <summary> Resizes this <STRONG>LineData</STRONG> object to fit within the given bounds </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.StartPoint">
      <summary> Gets or sets the starting point for the line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.LinesData">
      <summary> This class holds information for the <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and end points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and translucency. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and an array of end points.
            </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  These must be specified in
            annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, an array of points and whether
            this annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  Theses must be specified in
            annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
      <param name="points"> An array of end points for the lines.  Theses must be specified in annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing data for this object. </param>
      <param name="context"> The StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LinesData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LinesData.Clone">
      <summary> Create a copy of this <STRONG>LinesData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.LinesData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LinesData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LinesData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LinesData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.LinesData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with data from this class. </summary>
      <param name="info"> The SerializationInfo object that LinesData will be stored into. </param>
      <param name="context"> The StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object describing this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this <STRONG>LinesData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.LinesData.Outline">
      <summary> Gets or sets the outline for the <STRONG>LinesData</STRONG> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LinesData.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorDirection">
      <summary> Specifies the mirror direction. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.MirrorDirection.Horizontal">
      <summary> Mirror (flip) the annotation horizontally. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.MirrorDirection.Vertical">
      <summary> Mirror (flip) the annotation vertically. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorEventArgs">
      <summary> This class is used with the <see cref="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)" /> method to provide information on the
            mirror action. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.MirrorEventArgs.#ctor(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Creates a new instance of MirrorEventArgs specifying the mirror direction and whether the annotation
            should maintain it's visual position. </summary>
      <param name="direction"> The direction to mirror. </param>
      <param name="maintainPosition"> Indicates whether the annotation maintains its visual position.  If
            <STRONG>true</STRONG>, the annotation's location will be changed to keep the annotation visually in the same
            location.  If <STRONG>false</STRONG>, the annotation is flipped along its axis. </param>
    </member>
    <member name="P:Atalasoft.Annotate.MirrorEventArgs.Direction">
      <summary> Gets the direction of the mirror operation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.MirrorEventArgs.MaintainPosition">
      <summary> Gets a value indicating whether the annotation should maintain its visual position. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.Mirrored" /> event. </summary>
      <param name="sender"> The object sending this event. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.OcrRegionData">
      <summary> This class holds information for the <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from WANG data. </summary>
      <param name="wangData"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> specifying the selection bounds, sequence number
            of color. </summary>
      <param name="bounds"> The annotation bounds. </param>
      <param name="sequenceOrder"> The sequence number for this annotation.  This value must be 1 or greater. </param>
      <param name="color"> The color for the selection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from serialization data. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> containing the annotation data. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.Clone"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.OcrRegionData.Color">
      <summary> Gets or sets the color used for the selection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetWangAttributeData"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.OcrRegionData.SequenceOrder">
      <summary> Gets or sets the sequence order value. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="T:Atalasoft.Annotate.PointBaseData">
      <summary> This abstract class is used for annotations that require a series of points to define their shape.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor">
      <summary>
            The default constructor of a PointBaseData object. PointBaseData is an abstract
            class and cannot be created directly.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(Atalasoft.Annotate.PointFCollection)">
      <summary>
            A constructor for the PointBaseData object specifying the PointFCollection
            used.
            </summary>
      <param name="points">A PointFCollection for this object.</param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A constructor for the PointBaseData object specifying the serialization
            information for this data.
            </summary>
      <param name="info">The SerializationInfo object containing information about this data.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean,System.Boolean)">
      <summary> Calculates the bounding rectangle for the annotation. </summary>
      <param name="pen"> The pen used for the points. </param>
      <param name="shadow"> The shadow for the annotation. </param>
      <param name="shadowOffset"> The shadow offset for the annotation. </param>
      <param name="translucent"> A value indicating whether the annotation is translucent. </param>
      <param name="closed"> A value indicating whether the annotation points form a closed shape. </param>
      <returns> The bounding rectangle for the annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary> Fills the data object with cloned property values. </summary>
      <param name="data"> A class that derives from <STRONG>PointBaseData</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object for this data. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.GetPointBounds">
      <summary> Gets a bounding rectangle which includes all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points" /></summary>
      <returns> A RectangleF that contains all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points" /></returns>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.PointBaseData.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> used to store the points for the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.PointFCollection">
      <summary> A collection of PointF objects used by points based annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for this collection. </param>
      <exception> Thrown if the points parameter is null or contains no items. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> from serialized data. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.GetClonedObject">
      <summary> Returns a new instance of <STRONG>PointFCollection</STRONG>. </summary>
      <returns> A new instance of <STRONG>PointFCollection</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.PointFCollection.IgnoreChanges">
      <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.PointFCollection" /> event should not be raised.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.PolygonData">
      <summary> Contains annotation information for a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline and fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and shadow settings.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings, and
            translucency. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and array
            of points for the polygon.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and points
            collection.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and an array of
            points.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
      <param name="points"> An array of <STRONG>PointF</STRONG> objects specifying the initial points of the polygon.
            </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about the <STRONG>PolygonData</STRONG>.
            </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.Clone">
      <summary>Creates a copy of the PolygonData.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.Equals(System.Object)">
      <summary> Determines if another <STRONG>PolygonData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>PolygonData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Fill">
      <summary> Gets or sets the fill for the <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object will <STRONG>PolygonData</STRONG> information. </summary>
      <param name="info"> The SerialziationInfo where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.PolygonData.Outline">
      <summary> Gets or sets the outline for the <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.ShadowOffset">
      <summary> Gets or sets the drop shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleData">
      <summary> Contains information describing data for a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object.
            </summary>
      <param name="wangData"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information for a HollowRectangle or
            FilledRectangle WANG annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and fill. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill, outline and
            shadow settings. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to position the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and outline. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing <STRONG>RectangleData</STRONG> information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.AnnotationBounds"></member>
    <member name="P:Atalasoft.Annotate.RectangleData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.Clone">
      <summary> Creates a copy of the <STRONG>RectangleData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.Equals(System.Object)">
      <summary> Determines if another <STRONG>RectangleData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>RectangleData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>RectangleData</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object to fill with data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.RectangleData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleGrip">
      <summary> Specifies the position of the grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopLeft">
      <summary> The grip positioned at the top-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopCenter">
      <summary> The grip positioned at the top-center of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopRight">
      <summary> The grip positioned at the top-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.CenterLeft">
      <summary> The grip positioned at the center-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.CenterRight">
      <summary> The grip positioned at the center-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomLeft">
      <summary> The grip positioned at the bottom-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomCenter">
      <summary> The grip positioned at the bottom-center of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomRight">
      <summary> The grip positioned at the bottom-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.Rotation">
      <summary> The grip positioned above the top-center of the annotation used for
            rotating. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleGripDisplay">
      <summary> Specifies the grips to display. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.Both">
      <summary> Both corner and side grips are displayed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.CornerGrips">
      <summary> Only the corner grips are displayed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.SideGrips">
      <summary> Only the side grips are displayed. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.ReferencedImageData">
      <summary> The data for a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData </STRONG>from WANG annotation data. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename of the image.
            </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, shadow and shadow
            offset. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="location"> The location of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, initial location,
            shadow and shadow offset. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="location"> The location of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Clone">
      <summary> Creates a copy of this <STRONG>ReferencedImageData</STRONG> object. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)">
      <summary> Releases internal resources used by the <STRONG>ReferencedImageData</STRONG> object. </summary>
      <param name="disposing"> Set to true when called from the <see cref="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)" /> method.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Equals(System.Object)">
      <summary> Determines if another <STRONG>ReferencedImageData</STRONG> object has the same property settings.
            </summary>
      <param name="obj"> An <STRONG>ReferencedImageData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.FileName">
      <summary> Gets or sets the filename of the annotation image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Finalize"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>ReferencedImageData</STRONG> object.
            </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.ImageObject">
      <summary> Gets or sets the image object for this annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.OnCreateImageObject">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.ReferencedImageData.ImageObject" /> needs to be created. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RenderDevice">
      <summary> Specifies the type of device annotations will be rendered on. This allows the renderer to adjust for
            differences in media. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Display">
      <summary> Rendering is going to the screen or a control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Printer">
      <summary> Rendering is for a printer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Image">
      <summary> Rendering is directly to an image. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RubberStampData">
      <summary> The annotation data object for a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> with default parameters. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle of the
            annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle and text of the
            annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text and font.
            </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text, font,
            font brush, fill, outline and corner radius. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing the outline of the annotation. </param>
      <param name="cornerRadius"> The radius used on the corners. </param>
      <param name="padding">
        <para>Space added around the text.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about this annotation. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Create a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text and font.
            </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text, font, font
            brush, fill outline and corner radius. </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing the outline of the annotation. </param>
      <param name="cornerRadius"> The radius used on the corners. </param>
      <param name="padding"> Space added around the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.Clone"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.RubberStampData.CornerRadius">
      <summary> Gets or sets the radius used for the corners of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.Equals(System.Object)">
      <summary> Determines if another <STRONG>RubberStampData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>RubberStampData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Font">
      <summary> Gets or sets the font for the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.FontBrush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Padding">
      <summary> Gets or sets the amount of space around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Text">
      <summary> Gets or sets the text for this annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.SerializationInfoHelper">
      <summary> This class contains methods used when serializing or deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.SerializationInfoHelper.#ctor(System.Runtime.Serialization.SerializationInfo)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.SerializationInfoHelper" /> class</summary>
    </member>
    <member name="T:Atalasoft.Annotate.ShadowMode">
      <summary> Specifies the shadow mode used for text annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.Annotation">
      <summary> The shadow is applied only to the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.Text">
      <summary> The shadow is applied only to the text. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.AnnotationAndText">
      <summary> The shadow is applied to both text and annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.TextData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor">
      <summary> Creates a new instance of <STRONG>TextData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> from WANG annotation information. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation location and size.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> from serialized information. </summary>
      <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Alignment">
      <summary> Gets or sets the horizontal alignment of the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.AllowEditing">
      <summary>
        <para>Gets or sets a value indicating whether the annotation's text data should be editable or read-only
            via the user interface.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.TextData.Clone">
      <summary> Creates a copy of this <STRONG>TextData</STRONG>. </summary>
      <returns> A copy of this annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary>Creates a copy of this TextData.</summary>
      <returns>A copy of this annotation data.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.Equals(System.Object)">
      <summary> Determines if another <STRONG>TextData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>TextData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Font">
      <summary> Gets or sets the font for the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.FontBrush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the font. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.FormatFlags">
      <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.TextData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this object. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this <STRONG>TextData</STRONG>.
            </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.LineAlignment">
      <summary> Gets or sets the line alignment. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Minimized">
      <summary> Gets or sets a value indicating whether the annotation is minimized. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Padding">
      <summary> Gets or sets a value indicating how much padding is added around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.RenderingHint">
      <summary> Gets or sets the System.Drawing.Text.TextRenderingHint used when rendering this text
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.ShadowMode">
      <summary> Gets or sets the shadow mode used to indicate how the shadow is drawn. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Text">
      <summary> Gets or sets the text for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Trimming">
      <summary> Get or sets the type of character trimming to perform on the text. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UndoChange">
      <summary> Specifies the type of undo being performed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.PropertyChange">
      <summary> Used when a property of the annotation has been changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.CollectiveChange">
      <summary> Used when multiple undo actions are combined into a single undo. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.InvokeMethod">
      <summary> Used when a method, such as Mirror, is invoked. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UndoManagerAction">
      <summary> Specifies the actions taken when an <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> is passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification" /> event. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Default">
      <summary> The undo is added to the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Ignore">
      <summary> The undo is ignored. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Combine">
      <summary> The undo and all that follow until a <strong>ResetDefault</strong> action is
            received are combined into a single undo object. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.ResetDefault">
      <summary> Indicates that this is the last undo to combine with previous undos. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.WangAnnotationType">
      <summary> Specifies the type of WANG annotation used for serialization. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageEmbedded">
      <summary> An image annotation in which the image data is embedded into the WANG data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageReference">
      <summary> An image annotation in which a filename is specified for the image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.StraightLine">
      <summary> A single line annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.FreehandLine">
      <summary> A freehand annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.HollowRectangle">
      <summary> A rectangle annotation without a fill. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.FilledRectangle">
      <summary> A filled rectangle annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TypedText">
      <summary> A text annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TextFromFile">
      <summary> A text annotation containing text from a file. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TextStamp">
      <summary> A text annotation that cannot be edited. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.AttachANote">
      <summary> A text annotation that has the appearance of a sticky note. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.OcrRegion">
      <summary> A rectangle selected to identify an area of the image to OCR in a separate process. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.WangAttributeData">
      <summary> This class hold information used by the <see cref="T:Atalasoft.Annotate.Formatters.WangFormatter" /> when serializing <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.#ctor">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Bounds">
      <summary> Gets or sets the bounding rectangle of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Color1">
      <summary> The primary color of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Color2">
      <summary> Gets or sets the text color of an Attach-a-Note WANG annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateAttachANoteAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an Attach-a-Note annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="color2"> The text color. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFilledRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FilledRectangle annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFreehandLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FreehandLine annotation. </summary>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing annotation data points. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateHollowRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean,System.Single)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a HollowRectangle annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageEmbeddedAttribute(System.Drawing.RectangleF,System.Byte[],System.Boolean)">
      <summary> Creates a new <STRONG>WangAttributeData</STRONG> for an ImageEmbedded annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="dib"> The embedded image data in DIB format. </param>
      <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageReferenceAttribute(System.Drawing.RectangleF,System.String,System.Boolean)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an ImageReference annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="fileName"> The filename of the image. </param>
      <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateOcrRegionAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.Int32)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an OCR region annotation. </summary>
      <param name="bounds"> The bounds for the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font for the annotation. </param>
      <param name="sequenceOrder"> The sequence order for the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateStraightLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a StraightLine annotation. </summary>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing annotation data points. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextFromFileAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WantAttributeData</STRONG> for a TextFromFile annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextStampAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TextStamp annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTypedTextAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TypedText annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Dib">
      <summary> Gets or sets the image data for embedded image annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.FileName">
      <summary> Gets or sets the filename of the image for ImageReference WANG annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Font">
      <summary> Gets or sets the font used for WANG annotations that contain text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Group"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Highlighting">
      <summary> Gets or sets a value indicating whether the annotation is a highlighter. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.ImageTransformation"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.LineSize">
      <summary> Gets or sets the size of the annotation lines. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Points">
      <summary> Gets or sets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for a StraightLine or FreehandLine
            WANG annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Text">
      <summary> Gets or sets the text for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Time">
      <summary> Gets or sets the time that the annotation was first saved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Transparent">
      <summary> Gets or sets a value indicating whether white pixel are rendered as transparent. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Type">
      <summary>The type of WANG annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.UnknownType6Data"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Visible">
      <summary> Gets or sets a value indicating if the annotation is visible. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationBrushConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationBrushConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="destinationType"> A Type that represents the type you want to convert to. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="value"> An Object that specifies the type of array for which to get properties. </param>
      <param name="attributes"> An array of type Attribute that is used as a filter. </param>
      <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Returns whether this object supports properties, using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <returns>
        <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationImageConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationImage" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationImageConverter</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationPenConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationPenConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="destinationType"> A Type that represents the type you want to convert to. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="value"> An Object that specifies the type of array for which to get properties. </param>
      <param name="attributes"> An array of type Attribute that is used as a filter. </param>
      <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Returns whether this object supports properties, using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <returns>
        <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationBrushEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationBrushEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationFontEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationFont" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationFontEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationImageEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationImage" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationImageEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Indicates whether the specified context supports painting a representation of an object's value
            within the specified context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns>
        <STRONG>True</STRONG> if PaintValue is implemented; otherwise, <STRONG>false</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary> Paints a representation of the value of an object using the specified PaintValueEventArgs. </summary>
      <param name="e"> A PaintValueEventArgs that indicates what to paint and where to paint it. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationPenEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationPenEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter">
      <summary> An abstract base class that encompasses elements for exporting annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.#ctor">
      <summary>Initializes the <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport">
      <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> can do a simple
            export. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver">
      <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> can write annotations
            to a stream without affecting existing contents. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Construct">
      <summary> A factory method to construct a new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />. </summary>
      <returns> A new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CopyStream(System.IO.Stream,System.IO.Stream)">
      <summary> Copies the entire source stream to the destination stream. </summary>
      <param name="sourceStream"> A non-null stream with annotation source data </param>
      <param name="destStream"> A non-null stream to which the source data will be copied. </param>
      <exception> Thrown if either stream argument is <c>null</c> (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Exports a single page of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
      <exception> Thrown if <paramref name="sourceStream" /> or <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if <paramref name="frameIndex" /> is less than zero. </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Exports a multiple pages of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
      <exception> Thrown if <paramref name="sourceStream" /> or <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Export a set of annotations over an existing stream. </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
      <exception> Thrown if <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if the <paramref name="frameIndex" /> is less than zero. </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Export a set of annotations over an existing stream </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
      <exception> Thrown if <paramref paramref="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.IsValidFormat(System.IO.Stream)">
      <summary> Determines if the stream is the correct format. </summary>
      <param name="stm"> A non-null stream. </param>
      <returns> Returns <c>true</c> if the stream contains valid data for this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />, <c>false</c>
            otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter">
      <summary> The <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" /> object is capable of taking DotAnnotate Annotation objects
            and translating them into a format suitable for PDF. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.#ctor">
      <summary> Constructs a new <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" /> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.AlwaysEmbedAnnotationData">
      <summary> Indicates whether or not the <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" /> will embed data representing the dotAnnotate
            annotation in its entirety. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.CanExport">
      <summary> For <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" />, this property always return true. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.CanExportOver">
      <summary> For <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" />, this property always return false. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.Construct">
      <summary> Constructs a new <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" />. </summary>
      <returns> A new instance of <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" />. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.IsValidFormat(System.IO.Stream)">
      <summary> Determines if a stream contains PDF content. </summary>
      <param name="stm"> A non-null stream. </param>
      <returns> Returns true if the stream contains PDF, false otherwise. </returns>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary>Low-level implementation of exporting a single page of annotations to a given stream.</summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary>Low-level implementation of exporting a multiple pages of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary>Low-level implementation of exporting a set of annotations over an existing stream.</summary>
      <param name="destStream">The destrination stream for the document.</param>
      <param name="pageSize"> The size of the source page.</param>
      <param name="units"> The units in which the page size is expressed.</param>
      <param name="resolution"> The resolution of the page.</param>
      <param name="layer"> The page of annotations to export.</param>
      <param name="frameIndex"> The page number for exporting.</param>
      <exception cref="T:System.NotImplementedException">This feature is not supported in the base implementation.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary>Low-level implementation of exporting a set of annotations over an existing stream.</summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
      <exception cref="T:System.NotImplementedException">This feature is not supported in the base implementation.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.OverwriteExistingAnnotations">
      <summary> Indicates whether or not the <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" /> will overwrite annotations that already exist on a
            page. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter.UnknownAnnotationHandler">
      <summary> Sets or gets a handler for unknown annotation types. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.PdfAnnotationEmbeddingAction">
      <summary> This enumeration is used to select how an unknown annotation type will be exported to pdf. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Exporters.PdfAnnotationEmbeddingAction.None">
      <summary> No action - the annotation will be skipped. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Exporters.PdfAnnotationEmbeddingAction.EmbedAlias">
      <summary> The annotation will be exported as a different annotation type entirely. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Exporters.PdfAnnotationEmbeddingAction.EmbedFacade">
      <summary> The annotation will be exported with a set of images that represent its appearance in the PDF </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy">
      <summary>
        <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy" /> is a class used to help the <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationDataExporter" /> select a mechanism for
            exporting an unknown annotation type. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy.#ctor">
      <summary> Constructs a new <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy" /> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy.AnnotationDataAlias">
      <summary> Sets or gets an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to be used in place of an unknown annotation type. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy.AnnotationFacades">
      <summary> Sets or gets a collection of <see cref="T:Atalasoft.Imaging.AtalaImage" /> objects to use as facades in PDF. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy.EmbeddingAction">
      <summary> Sets or gets the action that will be taken when an unknown annotation will be exported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.PdfUnknownAnnotationHandler">
      <summary>Represents a method for selecting a <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy" /> to use when an
            unknown annotation type is encountered.</summary>
      <param name="annotation">An <see cref="T:Atalasoft.Annotate.AnnotationData" /> of an unknown type.</param>
      <returns>The <see cref="T:Atalasoft.Annotate.Exporters.PdfAnnotationExportPolicy" /> that describes how the annotation should be handled.</returns>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs">
      <summary> This class contains information used when deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationController,System.Runtime.Serialization.IFormatter,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationDeserializationEventArgs</STRONG>. </summary>
      <param name="controller"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for the annotation. </param>
      <param name="formatter"> The formatter used to deserialize the data. </param>
      <param name="data"> The object resulting from deserialization. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Cancel">
      <summary> Gets or sets a value indicating whether to add this object into the controller. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Controller">
      <summary> Gets the controller being serialized into. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Data">
      <summary> Gets or sets the object that will be added into the controller. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Formatter">
      <summary> Gets the formatter used to deserialize the data. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1">
      <summary> This class contains information used when deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.#ctor(`0,System.Runtime.Serialization.IFormatter,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1" /> class</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Cancel"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Controller"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Data"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Formatter"></member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventHandler">
      <summary> Used to handle the <see cref="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.ILegacyXmpSupport">
      <summary> This interface is used by annotation to support reading from and generating XMP annotation data for
            versions 4 and below of DotAnnotate. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.FromXmp(System.Xml.XmlTextReader)">
      <summary> Set the annotation property settings. </summary>
      <param name="reader"> The <STRONG>XmlTextReader</STRONG> containing the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.ToXmp(System.Xml.XmlTextWriter)">
      <summary> Generates the XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> in which to write the data. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.LegacyXmpFormatter">
      <summary> This class is used to serialize and deserialize XMP annotation data from DotAnnotate 4.0 and earlier.  The
            <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter" /> will automatically use this class to deserialize when needed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with default options. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with the specified property values.
            </summary>
      <param name="formatting"> Indicates how the XML will be formatted. </param>
      <param name="indentation"> The number of spaces for indenting. </param>
      <param name="packet"> Indicates whether to generate an XMP packet.  This is required when the data is embedded into
            an image. </param>
      <param name="resolution"> The resolution of the annotation data. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Binder"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Context"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.CreateXmpPacket"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Deserialize(System.IO.Stream)"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializeBrush(System.Xml.XmlReader)">
      <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />. </summary>
      <param name="reader"> An <STRONG>XmlReader</STRONG> containing the serialized data. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> created from the data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializePen(System.Xml.XmlReader)">
      <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationPen" />. </summary>
      <param name="reader"> The <STRONG>XmlReader</STRONG> containing the pen data. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.AnnotationPen" /> created from the data. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Formatting"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Indentation"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Resolution"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Serialize(System.IO.Stream,System.Object)"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializeBrush(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationBrush,System.String)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> into XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the serialized data into. </param>
      <param name="brush"> The brush to convert. </param>
      <param name="tagName"> The name of the tag to give the brush data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializePen(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationPen)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen" /> into XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the data into. </param>
      <param name="pen"> The pen to convert. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SurrogateSelector"></member>
    <member name="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs">
      <summary> This class contains information used for WANG serialization. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>WangAnnotationSerializationEventArgs</STRONG>. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> being deserialized. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Annotation">
      <summary> Gets or sets the annotation related to the serialization process. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.AnnotationData">
      <summary> Gets or sets the <STRONG>AnnotationData</STRONG> related to the serialization process. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Data">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for the annotation during deserialization. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.WangFormatter">
      <summary> The <STRONG>WangFormatter</STRONG> converts annotation data to and from WANG format. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>WangFormatter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor(System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>WangFormatter</STRONG> specifying the viewer resolution. </summary>
      <param name="resolution"> The resolution of the viewer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Binder">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Context">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Deserialize(System.IO.Stream)">
      <summary> Deserializes WANG data into a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </summary>
      <param name="serializationStream"> A stream containing WANG annotation data. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> object containing the annotations. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.Formatters.WangFormatter.DeserializeAnnotation">
      <summary> Raised when an annotation is being deserialized. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.OnDeserialize(Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs)">
      <summary> Called when an annotation is being deserialized. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs" /> containing the <see cref="T:Atalasoft.Annotate.WangAttributeData" />
            being deserialized. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Resolution">
      <summary> Gets or sets the document resolution used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes annotations into WANG format.</summary>
      <param name="serializationStream">The stream where serialized data will be stored.</param>
      <param name="graph">The object to serialize.</param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector">
      <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector" /> used by the current formatter. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedAnnotation(System.IO.Stream,Atalasoft.Annotate.AnnotationData,System.String,System.Int32)">
      <summary> Called when an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object being serialized does not implement the <see cref="T:Atalasoft.Annotate.IWangCompatible" /> interface. </summary>
      <param name="stream"> The stream where annotation data will be stored. </param>
      <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to serialize. </param>
      <param name="group"> The group name for this annotation. This is saved as the OiGroup marker. </param>
      <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedObject(System.IO.Stream,System.Object)">
      <summary>Called when an unsupported object needs to be serialized.</summary>
      <param name="stream">The stream where annotation data will be stored.</param>
      <param name="graph">The object to serialize.</param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteWangAnnotation(System.IO.Stream,Atalasoft.Annotate.IWangCompatible,System.String,System.Int32)">
      <summary> Called to write a WANG compatible annotation to the serialization stream. </summary>
      <param name="stream"> The stream where this data will be stored. </param>
      <param name="wang"> An <see cref="T:Atalasoft.Annotate.IWangCompatible" /> object to serialize. </param>
      <param name="group"> The name of the group for this annotation. This is saved as the OiGroup marker. </param>
      <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved1"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved2"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nHRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigHRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigVRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nReserved"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nVRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.rotation"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.scale"></member>
    <member name="T:Atalasoft.Annotate.Formatters.XmpFormatter">
      <summary> This class converts objects into XMP data to be embedded into images or saved as standalone files.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet and whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />. </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />, and a resolution.
            </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
      <param name="resolution"> The resolution of the annotations. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Text.Encoding,System.Boolean,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, encoding,
            whether or not data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />, and a
            resolution. </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="encoding">
        <para>The <STRONG>System.Text.Encoding</STRONG> to use when serializing the
            annotations.</para>
      </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
      <param name="resolution"> The resolution of the annotations. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.AnnotationDataVersion">
      <summary> Gets the annotation version </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Context">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization
            and deserialization. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.CreateXmpPacket">
      <summary>
            Gets or sets a value indicating whether full XMP is generated or an XMP
            packet.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Deserialize(System.IO.Stream)">
      <summary>Deserializes XMP data back into the original objects.</summary>
      <param name="serializationStream">A stream containing XMP formatted data.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there are any errors during the deserialization process.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Encoding">
      <summary> Gets or sets the <STRONG>System.Text.Encoding</STRONG> to use when serializing the annotation data.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Formatting">
      <summary>Gets or sets the type of XML formatting used when serializing data.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Indentation">
      <summary>Gets or sets the number of spaces to indent the data when serializing.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Resolution">
      <summary> Gets or sets the resolution of the annotation data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes an object into XMP data.</summary>
      <param name="serializationStream">The stream where the XMP data will be stored.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream or graph parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during the serialization process.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects">
      <summary>
            Gets or sets a value indicating whether objects that cannot be created are
            skipped instead of throwing an exception.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector">
      <summary>
            Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector" /> used by the current formatter.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Icons.AnnotateIcon">
      <summary> Specifies which image to extract with the <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)" /> method.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ellipse"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Freehand"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHighlighter"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Line"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Lines"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Polygon"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Protractor"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Rectangle"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHighlighter"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Redact"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RubberStamp"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ruler"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.StickyNote"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Text"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHotspot"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Callout"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHotspot"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.EmbeddedImage"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.ReferencedImage"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfLine"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfMarkup"></member>
    <member name="T:Atalasoft.Annotate.Icons.AnnotateIconSize">
      <summary> Specifies the image size to extract with <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size16">
      <summary> A 16 x 16 pixel image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size24">
      <summary> A 24 x 24 pixel image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size32">
      <summary> A 32 x 32 pixel image. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Icons.IconResource">
      <summary> This class can be used to extract annotation icon images from the <STRONG>DotAnnotate</STRONG> assembly.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Icons.IconResource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Icons.IconResource" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)">
      <summary> Extracts an image from the <STRONG>DotAnnotate</STRONG> assembly. </summary>
      <param name="icon"> The image to extract. </param>
      <param name="size"> The size of the image to extract. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporter">
      <summary>
        <STRONG>AnnotationDataImporter</STRONG> is an abstract base class used to define how annotations are
            imported from arbitrary data files into DotImage. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> class</summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported">
      <summary> Raised after a single annotation has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported">
      <summary> Raised after a page of annotations has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting">
      <summary> Raised before a page of annotations will be imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.FailsafeAnnotationFactory">
      <summary> Gets or sets a delegate that is used to create annotations if an importer is unable to do so. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new annotation importer associated with a given stream. </summary>
      <param name="stm"> A non-null stream containing annotation data. </param>
      <returns> A new annotation importer for importing annotations. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)">
      <summary> Returns the number of annotations on a conceptual page of a document. </summary>
      <param name="page"> page is an integer that represents the conceptual zero based page index of a document.  It will
            be range checked against the total number of pages in the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import">
      <summary> Imports all annotations as <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" />. </summary>
      <returns> A new <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> object representing annotations for the entire document. 
            Each <see cref="T:Atalasoft.Annotate.LayerData" /> within the collection represents one page of annotations.  If a page has no
            annotations, the <see cref="T:Atalasoft.Annotate.LayerData" /> will be non-null, but empty. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32)">
      <summary> Imports a page of annotations as <see cref="T:Atalasoft.Annotate.LayerData" />. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32,System.Int32)">
      <summary> Imports a single annotation from a given page of annotations. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <param name="annotIndex"> The zero-based annotation which will be imported.  annotIndex is range checked against the
            number of annotations of the page.  The number of annotations on a page is available through <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)" />. </param>
      <returns> A single <see cref="T:Atalasoft.Annotate.AnnotationData" /> object representing the imported annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates whether or not an <STRONG>AnnotationDataImporter</STRONG> can recognize a particular data
            format. </summary>
      <param name="stm"> A non-null stream used to recognize file format. </param>
      <returns> true indicates that the <STRONG>AnnotationDataImporter</STRONG> recognizes this format. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.LastErrors">
      <summary> Gets a collection of strings representing errors encountered while importing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetAnnotationCount(System.Int32)">
      <summary> Low level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)" />. </summary>
      <param name="page"> A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range. </param>
      <returns> An integer representing the number of annotations on the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetPageCount">
      <summary> The low-level implementation of <see cref="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount" />. </summary>
      <returns> Returns the number of pages in the document. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32)">
      <summary> Imports all annotations as a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLLoad">
      <summary> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load">
      <summary> The load method is used to allow an <STRONG>AnnotationDataImporter</STRONG> to load and to possibly cache
            annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationImported(Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs" /> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImported(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImporting(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount">
      <summary> Gets the total number of pages in a document. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Resolution">
      <summary> Gets or sets the target resolution for the annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.ThrowOnError">
      <summary> Gets or sets whether or not the importer will throw or suppress exceptions. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Units">
      <summary> Gets or sets the units of the target for the annotations. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporterFactory">
      <summary> A delegate for constructing annotations from data that a given <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" />
            doesn't understand. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that attempted to import the annotation. </param>
      <param name="location"> The location on the target page where the annotation will go. </param>
      <param name="data"> The data used to construct the annotation. </param>
      <returns> A new AnnotationData object or null.  If the delegate returns null, this annotation is ignored. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs">
      <summary> An object representing information about an annotation being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.AnnotationData,System.Int32,System.Int32)">
      <summary> Constructs a new <STRONG>AnnotationDataImportEventArgs</STRONG> object. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that has imported the annotation. </param>
      <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object that was imported. </param>
      <param name="page"> The page from which the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object was imported. </param>
      <param name="annotIndex"> The index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Annotation">
      <summary> Gets the annotation that was imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.AnnotationIndex">
      <summary> Gets the index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Importer">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that has imported the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Page">
      <summary> Gets the page from which the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object was imported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventHandler">
      <summary> A delegate called after annotation data has been imported. </summary>
      <param name="sender"> The importer being used. </param>
      <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs" /> containing information about the imported data.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataMerger">
      <summary> Merges data from one annotation into another, returning the merged annotation. </summary>
      <param name="pdfAnnotationData"> An annotation that was imported from a PDF file </param>
      <param name="serializedAnnotationData"> An annotation that was extracted from embedded data in the imported PDF
            annotation </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataMergerDictionary">
      <summary> THis is a collection of types and delegates that define how annotations are merged after importing.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataMergerDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataMergerDictionary" /> class</summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs">
      <summary> An object representing information about a page of annotations being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Constructs a new <STRONG>AnnotationDataPageImportEventArgs</STRONG> object. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> importing the page. </param>
      <param name="layer"> The layer of annotations imported. </param>
      <param name="page"> The page number of the annotations being imported. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Importer">
      <summary> Gets the AnnotationDataImporter used to import the annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Layer">
      <summary> Gets the layer of annotations imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Page">
      <summary> Gets the page number of the annotations being imported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventHandler">
      <summary> A delegate called for each page imported. </summary>
      <param name="sender"> The importer used. </param>
      <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> containing information about the page that
            was imported. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPropertyChoice">
      <summary> Enumeration used to select how one property is chosen from a pair of AnnotationData objects. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Importers.AnnotationDataPropertyChoice.FromPdfData">
      <summary> Use a property from the imported PDF annotation </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Importers.AnnotationDataPropertyChoice.FromSerializedData">
      <summary> Use a property from the annotation data embedded within the PDF annotation </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPropertyMerger">
      <summary> AnnotationDataPropertyMerger is a utility class that conditionally merges properties from one annotation
            into another.  This class is used as the default property merger in the PdfAnnotationDataImporter. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPropertyMerger.#ctor">
      <summary> Makes a default merger that will merge Location, Size, and Modified time. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPropertyMerger.#ctor(System.String[])">
      <summary> Makes a merger that will merge a set of properties by name. </summary>
      <param name="items"> A list of items that will be copied from the imported PDF annotation into the embedded PDF
            annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPropertyMerger.MergeList">
      <summary> Gets a collection of properties that will be merged from one annotation data object to another. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPropertyMerger.MergeSpecificCommonProperties(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.AnnotationData)">
      <summary> Merges a set of properties from one object into another using the MergeList to select how it will be
            merged. </summary>
      <param name="pdfAnnotationData"> An annotation that was imported from a PDF file </param>
      <param name="serializedAnnotationData"> An annotation that was extracted from embedded data in the imported PDF
            annotation </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter">
      <summary> Constructs a new <STRONG>PdfAnnotationDataImporter</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.#ctor">
      <summary> Constructs a new <STRONG>PdfAnnotationDataImporter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.#ctor(System.IO.Stream)">
      <summary> Constructs a new <STRONG>PdfAnnotationDataImporter</STRONG> for the given stream. </summary>
      <param name="stm"> A non-null stream containing a PDF document. </param>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
      <exception> Thrown if the stream is not seekable. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.AnnotationDataMergers">
      <summary> Gets a collection of mergers that are used to import annotation data from PDF annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.DefaultMerger">
      <summary> Gets the default merger used by dotAnnotate. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.FromStream(System.IO.Stream)">
      <summary> Returns a new P<STRONG>dfAnnotationDataImporter</STRONG> object attached to the given Stream. </summary>
      <param name="stm"> A non-null stream containing a PDF document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.Import(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates whether or not the stream is a PDF. </summary>
      <param name="stm"> A non-null stream. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.LLGetAnnotationCount(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.LLGetPageCount"></member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.LLLoad"></member>
    <member name="P:Atalasoft.Annotate.Importers.PdfAnnotationDataImporter.SkipUnknownAnnotationTypes"></member>
    <member name="T:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter">
      <summary> An object for importing annotations from a stream of XMP data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor">
      <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG> with a stream of XMP data. </summary>
      <param name="stm"> A stream from which annotations will be imported. </param>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new <STRONG>XmpAnnotationDataImporter</STRONG> for the given stream. </summary>
      <param name="stm"> A non-null stream containing XMP data. </param>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates if the stream contains XMP data. </summary>
      <param name="stm"> A non-null stream containing XMP data </param>
      <returns> Returns true if the stream contains XMP data; false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetAnnotationCount(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetPageCount"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLLoad"></member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfAnnotation">
      <summary> This is the base PDF annotation class all PDF annotations derive from.  This class should not be created
            directly. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.#ctor">
      <summary> Creates a new instance of PdfAnnotation with default parameters. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Creates a new instance of PdfAnnotation specifying all of its parameters. </summary>
      <param name="fill"> The brush used for filling the annotation or line cap. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="text"> The text of the annotation. </param>
      <param name="username"> The username of the person modifying it.  If null (Nothing in VB) the current user will be
            retrieved from the system. </param>
      <param name="modifiedDate"> The date when the annotation was last modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfAnnotationData)">
      <summary> Creates a new instance of <STRONG>PdfAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.Pdf.PdfAnnotationData" />
            class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfAnnotationData" /> class used by this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing the serialized annotation. </param>
      <param name="context"> A <STRONG>StreamingContext </STRONG>for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.Clone">
      <summary> Returns a copy of this annotation. </summary>
      <returns> A copy of this annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.Dispose(System.Boolean)">
      <summary> Called when the annotation is being disposed. </summary>
      <param name="disposing"> True if this was called from the public <see cref="M:Atalasoft.Annotate.Pdf.PdfAnnotation.Dispose" /> method.
            </param>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotation.Fill">
      <summary> Gets or sets the brush used to fill the annotation or line cap. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotation.OnDoubleClick(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotation.Outline">
      <summary> Gets or sets the pen used to draw the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotation.PopupEventHandler">
      <summary> An event handler used when the annotation is double-clicked and a popup window needs to be shown.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotation.Text">
      <summary> Gets or sets the text for the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfAnnotationData">
      <summary> This is the base PDF annotation data class from which all PDF annotation data objects derive.  This class
            should not be created directly. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.#ctor">
      <summary> Creates a new instance of <STRONG>PdfAnnotationData</STRONG> with default settings. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Creates a new instance of <STRONG>PdfAnnotationData</STRONG> specifying all of its settings. </summary>
      <param name="fill"> The brush used for filling the annotation or line cap. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="text"> The text of the annotation. </param>
      <param name="username"> The username of the person modifying it.  If null (Nothing in VB) the current user will be
            retrieved from the system. </param>
      <param name="modifiedDate"> The date when the annotation was last modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfAnnotationData</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing the serialized annotation. </param>
      <param name="context"> A <STRONG>StreamingContext </STRONG>for this data. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotationData.AnnotationBounds"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.Clone"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotationData.Fill">
      <summary> Gets or sets the brush used to fill the annotation or line cap. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.FormatToolTipText">
      <summary> This method is called to return the tooltip text string. </summary>
      <returns> The string used in a tooltip. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfAnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotationData.Outline">
      <summary> Gets or sets the pen used to draw the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfAnnotationData.Text">
      <summary> Gets or sets the text for the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfLineAnnotation">
      <summary> This class represents a PDF line annotation.  While similar to a standard line annotation, the PDF version
            includes a caption which is centered within or above the line (if the text is too long to fit within). </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>PdfLineAnnotation</STRONG> with default values. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfLineData)">
      <summary> Creates a new instance of <STRONG>PdfLineAnnotation</STRONG> from a <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> object.
            </summary>
      <param name="data"> The data object for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of PdfLineAnnotation specifying the points, fill, outline and whether or not to
            display its caption. </summary>
      <param name="startPoint"> The start point of the line in annotation space. </param>
      <param name="endPoint"> The end point of the line in annotation space. </param>
      <param name="displayCaption"> A value indicating whether to display the line caption. </param>
      <param name="fill"> A brush used for filling line caps. </param>
      <param name="outline"> The pen used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Create a new instance of <STRONG>PdfLineData</STRONG> specifying its parameters. </summary>
      <param name="startPoint"> The start point of the line in annotation space. </param>
      <param name="endPoint"> The end point of the line in annotation space. </param>
      <param name="displayCaption"> A value indicating whether to display the line caption. </param>
      <param name="fill"> A brush used for filling line caps. </param>
      <param name="outline"> The pen used to draw the line. </param>
      <param name="text"> The text of the annotation. </param>
      <param name="username"> The username of the person modifying the annotation. </param>
      <param name="modifiedDate"> The last modified date for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfLineAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineAnnotation.DisplayCaption"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineAnnotation.EndPoint"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineAnnotation.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineAnnotation.StartPoint"></member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfLineData">
      <summary> This class hold the data used by a <see cref="T:Atalasoft.Annotate.Pdf.PdfLineAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.#ctor">
      <summary> Creates a new instance of <STRONG>PdfLineData</STRONG> with default values. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>PdfLineData</STRONG> specifying the points, brush, pen and whether to
            display the line caption. </summary>
      <param name="startPoint"> The start point of the line in annotation space. </param>
      <param name="endPoint"> The end point of the line in annotation space. </param>
      <param name="displayCaption"> A value indicating whether to display the line caption. </param>
      <param name="fill"> A brush used for filling line caps. </param>
      <param name="outline"> The pen used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Creates a new instance of <STRONG>PdfLineData</STRONG> specifying its parameters. </summary>
      <param name="startPoint"> The start point of the line in annotation space. </param>
      <param name="endPoint"> The end point of the line in annotation space. </param>
      <param name="displayCaption"> A value indicating whether to display the line caption. </param>
      <param name="fill"> A brush used for filling line caps. </param>
      <param name="outline"> The pen used to draw the line. </param>
      <param name="text"> The text of the annotation. </param>
      <param name="username"> The username of the person modifying the annotation. </param>
      <param name="modifiedDate"> The last modified date for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfLineData</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this data. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.Clone">
      <summary>Creates a copy of this LineData.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineData.DisplayCaption">
      <summary> Gets or sets a value indicating whether the caption is displayed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineData.EndPoint">
      <summary>Gets or sets the ending point for the line.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.Equals(System.Object)">
      <summary>
            Determines if another <strong>LineData</strong> object has the same property
            settings.
            </summary>
      <param name="obj">An <strong>LineData</strong> object to compare.</param>
      <returns>True if the object provided has the same property values.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineData.ResizeToBounds(System.Drawing.RectangleF)">
      <summary> Resizes the annotation so its points are within the specified rectangle. </summary>
      <param name="bounds"> The rectangle bounds to resize the annotation into. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLineData.StartPoint">
      <summary>Gets or sets the starting point for the line.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfLineRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>PdfLineRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLineRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfLinkData"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Pdf.PdfLinkData" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[])">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Pdf.PdfLinkData" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Pdf.PdfLinkData" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Pdf.PdfLinkData" /> class</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLinkData.ClickAction"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.Clone"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfLinkData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfLinkData.Quadrilaterals"></member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation">
      <summary> This class represents a PDF markup annotation, such as underline, squiggly, strikeout and highlight.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotation</STRONG> with default values. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfMarkupData)">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotation</STRONG> from a <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> object.
            </summary>
      <param name="data"> The data class for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType)">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotation</STRONG> specifying an array of quadrilaterals and
            the markup type. </summary>
      <param name="quads"> An array of quadrilaterals for the annotation. </param>
      <param name="markup"> The markup type of this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotation</STRONG> specifying its parameters. </summary>
      <param name="quads"> An array of qualrilaterals for the annotation. </param>
      <param name="markup"> The markup type of the annotation. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline of the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="username"> The username of the person modifying the annotation. </param>
      <param name="modifiedDate"> The last modified date of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing the annotation data. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.GetConfinedGripPosition(System.Drawing.RectangleF,Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Boolean@)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.MarkupType"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.Quadrilaterals"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation.SquigglyHeight"></member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfMarkupData">
      <summary> This class contains the data used by <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType)">
      <summary> Creates a new instance of <STRONG>PdfMarkupData</STRONG> specifying an array of quadrilaterals and the
            markup type. </summary>
      <param name="quads"> An array of qualrilaterals for the annotation. </param>
      <param name="markup"> The markup type of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
      <summary> Creates a new instance of <STRONG>PdfMarkupData</STRONG> specifying the annotation parameters. </summary>
      <param name="quads"> An array of qualrilaterals for the annotation. </param>
      <param name="markup"> The markup type of the annotation. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline of the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="username"> The username of the person modifying the annotation. </param>
      <param name="modifiedDate"> The last modified date of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PdfMarkupData</STRONG> from serialized data. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing the annotation data. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.Clone"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupData.MarkupType">
      <summary> Gets or sets the markup type for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupData.Quadrilaterals">
      <summary> Gets the <STRONG>QuadrilateralFCollection</STRONG> holding quadrilaterals for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Pdf.PdfMarkupData.SquigglyHeight">
      <summary> Gets or sets the height of the squiggly line. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>PdfMarkupRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderButtons(Atalasoft.Utils.Geometry.QuadrilateralF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> This method is called to render the plus and minus buttons on the annotation. </summary>
      <param name="quad"> The quadrilateral in the annotation for which buttons will be drawn. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderHighlighter(Atalasoft.Annotate.Pdf.PdfMarkupData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render a highlight annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderSelectionRectangle(Atalasoft.Annotate.Pdf.PdfMarkupData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render a selection rectangle when the annotation is being created. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderSquiggly(Atalasoft.Annotate.Pdf.PdfMarkupData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render a squiggly annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderStrikeOut(Atalasoft.Annotate.Pdf.PdfMarkupData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render a strikeout annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Pdf.PdfMarkupRenderingEngine.RenderUnderline(Atalasoft.Annotate.Pdf.PdfMarkupData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render an underline annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> for this process. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Pdf.PdfMarkupType">
      <summary> Specifies the type of markup annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Pdf.PdfMarkupType.Highlight">
      <summary> A highlighter annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Pdf.PdfMarkupType.Squiggly">
      <summary> A squiggly underline annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Pdf.PdfMarkupType.StrikeOut">
      <summary> A strikeout annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Pdf.PdfMarkupType.Underline">
      <summary> An underline annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderers">
      <summary> This class holds all of the annotation renderers used for drawing the annotations. When a custom
            annotation is created, its <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer" /> should be added to this collection to allow the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> to render the object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderers" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Add(System.Type,Atalasoft.Annotate.Renderer.IAnnotationRenderer)">
      <summary> Adds or replaces a rendering engine for the specified type. </summary>
      <param name="type"> The type of the annotation data this renderer will handle. </param>
      <param name="renderer"> A class that will act as the renderer for this type. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Get(System.Type)">
      <summary> Gets the rendering engine for a specific type. </summary>
      <param name="type"> The annotation data type to look up. </param>
      <returns> The renderer for this annotation data or a <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine" /> if a renderer is not
            found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.GetAnnotationDataTypes">
      <summary> Returns a list of all <see cref="T:Atalasoft.Annotate.AnnotationData" /> types registered in the
            <STRONG>AnnotationRenderers</STRONG> table. </summary>
      <returns> An array of <STRONG>Type</STRONG> for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> renderers that are currently
            registered. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine">
      <summary> This class is the fallback rendering engine used when a specific rendering engine for an annotation can't
            be found. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.BurnTranslucentAnnotation(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationImage)">
      <summary> This method is used to burn translucent (highlighter) annotations onto an image. </summary>
      <param name="environment"> The RenderEnvironment containing the image to burn onto. </param>
      <param name="bounds"> The bounding rectangle where the annotation will be placed. </param>
      <param name="color"> The color of the highlighter. </param>
      <param name="mask"> A mask image used to apply the highlight effect. </param>
      <exception> Thrown if the Image or ImageObject property of the RenderEnvironment is null (Nothing in VB).
            </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CorrectRectangle(System.Drawing.RectangleF)">
      <summary> Corrects negative width and height values for the rectangle. </summary>
      <param name="rect"> The rectangle to correct. </param>
      <returns> A new RectangleF with corrected values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateBrush(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> into a System.Drawing.Brush object. </summary>
      <param name="annBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to convert. </param>
      <returns> A System.Drawing.Brush </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateFont(Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationFont" /> into a System.Drawing.Font object. </summary>
      <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> to convert. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> that will be used with this Font. </param>
      <returns> A System.Drawing.Font. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreatePen(Atalasoft.Annotate.AnnotationPen)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen" /> into a System.Drawing.Pen object. </summary>
      <param name="annPen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to convert. </param>
      <returns> A System.Drawing.Pen. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Returns a GDI HDC used for rendering the translucent effect. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used. </param>
      <param name="annotationBounds"> A bounding rectangle for the annotation. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing lines. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling objects. </param>
      <returns> An HDC that can be used for rendering the translucent area. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GripRenderer"></member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.ReleaseTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Release the HDC and drawing objects created with <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)" />. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render an annotation. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> This method renders the grips for annotations. </summary>
      <param name="grips"> The grips to render. </param>
      <param name="annotation"> The annotation associated with the grips. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.PointF)">
      <summary> This method is used to render the annotation grips.  The public <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" /> method calls into
            this protected method to perform the actual rendering. </summary>
      <param name="grips"> The grips to render. </param>
      <param name="annotation"> The annotation associated with the grips. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
      <param name="scale"> The scaling that must be applied to the grip positions.  Grip sizes should not scale, only
            their positions. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> with a fill. </summary>
      <param name="startingPoint"> The starting point of the line. </param>
      <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to render. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the line cap. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for this line cap. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used to render the line cap. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> without a fill. </summary>
      <param name="startingPoint"> The starting point of the line. </param>
      <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to render. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for this line cap. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used to render the line cap. </param>
    </member>
    <member name="F:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLock"></member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a small image at the specified point. </summary>
      <param name="image"> The image to render. </param>
      <param name="location"> The location where the image is placed. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a small image, centered in the annotation bounds, used to indicate that an annotation is locked.
            </summary>
      <param name="image"> The image to render. </param>
      <param name="annotationBounds"> The bounding rectangle of the annotation. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(Atalasoft.Annotate.PointBaseData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
      <summary> Renders a point based translucent annotation. </summary>
      <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData" />. </param>
      <param name="outline"> The outline pen used. </param>
      <param name="fill"> The fill used. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used when rendering. </param>
      <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
      <summary> Renders a translucent annotation from the specified points. </summary>
      <param name="points"> An array of points for the annotation. </param>
      <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData" />. </param>
      <param name="outline"> The outline pen used. </param>
      <param name="fill"> The fill used. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used when rendering. </param>
      <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
      <returns> Returns a point that can be used for the locked image. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RestoreGraphicsTransform(Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Restores the Graphics object to the state it was in before using <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" />. </summary>
      <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer" /> used. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Prepares the Graphics object to use the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> and <see cref="T:Atalasoft.Annotate.AnnotationData" />
            transforms. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> that will be drawn. </param>
      <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer" /> that will be used. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.CalloutRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.CalloutData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.EllipseRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EllipseData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.EllipseData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.FreehandRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.FreehandData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.FreehandData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer">
      <summary> This interface must be implemented by classes used to render annotation grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called when grips for an annotation need to be rendered. </summary>
      <param name="grips"> The grips that need to be rendered. </param>
      <param name="annotation"> The annotation the grips belong to. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used to render the grips. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer">
      <summary> This interface must be implemented by classes that will be used to render annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.IAnnotationRenderer.GripRenderer">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer" /> used to render grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.IAnnotationRenderer.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render an annotation. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used to render the annotation. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.LayerRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.LayerData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LayerRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.LineRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LineData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LineRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.LineData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.LinesRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LinesData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LinesRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.LinesData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.OcrRegionData" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.#ctor">
      <summary>Creates a new instance of <strong>OcrRegionRenderingEngine</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.PolygonRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.PolygonData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.#ctor">
      <summary>Creates a new instance of <strong>PolygonRenderingEngine</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.PolygonData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RectangleRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RectangleData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleRenderingEngine</STRONG>. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.lck"></member>
    <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.RectangleData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RenderEnvironment">
      <summary> This class is passed into the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer" /> methods to provide information for the
            rendering process. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor">
      <summary>Creates a new instance of RenderEnvironment.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix)">
      <summary> Creates a new instance of RenderEnvironment specifying parameters for burning annotations onto an image.
            </summary>
      <param name="image"> The image to burn onto. </param>
      <param name="resolution"> The resolution to render at. </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when burning. </param>
      <exception> Thrown if the image.BitCount is less than 24. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
      <summary> Creates a new instance of RenderEnvironment specifying information when rendering to a Graphics object
            retrieved from an image. </summary>
      <param name="device"> The device used when rendering. </param>
      <param name="graphics"> A Graphics object to render onto. </param>
      <param name="resolution"> The resolution to render at. </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when rendering. </param>
      <param name="imageResolution"> The resolution of the image. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of RenderEnvironment specifying its properties. </summary>
      <param name="device"> The device used when rendering. </param>
      <param name="graphics"> A Graphics object to render onto. </param>
      <param name="resolution"> The resolution to render at </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when rendering. </param>
      <param name="imageResolution"> The resolution of the image. </param>
      <param name="viewerResolution"> The resolution of the viewer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Device">
      <summary> Gets the type of device being rendered onto. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose">
      <summary> Releases resources used by the object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose(System.Boolean)">
      <summary> Release resources used by the object. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Finalize"></member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Graphics">
      <summary> The graphics object used to render the annotation onto. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Image">
      <summary> Gets the image when rendering to an image. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ImageResolution">
      <summary> Gets the resolution of the image.  This is only needed if a Graphics object is provided instead of an <see cref="T:Atalasoft.Annotate.AnnotationImage" />. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Resolution">
      <summary> The number of units per pixel. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Transform">
      <summary> Gets the transformation matrix used by the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> control. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Units">
      <summary> Gets the units of measure used by the annotation Locate and Size. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ViewerResolution">
      <summary> Gets the resolution of the viewer. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RubberStampData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.RubberStampData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.TextData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotationRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.TextData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotateViewerParameters">
      <summary> This class is returned by <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters" /> to provide information about the
            viewer the annotations are rendered on. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG> specifying the resolution, zoom and
            scroll offset. </summary>
      <param name="resolution"> The resolution of the viewer. </param>
      <param name="zoom"> The zoom level of the viewer. </param>
      <param name="scrollOffset"> The scroll position (offset from the top-left corner) of the document. </param>
      <exception> Thrown if the zoom is less than or equal to 0. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Resolution">
      <summary> Gets the resolution of the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.ScrollOffset">
      <summary> Gets the scroll position (offset from the top-left corner) of the document. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Zoom">
      <summary> Gets the zoom level of the viewer. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationController">
      <summary> The <STRONG>AnnotationController</STRONG> is the central hub for DotAnnotate. It contains a <see cref="T:Atalasoft.Annotate.UI.LayerCollection" /> for any number of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects, each containing any number of
            annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationController</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor(Atalasoft.Annotate.UI.IAnnotate)">
      <summary> Creates a new instance of <STRONG>AnnotationController</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" />
            parent control. </summary>
      <param name="parent"> An object that will be used as the parent control for the controller. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ActiveAnnotation">
      <summary> Gets or sets the currently selected annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.AnnotationConfinement">
      <summary> Gets or sets the annotation confinement used to keep annotations within a specific area of the control.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationCreated">
      <summary> Raised when an annotation is created by the user. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization">
      <summary> Raised when an object is deserialized to allow developers to cancel or modify the object before its added
            into the controller. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.PointF)">
      <summary> Returns the annotation at the specified point of a specified layer. </summary>
      <param name="layer"> The layer to search for annotations. </param>
      <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
      <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(System.Drawing.PointF)">
      <summary> Returns the annotation located at a specific point on the control. </summary>
      <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
      <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CanPaste">
      <summary> Returns a value indicating whether there is annotation data on the clipboard. </summary>
      <returns> True if there is annotation data on the clipboard. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.ChangePositionMethod)">
      <summary> Changes the position of the selected annotation within the stacking order. </summary>
      <param name="method"> The type of reordering to perform. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.ChangePositionMethod)">
      <summary> Changes the position of an annotation or layer within the stacking order. </summary>
      <param name="annotation"> The annotation or layer to change. </param>
      <param name="method"> The type of ordering to perform. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ClearSelection">
      <summary> Unselects all of the selected annotations. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Click">
      <summary> Raised when an annotation is clicked with the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ClipToDocument">
      <summary> Gets or sets a value indicating whether the annotation rendering is clipped to the document bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Clone">
      <summary> Creates a copy of the <STRONG>AnnotationController</STRONG> including all of the layers and annotations.
            </summary>
      <returns> A copy of the <STRONG>AnnotationController</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Copy">
      <summary> Copies the selected annotation(s) to the clipboard. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations">
      <summary> Returns the number of annotations in all of the layers. </summary>
      <returns> The number of annotations in the controller. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns the number of annotations in the provided layer. </summary>
      <param name="layer"> The layer to count. </param>
      <returns> The number of annotations in the layer. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary>
            Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for creating a new annotation with the mouse.
            </summary>
      <param name="annotation">The annotation to create.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.CreateAnnotationMode)">
      <summary> Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for creating a new annotation with the
            mouse, specifying the creation mode to use. </summary>
      <param name="annotation"> The annotation to create. </param>
      <param name="createMode"> The mode used to create the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.CreateMouseButton">
      <summary> Gets or sets the mouse button used for creating annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer">
      <summary> Gets or sets the current active layer. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.CurrentLayerChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" /> property has changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Cut">
      <summary> Cuts the selected annotation(s) and places them onto the clipboard. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.DefaultSecurity">
      <summary> Gets or sets the default security used for new annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose">
      <summary> Releases memory used by the <STRONG>AnnotationController</STRONG> and all of its annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose(System.Boolean)">
      <summary> Releases resources used by the <STRONG>AnnotationController</STRONG>. </summary>
      <param name="disposing"> A value indicating whether this method was called from the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.Dispose" /> method or a finalizer. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Disposed">
      <summary> Raised when the <STRONG>AnnotationController</STRONG> has been disposed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.DoubleClick">
      <summary> Raised when an annotation is double-clicked by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ExitCreateMode">
      <summary> This method will exit 'create mode' started with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)" />.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Factories">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" /> containing <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> objects
            used to create annotations from AnnotationData classes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing a specified annotation. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotation or null (Nothing in Visual Basic) if the
            annotation was not found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing a specified annotation. </summary>
      <param name="hostLayer"> The host layer to being searching from. </param>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotation or null (Nothing in Visual Basic) if the
            annotation is not found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.GetTopLevelLayer(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the top level <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> for the supplied annotation. This method will scan
            through the nested layers until it finds the top most layer. </summary>
      <param name="annotation">The annotation where the search will begin.</param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that is loaded in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" />
            collection or null (Nothing in VB) if no parent layer is found. </returns>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group">
      <summary> Combines all selected annotations into a new <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> object and adds this layer to
            the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Combines annotations into a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> and adds it to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" />. </summary>
      <param name="annotations"> An array of annotations to group. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.HotSpotClicked">
      <summary> Raised when a hot spot annotation is clicked. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode">
      <summary> Gets or sets a value specifying the user interactive mode of the <STRONG>AnnotationController</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.InvalidateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Forces an annotation to be redrawn. </summary>
      <param name="annotation"> The annotation to invalidate. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the annotation argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.IsDirty">
      <summary> Gets a value indicating whether the annotations have been modified since the last load or save. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Layers">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerCollection" /> used by the <STRONG>AnnotationController</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a byte array and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="annotationData"> A byte array containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a byte array and adds the annotations to the specified layer. </summary>
      <param name="annotationData"> A byte array containing the annotation data. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where annotations will be added. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data into the specified layer using the provided formatter. </summary>
      <param name="annotationData"> A byte array containing the annotation data to read. </param>
      <param name="layer"> The layer to store the annotations. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],System.Runtime.Serialization.IFormatter)">
      <summary>
            Loads annotation data from a byte array using the supplied formatter and adds
            them to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" />.
            </summary>
      <param name="annotationData">A byte array containing the annotation data.</param>
      <param name="formatter">An IFormatter used to deserialize the data.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a stream and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="stream"> A stream containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a stream and adds the annotations to the specified layer. </summary>
      <param name="stream"> The stream containing annotation data. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where annotations will be added. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a stream using the formatter and adds the annotations to the provided layer.
            </summary>
      <param name="stream"> A stream containing the annotation data. </param>
      <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where the annotations will be added. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a stream using the supplied formatter into the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="stream"> A stream containing annotation data. </param>
      <param name="formatter"> An IFormatter used to deserialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a file and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="fileName"> The file containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.IO.FileNotFoundException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary>
            Loads annotation data from a file and adds the annotations to the specified
            layer.
            </summary>
      <param name="fileName">The file containing the annotation data.</param>
      <param name="layer">The LayerAnnotation where annotations will be added.</param>
      <param name="format">The format of the annotation data.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a file using the formatter and adds the annotations to the provided layer.
            </summary>
      <param name="fileName"> A filename for the annotation data. </param>
      <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where these annotations will be loaded. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a file using the supplied formatter and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="fileName"> The filename for the annotation data. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moved">
      <summary> Raised when an annotation is moved. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moving">
      <summary> Raised while an annotation is being moved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.MultiSelectKey">
      <summary> Gets or sets the key held down to select multiple annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.NotifyController(System.Object,Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> This method is used by layer and annotation objects to notify the <STRONG>AnnotationController</STRONG> of
            events. </summary>
      <param name="sender"> The object sending this notification. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnAnnotationCreated(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a new annotation has been created by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the new annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnClick(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a Click event is received from the parent control. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation that was clicked. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnCurrentLayerChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" /> property has changed. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnDoubleClick(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a DoubleClick event has been received from the parent control. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnHotSpotClicked(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a hot spot annotation has been clicked. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the hot spot annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseDown event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseMove event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseUp event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMoving(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while an annotation is being moved by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary> Called when a Paint event is received from the parent control. </summary>
      <param name="e"> A PaintEventArgs containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnResizing(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while an annotation is being resized by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnRotating(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while the annotation is being rotated by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Called when a scroll event has been detected. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnSelectionChanged(System.EventArgs)">
      <summary> Called when an annotation selection has changed. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Parent">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent control where the annotations will be rendered. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Paste">
      <summary> Pastes annotation data from the clipboard into the current layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Refresh">
      <summary> This method will cause the control to redraw itself. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.AnnotationImage)">
      <summary>Renders the annotations to the supplied image.</summary>
      <param name="image">The image that will be rendered onto.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the image argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics)">
      <summary> Renders the annotations to a <STRONG>Graphics</STRONG> object </summary>
      <param name="device"> Indicates the device that created the <STRONG>Graphics</STRONG> object. </param>
      <param name="graphics"> The <STRONG>Graphics</STRONG> object used for rendering. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics object is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary>
            Renders the annotations in a specified layer to a <strong>Graphics</strong>
            object.
            </summary>
      <param name="device">Indicates the device that created the <strong>Graphics</strong> object.</param>
      <param name="graphics">The <strong>Graphics</strong> object used for rendering.</param>
      <param name="layer">The layer to render.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics or layer arguments are null (Nothing in VB).</exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resized">
      <summary> Raised when an annotation is resized. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resizing">
      <summary> Raised while an annotation is being resized. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ResumePaint(System.Boolean)">
      <summary> Resumes painting after it has been suspended with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint" />.
            </summary>
      <param name="forceRefresh"> Indicates whether the <STRONG>AnnotationController</STRONG> should force a refresh.
            </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotated">
      <summary> Raised when an annotation is rotated by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Rotates all layers in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="rotation"> The rotation amount. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Rotates the specified layer. </summary>
      <param name="rotation"> The amount of rotation. </param>
      <param name="layer"> The layer to rotate. </param>
      <exception> Thrown if the layer is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)">
      <summary> Rotates the annotations in 90 degree increments. </summary>
      <param name="rotation"> The amount of rotation. </param>
      <param name="layerIndex"> The index of the layer to rotate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the layer index is invalid for the Layers collection. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotating">
      <summary> Raised while an annotation is being rotated by the user. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval">
      <summary>
        <para>Gets or sets the interval used for snapping interactive rotation to degrees.</para>
        <para>This is used to help users when rotating an annotation, making it easier to stop at whole degrees. The snap
            area is determined by the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold" /> property.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold">
      <summary>
            Gets or sets the amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval" />
            that will be used to snap to the rotation interval.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Returns a byte array containing the annotation data from a specified <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" />.  This
            is useful when saving annotation data to be embedded into image metadata. </summary>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotations to save. </param>
      <param name="formatter"> The formatter used to convert the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Writes annotation data to the specified stream. </summary>
      <param name="stream"> The stream where data will be stored. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Writes annotation data from a layer into the specified stream. </summary>
      <param name="stream"> The stream where annotation data will be stored. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that will be saved. </param>
      <param name="format"> The format used when saving the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the specified layer to a stream using the formatter supplied. </summary>
      <param name="stream"> The stream where data will be stored. </param>
      <param name="layer"> The layer to save. </param>
      <param name="formatter"> The formatter used to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a stream using the specified formatter. </summary>
      <param name="stream"> A stream where the data will be stored. </param>
      <param name="formatter"> The formatter used for serializing the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a byte array using the specified formatter. </summary>
      <param name="formatter"> The formatter used to serialize the annotation data. </param>
      <returns> A byte array containing the serialized data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Saves the annotations to a file using a predefined formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Saves a layer to a file using a predefined format. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="layer"> The layer to save. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Saves a layer to a file using the specified formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="layer"> The layer to save. </param>
      <param name="formatter"> The formatter used to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a file using the specified formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="formatter"> The formatter use to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectAll(System.Boolean)">
      <summary> Selects all of the annotations on the current layer or all layers. </summary>
      <param name="allLayers"> Indicates whether to select annotations on all of the layers. If this is
            <STRONG>false</STRONG>, only the current layer annotations are selected. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.SelectedAnnotations">
      <summary> Gets an array of annotations currently selected. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.RectangleF,System.Boolean)">
      <summary> Selects annotations from a layer that are without a bounding region. </summary>
      <param name="layer"> The layer to search for annotations. </param>
      <param name="bounds"> The bounding rectangle to search. This value must be specified in document space. </param>
      <param name="fullyContained"> Indicates if the annotation has to be fully within the bounds before it's selected.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(System.Drawing.RectangleF,System.Boolean)">
      <summary>Selects annotations that are partially or fully within a rectangular area.</summary>
      <param name="bounds">
            The bounding rectangle to look for annotations. This value must be specified in
            document space.
            </param>
      <param name="fullyContained">
            Indicates if the annotation has to be fully within the bounds before it's
            selected.
            </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.SelectionChanged">
      <summary> Raise when there has been a change in the annotation selection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Site">
      <summary>
        <para>Gets or sets the site of the control.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.SmoothingMode">
      <summary> Gets or sets the smoothing mode used when drawing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint">
      <summary>
            Use this method to suspend painting any annotations until the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~ResumePaint.html">ResumePaint</a>
            method is called.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ToolTip">
      <summary> Gets or sets the tooltip control used for annotation tooltips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.UndoManager">
      <summary>Gets the AnnotationUndoManager used by the controller.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup">
      <summary> Ungroups the currently selected annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Removes annotations from one layer and adds them to another. </summary>
      <param name="groupLayer"> The layer containing annotations to ungroup. </param>
      <param name="hostLayer"> The layer where annotation will be added. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.WaitingToCreate">
      <summary> Gets a value indicating whether the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> is waiting for the user to create
            an annotation with the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationCursors">
      <summary>
        <STRONG>AnnotationCursors</STRONG> is a used to hold all of the <STRONG>Cursor</STRONG> objects for the
            annotations.  This simplifies changing the appearance of the cursors. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.DefaultCursor">
      <summary> Gets or sets the default cursor used when the pointer is not over an annotation or grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.EastWestCursor">
      <summary> Gets or sets the cursor used when over the left or right center grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.HotSpotCursor">
      <summary> Gets or sets the cursor used for hot spots.  This is only shown when <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.MoveCursor">
      <summary> Gets or sets the cursor used to indicate a move operation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NortheastSouthwestCursor">
      <summary> Gets or sets the cursor used for the top-right and bottom-left grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthSouthCursor">
      <summary> Gets or sets the cursor used for the top and bottom center grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthwestSoutheastCursor">
      <summary> Gets or sets the cursor used for the top-left and bottom-right grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.RotateCursor">
      <summary> Gets or sets the cursor used for the rotation grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationGrip">
      <summary> This class represents a single grip.  To access these grip objects use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Grips" /> property of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState)">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position and state.
            </summary>
      <param name="position"> The position of the grip in annotation space. </param>
      <param name="state"> The initial state of the grip. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState,Atalasoft.Annotate.AnnotationGripAction)">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position, state and its
            action. </summary>
      <param name="position"> The position of the grip in annotation space. </param>
      <param name="state"> The initial state of the grip. </param>
      <param name="action"> Defines the action to take when this grip is dragged with the mouse. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Action">
      <summary> Gets or sets the action to take when the grip is dragged with the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Position">
      <summary> Gets or sets the position of the grip in annotation space. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.State">
      <summary> Gets or sets the state of the grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Visible">
      <summary> Gets or sets the visibility of the grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs">
      <summary> This class is used to with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>AnnotationGripChangedEventArgs</STRONG>. </summary>
      <param name="grip"> The grip being modified. </param>
      <param name="newPosition"> The new position of the grip in annotation space. </param>
      <param name="confinement"> The viewer confinement rectangle. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Confinement">
      <summary> Gets the viewer confinement rectangle. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Grip">
      <summary> Gets the grip being modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.NewPosition">
      <summary> Gets the new location for the grip in annotation space. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKey">
      <summary> This class is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder" /> to define the action or handler to call when
            a specific key is pressed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction)">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying its action. </summary>
      <param name="action"> The action to take when the key is pressed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction,Atalasoft.Annotate.UI.AnnotationKeyEventHandler)">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying the action and event handler of the
            key event. </summary>
      <param name="action"> The action to take when the key is pressed. </param>
      <param name="handler"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler" /> called to perform this action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Action">
      <summary> Gets or sets the action for this key. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Handler">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler" /> that will be called to perform the action.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyAction">
      <summary> This enumeration is used to define the actions used with <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.None">
      <summary> No action is taken. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectNext">
      <summary> The next annotation in the collection is selected.  If the current annotation is the last in the
            collection, the first annotation will be selected. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectPrevious">
      <summary> The previous annotation in the collection is selected.  If the current annotation is at index zero, the
            last annotation in the collection will be selected. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectLeft">
      <summary> Selects the annotation who has the next lowest X location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectRight">
      <summary> Selects the annotation who has the next highest X location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectAbove">
      <summary> Selects the annotation who has the next lowest Y location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectBelow">
      <summary> Selects the annotation who has the next highest Y location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveLeft">
      <summary> Moves the selected annotations to the left. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveRight">
      <summary> Moves the selected annotations to the right. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveUp">
      <summary>
        <para>Moves the selected annotations up.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveDown">
      <summary> Moves the selected annotations down. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateCounterclockwise">
      <summary> Rotates the active annotation counterclockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateClockwise">
      <summary> Rotates the active annotation clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseWidth">
      <summary> Increases the width of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseWidth">
      <summary> Decreases the width of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseHeight">
      <summary> Increases the height of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseHeight">
      <summary> Decreases the height of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.ClearSelection">
      <summary> Unselects all annotations. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyBinder">
      <summary> The <STRONG>AnnotationKeyBinder</STRONG> class is used to bind key press events to annotation actions.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationKeyBinder</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.Contains(System.Windows.Forms.Keys)">
      <summary> Returns a value indicating if the <STRONG>AnnotationKeyBinder</STRONG> contains a specific key. </summary>
      <param name="key"> The key to search for. </param>
      <returns>
        <STRONG>True</STRONG> if the <STRONG>AnnotationKeyBinder</STRONG> contains the specified key. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyBinder.Item(System.Windows.Forms.Keys)"></member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs">
      <summary> This class is sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey" /> handler during a key press event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.UI.AnnotationKeyAction,System.Boolean,System.Windows.Forms.KeyEventArgs)">
      <summary> Creates a new instance of <STRONG>AnnotationKeyEventArgs</STRONG> specifying its parameters. </summary>
      <param name="annotation"> The annotation being affected by this event. </param>
      <param name="action"> The action to take. </param>
      <param name="repeat"> Indicates whether this is a repeat event caused from a key being held down. </param>
      <param name="e"> The <STRONG>KeyEventArgs</STRONG> from the key press event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Action">
      <summary> Gets the action to be taken by this event. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Annotation">
      <summary> Gets the annotation being modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.KeyEventArgs">
      <summary> Gets the <STRONG>KeyEventArgs</STRONG> from the key press event. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Repeat">
      <summary> Gets a value indicating if this is a repeat event caused by the user holding down a key. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler">
      <summary> This event handler is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey" /> class to process key actions. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs">
      <summary> This class is passed to mouse event handlers. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Single,System.Single,System.Int32)">
      <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> specifying its parameters. </summary>
      <param name="button"> The mouse button being pressed. </param>
      <param name="clicks"> The click count. </param>
      <param name="x"> The x position of the mouse. </param>
      <param name="y"> The y position of the mouse. </param>
      <param name="delta"> The delta of the mouse wheel. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
      <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> from a <STRONG>MouseEventArgs</STRONG>
            object. </summary>
      <param name="e"> A <STRONG>MouseEventArgs</STRONG> containing information for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Button">
      <summary> Gets which mouse button was pressed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Clicks">
      <summary> Gets the number of times the mouse button was pressed and released. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Delta">
      <summary> Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the
            mouse wheel. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Processed">
      <summary> Gets or sets a value indicating whether the event has been handled. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.X">
      <summary> Gets the x-coordinate of the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Y">
      <summary> Gets the y-coordinate of the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventHandler">
      <summary> This event handler is used with several mouse events. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUI">
      <summary> This abstract class represents the base annotation object. All annotations must derive from
            <STRONG>AnnotationUI</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(Atalasoft.Annotate.AnnotationData)">
      <summary>
            A constructor for the AnnotationUI object specifying the releated
            AnnotationData.
            </summary>
      <param name="data">
            The AnnotationData for this annotation. This parameter cannot be null (Nothing in
            Visual Basic).
            </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the data parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A constructor for AnnotationUI specifying the serialization information for this
            annotation.
            </summary>
      <param name="info">The SerializationInfo object containing information about this annotation.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.AddGripsToRegion(Atalasoft.Annotate.AnnotationRegion)">
      <summary>
            Adds the annotation grips to a region. The grips are added in annotation space.
            </summary>
      <param name="region"> The <see cref="T:Atalasoft.Annotate.AnnotationRegion" /> to which grips will be added. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.AnnotationControllerNotification">
      <summary>Raised after a property value has been changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.ApplyRegionTransform(Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.AnnotateSpace)">
      <summary>
            Use this method to convert a region from annotation space to document or view
            space.
            </summary>
      <param name="region"> The region to convert. This must be a region in annotation space. </param>
      <param name="space"> The space to convert the region into. If this argument is
            <STRONG>AnnotateSpace.Annotation</STRONG>, no transform is applied. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.BeginCreate">
      <summary> This method is called by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> when the user is beginning to create this
            annotation using the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Bounds">
      <summary> Gets the bounding rectangle for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMirror"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMove"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanResize"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanRotate"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanSelect"></member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Click">
      <summary>Raised when the annotation has been clicked with the mouse.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Clone">
      <summary> Creates a copy of this annotation. </summary>
      <returns> A copy of this <STRONG>AnnotationUI</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenu">
      <summary> Gets or sets a <STRONG>ContextMenu</STRONG> object that will be displayed when the user right-clicks on
            the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenuStrip">
      <summary> Gets or sets a <STRONG>ContextMenuStrip</STRONG> object that will be displayed when the user right-clicks
            on the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Controller">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for this annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.CreateRenderTransform">
      <summary> Returns the <STRONG>Matrix</STRONG> used by the renderer to transform the annotation. </summary>
      <returns> The transform <STRONG>Matrix</STRONG> used when rendering. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CreationTime"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Data">
      <summary>Gets the AnnotationData object associated with this annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick">
      <summary>Raised when the annotation has been double-clicked with the mouse.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedGripPosition(System.Drawing.RectangleF,Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Boolean@)"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary> Returns the new confined location of the annotation when a confinement bounds and new location offset are
            provided. </summary>
      <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
      <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary>
        <para>Returns the new confined location of the annotation when the annotation bounds, a confinement bounds
            and new location offset are provided.</para>
        <para>This overload is useful when only a portion of the annotation bounds should be taken into account for this
            calculation.</para>
      </summary>
      <param name="dsAnnotationBounds"> The bounding rectangle of the annotation in document space. </param>
      <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
      <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedRotation(System.Drawing.RectangleF,System.Single)"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetOnePixel">
      <summary> Returns the equivalent of 1 pixel in resolution units. </summary>
      <returns> The equivalent of 1 pixel in resolution units. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
      <param name="space">The space coordinate system used to generate this region.</param>
      <returns>The region of this annotation in the specified space.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters">
      <summary> This method is used to get information about the viewer where the annotations are rendered, including
            resolution, zoom (scale) level and scrollbar position. </summary>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.AnnotateViewerParameters" /> object containing the viewer information. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged">
      <summary> Raised when a grip for the annotation has been moved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Grips">
      <summary> Gets the grips used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.HitTestRectangle">
      <summary> Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Location">
      <summary> Gets or sets the location of the annotation in document space. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Mirrors (flips) the annotation horizontally or vertically. </summary>
      <param name="direction"> The direction to flip the annotation. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ModifiedTime"></member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown">
      <summary>Raised when a mouse button is pressed while on top of the annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter">
      <summary>Raised when the mouse enters the annotation region.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit">
      <summary>Raised when the mouse exists the annotation region.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove">
      <summary>Raised when the mouse is moved over the annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp">
      <summary>Raised when the mouse button is released from an annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moved">
      <summary>Raised when the annotation has been moved.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moving">
      <summary>Raised while the annotation is being moved.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Name"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property of the annotation or related <see cref="T:Atalasoft.Annotate.AnnotationData" /> has been modified.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information on this changed.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnClick(System.EventArgs)">
      <summary> Called when the user has clicked on the annotation. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnControllerChanged(System.EventArgs)">
      <summary> Called when the Controller property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)">
      <summary> Called when the annotation is double-clicked. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
      <summary> Called when a grip of the annotation has been moved by the user using the mouse. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Called when the grips of an annotation have been dragged past the opposite grip. </summary>
      <param name="direction"> The direction in which the annotation should be mirrored. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user clicks down on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseEnter(System.EventArgs)">
      <summary> Called when the mouse is moved into the annotation region. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseExit(System.EventArgs)">
      <summary> Called when the mouse is moved out of the annotation region. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user has moved the mouse over the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user has released the mouse over the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoved(System.EventArgs)">
      <summary> Called when a move to a new location has completed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Called while an annotation is being moved by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData" /> is about to be changed.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResized(System.EventArgs)">
      <summary> Called when a resize on the annotation has completed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)">
      <summary> Called while the annotation is being resized by the user. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotate(System.EventArgs)">
      <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)" /> method is called on the annotation. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotated(System.EventArgs)">
      <summary> Called when the annotation has been rotated by the user. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)" /> method is used. </summary>
      <param name="rotation"> The amount of rotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotating(System.EventArgs)">
      <summary> Called while an annotation is being rotated by the user. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Called when the <STRONG>IAnnotate</STRONG>. <see cref="P:Atalasoft.Annotate.UI.IAnnotate.Transform" /> indicates a change in its
            offset (scroll position). </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information for this change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSelectedChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected" /> property of the annotation has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size" /> property of the annotation has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ParentLayer">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that contains this annotation. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanging">
      <summary> Raised when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData" /> is going to be changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseClickEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Click" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseDoubleClickEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseGripPositionChangedEvent(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event on the annotation.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseDownEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown" /> event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseEnterEvent">
      <summary> Use to force the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter" /> event for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseExitEvent">
      <summary> Use to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseMoveEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseUpEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information for this event. </param>
      <returns> True if the annotation is finished being created.  Point base annotations will return false while being
            created until the final point. </returns>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovedEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moved" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovingEvent(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moving" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.  This
            may be null (Nothing in VB). </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseOnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)" /> method to be called. </summary>
      <param name="rotation"> The amount of rotation applied. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseResizedEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Resized" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseRotatedEvent">
      <summary> This method invokes the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseScrollPositionChangedEvent(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" /> method to be called.
            </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Remove">
      <summary> Forces the annotation to remove itself from its parent layer. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resized">
      <summary>Raised when the annotation has been resized.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resizing">
      <summary>Raised while the annotation is being resized.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)">
      <summary> Rotates the annotation by the specified number of degrees. </summary>
      <param name="degrees"> The number of degrees to rotate the annotation. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated">
      <summary>
            Raised after the annotation has been rotated by the user.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotating">
      <summary> Raise while an annotation is being rotated. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Rotation"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Security"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Selected">
      <summary> Gets or sets a value indicating whether this annotation the selected. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.SelectedChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected" /> property changes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.SetGrips(Atalasoft.Annotate.UI.IAnnotationGrips)">
      <summary> Sets the grips used by the annotation. </summary>
      <param name="grips"> The grips to use. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Size">
      <summary> Gets or sets the size of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.State">
      <summary> Gets or sets the current state of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ToolTip"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Transform"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.TransformRectangle(System.Drawing.RectangleF)">
      <summary> Applies the render transformation matrix to a rectangle. </summary>
      <param name="rectangle"> The rectangle to transform. </param>
      <returns> The transformed rectangle. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.UserName"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Visible">
      <summary> Gets or sets a value indicating whether the annotation is visible. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUICollection">
      <summary> This class holds a collection of annotation objects. <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" />s use this collection to
            hold the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects they contain. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects. </summary>
      <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects to initialize the collection with.
            </param>
      <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Boolean)">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> used for storage. </summary>
      <param name="storage"> Indicates whether this collection is only used for storage. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this collection. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Add(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Adds a single annotation to the collection. </summary>
      <param name="annotation"> The annotation to add. </param>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Adds an array of annotations to the collection. </summary>
      <param name="annotations"> An array of annotations to add. </param>
      <exception> Thrown if the annotations parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUICollection)">
      <summary> Adds annotations from another <STRONG>AnnotationUICollection</STRONG> to this collection. </summary>
      <param name="annotations"> An <STRONG>AnnotationUICollection</STRONG> containing items to add into this collection.
            </param>
      <exception> Thrown if the annotations parameter is null. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.AnnotationControllerNotification">
      <summary> Raised when there has been a change to an item in this collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Clone">
      <summary>Creates a copy of this collection and all items it contains.</summary>
      <returns>A copy of this AnnotationUICollection.</returns>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.CollectionChanged">
      <summary> Raised when there has been a change in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Contains(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Determines if an annotation is contained within the collection. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> True if the annotation is within the collection. </returns>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Copies all of the items from this collection into an array. </summary>
      <param name="array"> The array where items will be copied. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[],System.Int32)">
      <summary> Copies items into the specifed array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> An index in the target array where copying will being. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(System.Int32,Atalasoft.Annotate.UI.AnnotationUI[],System.Int32,System.Int32)">
      <summary> Copies annotations from this collection into an array. </summary>
      <param name="index"> The index of this collection where copying will begin. </param>
      <param name="array"> The array to copy items into. </param>
      <param name="arrayIndex"> The index in the array where copying will begin. </param>
      <param name="count"> The number of items to copy. </param>
      <exception> Thrown if the index or arrayIndex arguments are invalid. </exception>
      <exception> Thrown if array is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose">
      <summary> Disposes this collection and all items it contains. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose(System.Boolean)">
      <summary> Releases resources used by this object. </summary>
      <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this collection. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.IndexOf(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the index of a specified annotation. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The collection index of the annotation or -1 if the annotation was not found. </returns>
      <exception> Thrown if the annotation is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationUI)">
      <summary>
            Inserts an annotation into the collection at the specified position.
            </summary>
      <param name="index"> The index in the collection where the annotation will be inserted. </param>
      <param name="annotation"> The annotation to insert. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the annotation parameter is null.</exception>
      <exception cref="!:" caption="ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
      <exception cref="!:" caption="ArgumentException">Thrown if the annotation already exists in the collection.
            To move an annotation to a different location, use the ChangePosition method.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUICollection.Item(System.Int32)">
      <summary>Gets the AnnotationUI at the specified index.</summary>
      <param name="index">The index in the collection of the annotation to retrieve.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClear">
      <summary> Called when the <STRONG>Clear</STRONG> method is used. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClearComplete">
      <summary> Called when the clear operation has finished. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is a change to the collection. </summary>
      <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an insert operation has finished. </summary>
      <param name="index"> The index of the item inserted. </param>
      <param name="value"> The item that was inserted.  This could be an array of objects. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemove(System.Int32,System.Object)">
      <summary> Called when an annotation is removed from the collection. </summary>
      <param name="index"> The index of the annotation being removed. </param>
      <param name="value"> The annotation being removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove operation has finished. </summary>
      <param name="index"> The index of the item removed. </param>
      <param name="value"> The item that was removed.  This may be an array of objects. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when an item has been swapped with another. </summary>
      <param name="index"> The index of the item. </param>
      <param name="oldValue"> The old item. </param>
      <param name="newValue"> The new item. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.PropertyChanging">
      <summary> Raise before a change is applied to an item in this collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Removes an annotation from the collection. </summary>
      <param name="annotation"> The annotation to remove. </param>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Removes multiple annotations from the collection. </summary>
      <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects to remove. </param>
      <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection">
      <summary> This class is a collection of <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> objects which are used to create new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects from <see cref="T:Atalasoft.Annotate.AnnotationData" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUIFactoryCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Add(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> to the collection. </summary>
      <param name="factory"> The factory to add. </param>
      <exception> Thrown if the factory parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.GetAnnotationFromData(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> provided. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object from which the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> must be
            created. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> or a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> if no <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> can be found for the data. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Insert(System.Int32,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Inserts an item into the collection. </summary>
      <param name="index"> The index where the item will be inserted. </param>
      <param name="factory"> The factory to insert. </param>
      <exception> Thrown if the factory is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Item(System.Int32)">
      <summary>Get the IAnnotationUIFactory at the specified index.</summary>
      <param name="index">The index of the item to return.</param>
      <exception cref="!:" caption="ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Remove(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Removes a factory from the collection. </summary>
      <param name="factory"> The factory to remove. </param>
      <exception> Thrown if the factory parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Replace(Atalasoft.Annotate.UI.IAnnotationUIFactory,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Replaces a factory in the collection. </summary>
      <param name="oldFactory"> The factory currently in the collection. </param>
      <param name="newFactory"> The new factory that will replace the old one. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the oldFactory or newFactory parameter is null.</exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUndo">
      <summary> This class is used to store an undo or redo change for an object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being modified and the
            type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="value"> The current value of the object. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,System.Int32,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="value"> The current value of the object. </param>
      <param name="index"> The index of the item or -1 if no index is required. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, name of the
            property being changed, the current value of the property and a description of the undo. </summary>
      <param name="item"> The object being changed. </param>
      <param name="propertyName"> The name of the property being changed. </param>
      <param name="value"> The current value of the property. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object[],System.String,System.Object[],System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> for methods. </summary>
      <param name="item"> The object where the undo and redo methods exist. </param>
      <param name="undoMethodName"> The name of the method called when an undo is performed. </param>
      <param name="undoMethodParameters"> An object array containing the parameters sent to the undo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
      <param name="redoMethodName"> The name of the method called when a redo is performed. </param>
      <param name="redoMethodParameters"> An object array containing the parameters sent to the redo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
      <param name="description"> A string description of this undo action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Change">
      <summary> Gets the type of undo change being performed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Description">
      <summary> Gets the description of the undo. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Index">
      <summary> Gets the index of the item. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Item">
      <summary> Gets the object that was changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.PropertyName">
      <summary> Gets the name of the property that was changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodName">
      <summary> Gets the name of the method called when performing a redo. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodParameters">
      <summary> Gets an object array containing the parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" />
            method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodName">
      <summary> Gets the name of the method that will be called when an undo is performed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodParameters">
      <summary> Gets an object array of parameters sent to the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Value">
      <summary> Gets the value of the object or property. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUndoManager">
      <summary> The <STRONG>AnnotationUndoManager</STRONG> keeps track of annotation changes and allows undo and redo
            functionality. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUndoManager</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Adds an undo to the collection. </summary>
      <param name="undo"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the undo argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge">
      <summary> This method puts the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" /> into a collective undo state. All calls to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)" /> will be collected until the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)" />
            method has been called. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Clear">
      <summary> Clears the undo and redo collections. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)">
      <summary> Exits the collective undo state and stores all actions added since the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge" /> call as a single undo operation. </summary>
      <param name="description">A short description of the collective undo action.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetRedoDescriptions">
      <summary> Returns a string array of the descriptions in the order which they would be redone. This is useful for
            displaying a list of items to redo. For displaying only the latest redo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription" /> method. </summary>
      <returns> A string array containing the redo descriptions. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetUndoDescriptions">
      <summary> Returns a string array of the descriptions in the order which they would be undone. This is useful for
            displaying a list of items to undo. For displaying only the latest undo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription" /> method. </summary>
      <returns> An array of string descriptions for the undos. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Levels">
      <summary> Gets or sets the number of undo/redo levels to keep in memory. </summary>
      <exception> Thrown if the value is set to less than zero. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Merging">
      <summary>
            Gets a value indicating whether the manager is merging undos added into a single
            undo action.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo">
      <summary> Performs a redo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> that was processed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoCount">
      <summary> Gets the number of redos available. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription">
      <summary> Gets the description string of the redo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" /> is called. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest">
      <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" /> has been requested. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo">
      <summary> Performs an undo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> that was processed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoCount">
      <summary> Gets the number of undos available. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription">
      <summary> Gets the description string of the undo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> is called. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoListChanged">
      <summary> Raised when the items in the undo stack have changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest">
      <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> has been requested. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.CalloutAnnotation">
      <summary>
        <para>This annotation is designed to provide additional information on a specific area of the document. 
            It contains an editable text area and a leader line used to point to the area of the document.</para>
        <para>When creating this annotation, the first click sets the target for the leader and a second click sets the
            annotation location.  It can also be created by pressing down the mouse button to set the leader and dragging.  Both
            annotation and leader point can be repositioned independently after the annotation has been created.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(Atalasoft.Annotate.CalloutData)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.CalloutData" />
            object used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.CalloutData" /> used with this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the serialized information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text for the annotation.
            </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font and font brush for
            the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font, font brush,
            outline and line pen. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
      <exception> Thrown if the leaderFlatLength is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
      <param name="targetPosition"> The document position the line will point to. </param>
      <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
      <exception> Thrown if the leaderFlatLength is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AllowEditing"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.BeginCreate"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the annotation. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose" /> method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.EditMode">
      <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Fill">
      <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Finalize"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Font">
      <summary> Gets or sets the font used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.FontBrush">
      <summary> Gets or sets the brush used to render the text. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.HideEditDialog">
      <summary> Removes the edit control from the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Leader">
      <summary> Gets or sets the pen used for the line of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.LeaderFlatLength">
      <summary> Gets or sets the length of the leader line to the bend. </summary>
      <exception> Thrown if the value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnDoubleClick(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotating(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnSelectedChanged(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Outline">
      <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.ShowEditDialog">
      <summary> Adds an edit control to the viewer to allow the user to change the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.TargetPosition">
      <summary> Gets or sets the position on the document the line will point to. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Text">
      <summary> Gets or sets the text of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.CalloutAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.CalloutData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.CalloutData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.CalloutData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EllipseAnnotation">
      <summary> This class uses an <see cref="T:Atalasoft.Annotate.EllipseData" /> object to generate an ellipse annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying its fill and outline. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the fill, outline, shadow brush
            and shadow offset. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to draw the shadow of the annotation. </param>
      <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.EllipseData)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the ellipse data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EllipseData" /> object used by this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and fill.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle, fill,
            outline and shadow options. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
      <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
      <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the rectangle, fill and
            translucent properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and
            outline. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A SerializationInfo object containing information for this annotation. </param>
      <param name="context"> A StreamingContext for this data. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EllipseAnnotationFactory">
      <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> object from an <see cref="T:Atalasoft.Annotate.EllipseData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.EllipseData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object for the annotation. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> or null (Nothing in Visual Basic) if the <EM>data</EM> parameter is not
            an <see cref="T:Atalasoft.Annotate.EllipseData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation">
      <summary>
            This is an image annotation that will embed the image into the serialized XMP or
            WANG data.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, shadow and shadow
            offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.EmbeddedImageData)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether to allow mouse clicks to pass through transparent areas of the
            image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose(System.Boolean)">
      <summary> Called when disposing or finalizing to release resources used by the annotation. </summary>
      <param name="disposing"> A value indicating whether the annotation is being disposed or finalized. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with annotation information. </summary>
      <param name="info"> A SerializationInfo object where the data will be added. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Image">
      <summary>
            Gets or sets the image of the annotation.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.KeepAspectRatio">
      <summary>
            Gets or sets a value indicating whether the image ratio is maintained while resizing.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Shadow">
      <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory">
      <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> object from an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" />
            class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object for the annotation. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.FreehandAnnotation">
      <summary> This class is used for a freehand drawing annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the fill, outline and translucent
            properties. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationPen" />
            used for drawing the lines or curves. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for the lines or curves. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline, fill and initial
            points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException" caption="">Thrown if the points parameter is null or if both outline and fill parameters are null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline and initial
            points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial points for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.FreehandData)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.FreehandData" />
            object for this annotation. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.FreehandData" /> object used for this annotation. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the data parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the point collection, fill,
            outline and translucent properties. </summary>
      <param name="points"> The initial point collection for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the points, fill, outline and
            translucent properties. </summary>
      <param name="points"> The initial points for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if points is null or if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.ClosedShape">
      <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Fill">
      <summary> Gets or sets the fill for the freehand. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.LineType"></member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Outline">
      <summary> Gets or sets the outline for this freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for the freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.FreehandAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.FreehandData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.FreehandData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.FreehandData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.FreehandData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.GripPositionChangedEventHandler">
      <summary> This event handler is used with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotation">
      <summary>
        <para>This annotations can be used to add rectangular hot spots on a document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
        <para>For a non-rectangular area use the <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(Atalasoft.Annotate.HotSpotData)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the annotation data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData" /> for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds fill.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, fill and
            outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
      <param name="activeFill"> The fill used when the annotation is active. </param>
      <param name="activeOutline"> The outline used when the annotation is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information of this object. </param>
      <param name="context"> A context containing information about this object. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Active"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveFill"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveOutline"></member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Fill"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.HitTestRectangle"></member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Outline"></member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.AnnotationData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation">
      <summary>
        <para>This annotation can be used to create a freehand hot spot area on the document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
        <para>For a rectangular hot spot use the <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill and active fill.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
      <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used when the <see cref="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active" /> property is true. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="activeFill"> The fill used when the hotspot is active. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.HotSpotFreehandData)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the annotation data.
            </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the initial points.
            </summary>
      <param name="points"> The initial points for the freehand.  These must be specified in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> from serialized information.
            </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active">
      <summary> Gets or sets whether this hot spot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.ActiveFill">
      <summary>
            Gets or sets the fill used when the HotSpot is active.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Fill">
      <summary>
            Gets or sets the fill used when the HotSpot is not active.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.LineType">
      <summary>Gets or sets the LineType used for the lines or curves of this annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Points">
      <summary>
            Gets the PointFCollection used for this freehand.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotate">
      <summary>
            This interface must be implemented by any control hosting annotations. The
               <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>
               requires the properties of this interface for rendering and user interaction.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Control">
      <summary>Gets the control used to render the annotations onto.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.DocumentBounds">
      <summary>Gets the bounding rectangle of the document area.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.KeyBinder">
      <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationKeyBinder.html">AnnotationKeyBinder</a>
            used for binding annotation actions to key press events.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Resolution">
      <summary>Gets the resolution of the document.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Transform">
      <summary>Gets a transformation matrix used by the host control.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Units">
      <summary>Gets the units of measure for the document.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotationGrips">
      <summary> This interface must be implemented by any class acting as annotation grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Count">
      <summary> Gets the number of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects in the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Fill">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetEnumerator">
      <summary> An <STRONG>IEnumerator</STRONG> used to allow enumeration through the collection. </summary>
      <returns> The IEnumerator for this class. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetRegion">
      <summary> Returns a Region for the grips. </summary>
      <returns> A render for the grips. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GripFromPoint(System.Drawing.PointF)">
      <summary> Returns a grip from the specified position. </summary>
      <param name="point"> The point to search for. This position must be in annotation space. </param>
      <returns> The grip at the location provided or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there was
            no grip found. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Item(System.Int32)">
      <summary>
            Returns an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object from the collection at the specified index.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Outline">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationFill">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill a rotation grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationOutline">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of a rotation grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Size">
      <summary> Gets the size of the grips in pixels. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotationUIFactory">
      <summary> This interface must be implemented by any class used as an annotation UI factory. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationUIFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for a specific <see cref="T:Atalasoft.Annotate.AnnotationData" /> class.
            </summary>
      <param name="data"> The annotation data from which a UI is requested. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the
            factory is unable to create the object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LayerAnnotation">
      <summary> A <STRONG>LayerAnnotation</STRONG> is a collection of other annotations, including other
            <STRONG>LayerAnnotation</STRONG> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.LayerData)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LayerData" /> for this
            annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData" /> for this annotation. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.UI.AnnotationUICollection)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </summary>
      <param name="annotations"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this layer. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Bounds"></member>
    <member name="E:Atalasoft.Annotate.UI.LayerAnnotation.ChildAnnotationPropertyChanged">
      <summary> This event is raised when a property of an annotation contained in the layer has been changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.CreateAnnotationUIObjects(Atalasoft.Annotate.UI.AnnotationUIFactoryCollection)">
      <summary> Use this method to force the <STRONG>LayerAnnotation</STRONG> to create <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects
            for its <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects after deserialization or after using the constructor taking a <see cref="T:Atalasoft.Annotate.LayerData" />. </summary>
      <param name="factories"> The UI factories that will be used to create the annotation objects.  Normally this will be
            the <STRONG>AnnotationController</STRONG>.<see cref="P:Atalasoft.Annotate.UI.AnnotationController.Factories" /> property. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the factories argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose">
      <summary> Disposes this layer and all items it contains. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the layer and its contained annotations. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose" />
            method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this layer. </summary>
      <param name="info"> The SerializationInfo object where information is stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary> Gets the combined region for all annotations contained in this layer. </summary>
      <param name="space"> Indicates the space coordinates to return. </param>
      <returns> A Region for this layer. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.GroupAnnotation">
      <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Items">
      <summary> Gets an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnChildAnnotationPropertyChanged(System.Object,Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property of a child annotation has changed. </summary>
      <param name="sender"> The annotation that has changed. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information for this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnControllerChanged(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnDeserialization(System.Object)">
      <summary> Called when a formatter is finished deserializing the <STRONG>LayerAnnotation</STRONG>. </summary>
      <param name="sender"> The object calling this method.  This is normally null (Nothing in VB). </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="T:Atalasoft.Annotate.UI.LayerAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LayerData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LayerAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LayerData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LayerCollection">
      <summary> This class is used to hold a collection of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor">
      <summary> Creates a new instance of <STRONG>LayerCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerCollection</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this collection. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Add(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary>
            Adds a layer to the collection.
            </summary>
      <param name="layer">The layer to add.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.AddRange(Atalasoft.Annotate.UI.LayerAnnotation[])">
      <summary> Adds an array of layers to the collection. </summary>
      <param name="layers"> An array of layers to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the layers parameter is null. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.AnnotationControllerNotification">
      <summary> Raised after this collection or an item in the collection has been changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.CollectionChanged">
      <summary> Raised when there has been a change in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Contains(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns a value indicating whether a layer is contains within the collection. </summary>
      <param name="layer"> The layer to search for. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerCollection.Controller">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for this <STRONG>LayerCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.CopyTo(Atalasoft.Annotate.UI.LayerAnnotation[],System.Int32)">
      <summary> Copies items into the specified array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> The index in the target array to begin copying items. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose">
      <summary> Releases memory used by this collection and all of its annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose(System.Boolean)">
      <summary> Releases resources used by the collection and all of its <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerCollection.Dispose" />
            method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this collection. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.IndexOf(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns the position of a layer within the collection or -1 if the layer is not in the collection.
            </summary>
      <param name="layer"> The layer to search for. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Insert(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Inserts a layer into the collection at the specified index. </summary>
      <param name="index"> The position within the collection this layer should be placed. </param>
      <param name="layer"> The layer to insert. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerCollection.Item(System.Int32)">
      <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.LayerAnnotation.html">LayerAnnotation</a> at
            the specified index in the collection.
            </summary>
      <param name="index">The index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called when a change has been made to the collection or an object in the collection. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this
            change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClear">
      <summary> Called when the <STRONG>Clear</STRONG> method is invoked. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClearComplete">
      <summary> Called when the Clear method has completed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is any change to the collection. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnControllerChanged">
      <summary> Called when the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> using this <STRONG>LayerCollection</STRONG> has
            changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
      <param name="sender"> The formatter deserializing the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an item has been added or inserted into the collection. </summary>
      <param name="index"> The index where the item was placed. </param>
      <param name="value"> The items that was added. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before this collection or an object in the collection has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove method has completed. </summary>
      <param name="index"> The index of the item that was removed. </param>
      <param name="value"> The item that was removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when an item in the collection has been changed. </summary>
      <param name="index"> The index of the item that was changed. </param>
      <param name="oldValue"> The old value of the item. </param>
      <param name="newValue"> The new value of the item. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.PropertyChanging">
      <summary> Raised before this collection or an item in the collection has been changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Removes a layer from the collection. </summary>
      <param name="layer"> The layer to remove. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation[])">
      <summary> Removes an array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects from the collection. </summary>
      <param name="layers"> An array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the layers argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Replaces an existing layer with another one. </summary>
      <param name="oldLayer"> The layer currently in the collection. </param>
      <param name="newLayer"> The layer to insert into the collection. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if either argument is null (Nothing in VB). </exception>
      <exception cref="T:System.ArgumentException"> Thrown if the old layer does not exist in the collection. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Replaces a layer at the specified index with the provided layer. </summary>
      <param name="index"> The index of the layer to replace. </param>
      <param name="newLayer"> The new layer to insert into the collection. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index is invalid for this collection. </exception>
      <exception cref="T:System.ArgumentNullException"> Thrown if the new layer is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LineAnnotation">
      <summary> This is a single line annotation from <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint" /> to <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline and translucent
            properties. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.LineData)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LineData" /> used for
            this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData" /> object for the annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the start and end points, outline and
            translucent properties. </summary>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this annotation. </param>
      <param name="context"> The StreamingContext of this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint">
      <summary> Gets or sets the ending point for the line. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Outline">
      <summary> Gets or sets the outline for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint">
      <summary> Gets or sets the starting point for the line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used has a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LineAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LineData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LineAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LineData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LineData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LinesAnnotation">
      <summary> The <STRONG>LinesAnnoation</STRONG> represents a series of points connected by straight lines. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and end points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and an array of end
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, an array of points and
            whether this annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.LinesData)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LinesData" /> used by
            this annotation. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.LinesData" /> object for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the point collection, outline and
            translucent properties. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the points, outline and translucent
            properties. </summary>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
      <exception> Thrown if the points argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing data for this object. </param>
      <param name="context"> The StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this LinesAnnotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Outline">
      <summary> Gets or sets the outline for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LinesAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LinesData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LinesAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LinesData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LinesData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LinesData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotation">
      <summary> This annotation is used to select an area of the image to OCR is a separate process. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(Atalasoft.Annotate.OcrRegionData)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from an <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object.
            </summary>
      <param name="data"> The data object for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> specifying its bounds, sequence order and
            color. </summary>
      <param name="bounds"> The selection bounds for the annotation. </param>
      <param name="sequenceOrder"> The sequence number for the annotation.  This must be 1 or greater. </param>
      <param name="color"> The color for this annotation. </param>
      <exception> Thrown if the sequenceOrder is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from serialization information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.Color"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.SequenceOrder"></member>
    <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PdfLineAnnotationFactory">
      <summary> This class is used to generate a <see cref="T:Atalasoft.Annotate.Pdf.PdfLineAnnotation" /> from a <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> object.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PdfLineAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>PdfLineAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PdfLineAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.Pdf.PdfLineAnnotation" /> from the <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> provided. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> to create the annotation from. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.Pdf.PdfLineAnnotation" /> or null (Nothing in VB) if the data class was not a <see cref="T:Atalasoft.Annotate.Pdf.PdfLineData" /> object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PdfMarkupAnnotationFactory">
      <summary> This class is used to generate a <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation" /> from a <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" />
            object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PdfMarkupAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>PdfMarkupAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PdfMarkupAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation" /> from a <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> object. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> to create the annotation from. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupAnnotation" /> or null (Nothing in VB) if the data is not a <see cref="T:Atalasoft.Annotate.Pdf.PdfMarkupData" /> object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PointBaseAnnotation">
      <summary>
            This abstract class is used to simplify creating annotations that are defined
            with multiple points instead of a rectangular structure.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(Atalasoft.Annotate.PointBaseData)">
      <summary>Creates a new instance of PointBaseAnnotation.</summary>
      <param name="data">A PointBaseData object for this annotation.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of PointBaseAnnotation from serialized data.</summary>
      <param name="info">The SerializationInfo object containing information about this annotation.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.FreehandStyle">
      <summary>
            Gets or sets a value indicating whether this annotation should create in the same
            style as a FreehandAnnotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedRotation(System.Drawing.RectangleF,System.Single)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.GripMode">
      <summary>
            Gets or sets whether a RectangleGrips or PointGrips object is used for this
            annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnResized(System.EventArgs)"></member>
    <member name="T:Atalasoft.Annotate.UI.PointGrips">
      <summary>
        <para>
          <STRONG>PointGrips</STRONG> is the base class implementation used for annotation grips. All
            annotations in <STRONG>DotAnnotate</STRONG> use <STRONG>PointGrips</STRONG> or <see cref="T:Atalasoft.Annotate.UI.RectangleGrips" />, which
            derives from <STRONG>PointGrips</STRONG>.</para>
        <para>In essence, <STRONG>PointGrips</STRONG> is a collection of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(Atalasoft.Annotate.UI.AnnotationGrip[])">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" />
            objects. </summary>
      <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to add to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of points. </summary>
      <param name="points"> An array of points that will be used to generate <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects which
            are then added to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Add(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> to the collection. </summary>
      <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.AddRange(Atalasoft.Annotate.UI.AnnotationGrip[])">
      <summary> Adds an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to the collection. </summary>
      <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to add. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grips argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Bounds">
      <summary> Returns a bounding rectangle for all of the grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Clear">
      <summary> Clears the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Count">
      <summary> Returns the number of grips in the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Fill"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetEnumerator">
      <summary> Returns an <STRONG>IEnumerator</STRONG> for this grip collection. </summary>
      <returns> An <STRONG>IEnumerator</STRONG> for the collection. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetGripBounds(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns a bounding rectangle for a single grip. </summary>
      <param name="grip"> The grip to get bounds from. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetRegion">
      <summary> Returns a region for the grips. </summary>
      <returns> A region for the annotation grips. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GripFromPoint(System.Drawing.PointF)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> located at a specified point. </summary>
      <param name="point"> The point to search for a grip. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> found at the specified point or <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if no grip exists at that point. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.IndexOf(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns the index of a grip within the collection. </summary>
      <param name="grip"> The grip to search for. </param>
      <returns> The index of the grip or -1 if the grip was not found in the collection. </returns>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Inserts an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object into the collection at the specified index. </summary>
      <param name="index"> The index where the grip will be placed. </param>
      <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index value is out of range for this collection.</exception>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Item(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.OffsetPoints(System.Single,System.Single)">
      <summary> Applies an offset to all of the grip positions. </summary>
      <param name="x"> The amount to offset the grip positions in the x-axis. </param>
      <param name="y"> The amount to offset the grip position in the y-axis. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Outline"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Remove(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Removes a grip from the collection. </summary>
      <param name="grip"> The grip to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.RemoveAt(System.Int32)">
      <summary> Removes a grip at the specified index from the collection. </summary>
      <param name="index"> The index of the grip to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Replace(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Replaces a grip in the collection with another one. </summary>
      <param name="index"> The index of the grip to replace. </param>
      <param name="newGrip"> The new grip that will be used. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the newGrip argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationFill"></member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationOutline"></member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Size"></member>
    <member name="T:Atalasoft.Annotate.UI.PolygonAnnotation">
      <summary> A <STRONG>PolygonAnnotation</STRONG> is a series of points used to draw a polygon with an optional fill.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying its fill, outline, shadow, shadow
            offset and translucent properties. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline and fill. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and shadow
            settings. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            array of points for the polygon.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and points
            collection.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary>
        <para>This overload is obsolete and may be removed in a future release.</para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and an array of
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the point collection, fill,
            outline, shadow, shadow offset and translucent properties. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PolygonData)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.PolygonData" /> for
            this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData" /> for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the points, fill, outline, shadow,
            shadow offset and translucent properties. </summary>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about the annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Fill">
      <summary> Gets or sets the fill for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for the PolygonAnnotation.</summary>
      <returns>The region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Outline">
      <summary> Gets or sets the outline for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for this polygon in annotation space.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.ShadowOffset">
      <summary> Gets or sets the drop shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PolygonAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.PolygonData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.PolygonData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.PolygonData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleAnnotation">
      <summary> This is a rectangular annotation with an optional shadow brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill and outline. </summary>
      <param name="fill"> The fill used for the annotation. </param>
      <param name="outline"> The outline used for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill, outline and shadow
            options. </summary>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="shadow"> The shadow brush for the annotation. </param>
      <param name="shadowOffset"> The offset used for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.RectangleData)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.RectangleData" />.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData" /> for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill and outline.
            </summary>
      <param name="rectangle"> The rectangle for the annotation. </param>
      <param name="fill"> The fill for this annotation. </param>
      <param name="outline"> The outline for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill, outline and
            shadow options. </summary>
      <param name="rectangle"> The rectangle for the annotation. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="shadow"> The shadow brush for the annotation. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> from serialized data. </summary>
      <param name="info"> A SerializationInfo object containing the information for this annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Fill">
      <summary>Gets or sets the fill used for the annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Outline">
      <summary>Gets or sets the outline of the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Shadow">
      <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Translucent">
      <summary>
            Gets or sets a value indicating whether this annotation is used as a
            highlighter.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.RectangleData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.RectangleData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.RectangleData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleGrips">
      <summary>
            This class represents a group of AnnotationGrip objects for rectangular shaped
            annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor(Atalasoft.Annotate.RectangleGripDisplay)">
      <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG> specifying the grips to display. </summary>
      <param name="gripsToDisplay"> The grips to display. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.AspectRatio">
      <summary> Gets or sets a value used for the width-to-height ratio. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.GetGripDefinition(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns which rectangle grip the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object represents. </summary>
      <param name="grip"> The grip to lookup. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.RectangleGrip" /> value for this grip. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.GripsToDisplay">
      <summary> Gets or sets the grips to display. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.Rectangle">
      <summary> Gets the bounding rectangle of the grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.ShowRotationGrips">
      <summary> Gets or sets a value indicating whether rotation grips are displayed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.UpdatePositions(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Forces the grips to reset their positions based on a bounding rectangle. </summary>
      <param name="bounds"> A bounding rectangle defining the grip locations. </param>
      <param name="resolution"> The viewer resolution. </param>
      <param name="scale"> The scale (zoom) of the viewer. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation">
      <summary> This annotation references a local image by filename. When viewing this annotation on multiple systems,
            the image file must be provided at the same location of each system. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(Atalasoft.Annotate.ReferencedImageData)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the annotation data.
            </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> from serialized information.
            </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image.
            </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean)">
      <summary> Creates an instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image and
            indicating whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
      <param name="location"> The location of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, initial
            location, shadow, shadow offset and indicates whether the image aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
      <param name="location"> The location of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the image.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose(System.Boolean)">
      <summary> Called by <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose" /> or the finalizer to release resources.
            </summary>
      <param name="disposing"> A value indicating whether this method was called from <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose" /> or the finalizer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.FileName">
      <summary> Gets or sets the filename of the annotation image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.KeepAspectRatio">
      <summary> Gets or sets a value indicating whether the image ratio is maintained while resizing. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotation">
      <summary> This annotation provides a text message with a rounded rectangle outline similar to a rubber stamp.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(Atalasoft.Annotate.RubberStampData)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> providing the <see cref="T:Atalasoft.Annotate.RubberStampData" /> used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData" /> used by this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle. </summary>
      <param name="bounds"> The rectangle for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle and text.
            </summary>
      <param name="bounds"> The rectangle for this annotation. </param>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle, text and font.
            </summary>
      <param name="bounds"> The rectangle for the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation parameters.
            </summary>
      <param name="bounds"> The rectangle for the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used for the text. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
      <param name="padding"> Padding applied around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing the annotation information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation text.
            </summary>
      <param name="text"> The annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used for the text. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
      <param name="padding"> Padding applied around the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the
            annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.CornerRadius"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Fill">
      <summary>Gets or sets the fill used for the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Font">
      <summary>Gets or sets the font for the text.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.FontBrush">
      <summary>Gets or sets the AnnotationBrush used for the font.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Outline">
      <summary>Gets or sets the outline of the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Padding">
      <summary> Gets or sets the padding around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Text">
      <summary>Gets or sets the text for this annotation.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.RubberStampData" />
            class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.RubberStampData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData" /> object for the annotation. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs">
      <summary> This class is used with the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" /> method. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ScrollPositionChangedEventArgs</STRONG>. </summary>
      <param name="previousPosition"> The previous scroll position. </param>
      <param name="newPosition"> The new scroll position. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.NewPosition">
      <summary> Gets the new scroll position. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.PreviousPosition">
      <summary> Gets the previous scroll position. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.TextAnnotation">
      <summary> This annotation displays text which can be edited by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(Atalasoft.Annotate.TextData)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.TextData" /> object
            used for this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData" /> object used by this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the properties for this object.
            </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> The type of shadow to render. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Alignment"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks can pass through transparent areas of the annotation.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowEditing">
      <summary> Gets or sets a value indicating whether double-clicking on the annotation will switch into edit mode.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSelectOnEdit">
      <summary> Gets or sets a value indicating whether the text is automatically selected when the annotation is put into
            'Edit' mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSize"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.CreateFont(Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a <STRONG>System.Drawing.Font</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationFont" />. </summary>
      <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> used to create the Font. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the annotation. </summary>
      <param name="disposing"> Indicates if this method is called from the public <see cref="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose" />
            method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.EditMode">
      <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Fill"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Finalize"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Font"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FontBrush"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FormatFlags"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.HideEditDialog">
      <summary> Removes the edit control from the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.LineAlignment"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnDoubleClick(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnRotating(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnSelectedChanged(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Outline"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Padding"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.RenderingHint"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Shadow"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.ShadowOffset"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.ShowEditDialog">
      <summary> Displays an edit control in the viewer to allow text to be edited. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Text"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Trimming"></member>
    <member name="T:Atalasoft.Annotate.UI.TextAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.TextData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.TextData" /> object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.TransparentRichTextBox">
      <summary> This class is used by the <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> and <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> for editing
            text. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.#ctor(System.Boolean)">
      <summary> Creates a new instance of <STRONG>TransparentRichTextBox</STRONG>. </summary>
      <param name="transparentBackground"> Indicates if the textbox will have a transparent background. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TransparentRichTextBox.CreateParams">
      <summary> Gets the required creation parameters when the control handle is created. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Paints the background of the control.</para>
      </summary>
      <param name="pevent"> A <STRONG>PaintEventArgs</STRONG> that contains information about the control to paint.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.UndoEventArgs">
      <summary> This class contains information for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> events. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.UndoEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>UndoEventArgs</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> for
            this action. </summary>
      <param name="undo"> The undo for this action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.UndoEventArgs.Undo">
      <summary> Gets the undo for this operation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.UndoEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> events of the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
      <param name="sender"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" /> sending the request. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.UI.UndoEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Converters.PointFTypeConverter">
      <summary> A TypeConverter for a <STRONG>PointF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>PointFTypeConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Converters.RectangleFTypeConverter">
      <summary> A TypeConverter for the <STRONG>RectangleF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleFTypeConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Converters.SizeFTypeConverter">
      <summary> A TypeConverter for a <STRONG>SizeF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>SizeFConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
  </members>
</doc>