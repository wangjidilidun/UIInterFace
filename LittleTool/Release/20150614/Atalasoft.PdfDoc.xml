<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Atalasoft.PdfDoc</name>
  </assembly>
  <members>
    <member name="T:Atalasoft.PdfDoc.BasePage">
      <summary>
            A empty class which represents any page in a document. Use concrete page implementations like PdfGeneratedPage or PdfPage.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.BasePage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.BasePage" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter">
      <summary>
            This class converts coordinates from conventional image space (values
            measured in Dots Per cm (Pixels Per cm) with the origin in the upper left
            corner and X and Y extending to the right and down respectively) to PDF
            coordinate space (values measured in 1/72 inch with the origin in the lower
            left of the page and X and Y extending to the right and up respectively).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
      <summary>
            Constructs a new converter object with the specified resolution in dots per
            cm and the specified page size in pixels.
            </summary>
      <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
      <param name="pageSize">
            The size of the source space in pixels
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
      <summary>
            Constructs a new converter object with the specified resolution in dots per
            cm and the specified page size in pixels.
            </summary>
      <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
      <param name="pageSize">
            The size of the source space in pixels
            </param>
    </member>
    <member name="T:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter">
      <summary>
            This class converts coordinates from conventional image space (values
            measured in Dots Per Inch (Pixels Per Inch) with the origin in the upper
            left corner and X and Y extending to the right and down respectively) to PDF
            coordinate space (values measured in 1/72 inch with the origin in the lower
            left of the page and X and Y extending to the right and up respectively).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
      <summary>
            Constructs a new converter object with the specified resolution in dots per
            inch and the specified page size in pixels.
            </summary>
      <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
      <param name="pageSize">
            The size of the source space in pixels
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
      <summary>
            Constructs a new converter object with the specified resolution in dots per
            inch and the specified page size in pixels.
            </summary>
      <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
      <param name="pageSize">
            The size of the source space in pixels
            </param>
    </member>
    <member name="T:Atalasoft.PdfDoc.IncorrectPasswordException">
      <summary>
            This exception is thrown when a PdfDocument is opened with an incorrect
            password.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor">
      <summary>
            Construct a new IncorrectPasswordException object with no message.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor(System.String)">
      <summary>
            Construct a new IncorrectPasswordException object with the specified
            message.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Construct a new IncorrectPasswordException object with the specified message
            and inner exception.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfAccessPermissions">
      <summary>
            PdfAccessPermissions refer to permissions that are allowed within a PDF
            document.  Permissions are granted by allowing actions rather than
            preventing them.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Print">
      <summary>
            Allows printing of the document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Modify">
      <summary>
            Allows modifications to the document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.CopyTextAndGraphics">
      <summary>
            Allows text and graphics to be copied from the document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.ModifyAnnotationsOrFields">
      <summary>
            Allows annotations and fields to be modified
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.FillFields">
      <summary>
            Allows form fields to be filled in
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.AccessibilityExtractTextAndGraphics">
      <summary>
            Allows text and graphics extraction for users with disabilities
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.AssembleDocument">
      <summary>
            Allow the insertion, rotation, or deletion of pages and creation of
            bookmarks and thumbnail images.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.PrintHighQuality">
      <summary>
            Allows the highest possible quality printing of the document possible on the
            output device.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Default">
      <summary>
            A set of typical default permissions for a document.  This includes the
            previous permissions.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfAction">
      <summary>
            PdfAction is an abstract class that represents an action that will be taken
            when certain items in PDF documents have been activated.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfAction" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfAction.ActionType">
      <summary>
            Gets the type of the action represented by this object
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfActionList">
      <summary>
            PdfActionList is a list of PdfAction objects that will be associated as a
            sequence.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfActionList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfActionList" /> class</summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfActionType">
      <summary>
            Possible actions that can be represented in a PDF document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToView">
      <summary>
            Change the current view of a document to the specified view.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToRemote">
      <summary>
            Go to a view in another document.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToEmbedded">
      <summary>
            Go to a view in an embedded document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.LaunchApplication">
      <summary>
            Launch an application
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.ReadThread">
      <summary>
            Go to a particular article thread
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.FollowURI">
      <summary>
            Go to the destination specified by a URI
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.PlaySound">
      <summary>
            Play a sound
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.PlayMovie">
      <summary>
            Play a movie
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.Hide">
      <summary>
            Hide an annotation
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.PerformNamedAction">
      <summary>
            Perform an action or a sequence of actions specified by name
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.SubmitForm">
      <summary>
            Submit form data for processing
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.ResetForm">
      <summary>
            Reset form state to its default
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.ImportData">
      <summary>
            Import data into a form
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.JavaScript">
      <summary>
            Execute embedded javascript
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.SetOCGState">
      <summary>
            Sets the state of an optional content group (OCG)
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.Rendition">
      <summary>
            Controls the playing of multimedia content
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.PerformTransition">
      <summary>
            Sets the mechanism of changing the view of one page to another
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfActionType.GoTo3DView">
      <summary>
            Go to a specific view in a 3D model
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfBookmark">
      <summary>
            PdfBookmark is a representation of a single bookmark in the document outline
            of a PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor">
      <summary>
            Constructs a new default PdfBookmark object
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor(System.String,Atalasoft.PdfDoc.PdfAction)">
      <summary>
            Constructs a new PdfBookmark object with the specified text and action
            </summary>
      <param name="text">
            The text for the bookmark
            </param>
      <param name="action">
            An action to perform when the bookmark is clicked
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor(System.String,System.Drawing.Color,System.Drawing.FontStyle,Atalasoft.PdfDoc.PdfAction,System.Boolean)">
      <summary>
            Constructs a new PdfBookmark object with the specified text, color, style,
            action, and open/closed state
            </summary>
      <param name="text">
            The text for the bookmark
            </param>
      <param name="color">
            The color of the bookmark
            </param>
      <param name="style">
            The FontStyle for the bookmark
            </param>
      <param name="action">
            An action to perform when the bookmark is clicked
            </param>
      <param name="isOpen">
            Indicates whether or not children of this bookmark will be initially visible
            to the user
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.Children">
      <summary>
            Gets a list of bookmarks that are children to this bookmark.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.ClickAction">
      <summary>
            Gets a list of actions that will be performed when a user clicks the
            bookmark
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.Color">
      <summary>
            Sets or gets the color of the bookmark
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.IsOpen">
      <summary>
            Sets or gets the open/closed state of the bookmark
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.Style">
      <summary>
            Sets or gets the FontStyle of the bookmark
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmark.Text">
      <summary>
            Sets or gets the text for the bookmark
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfBookmarkList">
      <summary>
            PdfBookmarkList is a list of bookmarks contained within the document outlint
            of a PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfBookmarkList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfBookmarkList" /> class</summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfBookmarkTree">
      <summary>
            PdfBookmarkTree is a tree structure representing the entire document outline
            of a PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfBookmarkTree.#ctor">
      <summary>
            Constructs a new, empty tree of PDF bookmarks
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfBookmarkTree.Bookmarks">
      <summary>
            Gets the top-level list of bookmarks within a PDF document
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfCoordinateConverter">
      <summary>
            PdfCoordinateConverter is a base class for performing unit conversions to
            and from PDF coordinate space using an affine matrix transformation.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfCoordinateConverter" /> class.
            </summary>
      <param name="an">An.</param>
      <param name="ad">The ad.</param>
      <param name="bn">The bn.</param>
      <param name="bd">The bd.</param>
      <param name="cn">The cn.</param>
      <param name="cd">The cd.</param>
      <param name="dn">The dn.</param>
      <param name="dd">The dd.</param>
      <param name="e">The e.</param>
      <param name="f">The f.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.Point)">
      <summary>
            Converts a Point from one coordinate space to another
            </summary>
      <param name="p">
            The Point to convert
            </param>
      <returns>
            A new Point in the target coordinate space
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.PointF)">
      <summary>
            Converts a PointF from one coordinate space to another
            </summary>
      <param name="p">
            The Point to convert
            </param>
      <returns>
            A new PointF in the target coordinate space
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.Rectangle)">
      <summary>
            Converts a Rectangle from one coordinate space to another
            </summary>
      <param name="r">
            The Rectangle to convert
            </param>
      <returns>
            A new Rectangle in the target coordinate space
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.RectangleF)">
      <summary>
            Converts a RectangleF from one coordinate space to another
            </summary>
      <param name="r">
            The RectangleF to convert
            </param>
      <returns>
            A new Rectangle in the target coordinate space
            </returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfDestination">
      <summary>
            PdfDestination is an abstract class that represents a possible target
            location for a "go to" action.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.#ctor">
      <summary>
            Constructs a new, empty PdfDestination object.  PdfDestination has a number
            of convenience factory methods for making the most common types of
            PdfDestination objects.  After calling one of these methods, it will still
            be necessary to set the Page property to have a valid destination.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new, empty PdfDestination object.  PdfDestination has a number
            of convenience factory methods for making the most common types of
            PdfDestination objects.  After calling one of these methods, it will still
            be necessary to set the Page property to have a valid destination.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Bottom">
      <summary>
            Sets or gets the bottom extent of the view in PDF page coordinates
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBounds">
      <summary>
            A factory method for making a PdfDestination with FitBounds as its
            PageFitMode
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBoundsWidth(System.Nullable{System.Double})">
      <summary>
            A factory method for making a PdfDestination with FitBoundsWidth as its
            PageFitMode
            </summary>
      <param name="top">
            Specifies the top most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitHeight(System.Nullable{System.Double})">
      <summary>
            A factory method for making a PdfDestination with FitHeight as its
            PageFitMode
            </summary>
      <param name="left">
            Specifies the left most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitPage">
      <summary>
            A factory method for making a PdfDestination with FitPage as its PageFitMode
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitRectangle(System.Drawing.RectangleF)">
      <summary>
            A factory method for making a PdfDestination with FitRectangle as its
            PageFitMode
            </summary>
      <param name="rect">
            A rectangle representing the view in PDF page coordinates.
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.FitWidth(System.Nullable{System.Double})">
      <summary>
            A factory method for making a PdfDestination with FitWidth as its
            PageFitMode
            </summary>
      <param name="top">
            The top edge of the page to be shown in PDF page coordinates
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Left">
      <summary>
            Sets or gets the left extent of the view in PDF page coordinates
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Page">
      <summary>
            Sets or gets a reference to the PdfPage to use as a target destination.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.PageFitMode">
      <summary>
            Sets or gets the PdfPageFitMode for the destination.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDestination.PointZoom(System.Drawing.PointF,System.Double)">
      <summary>
            A factory method for making a PdfDestination with PointZoom as its
            PageFitMode
            </summary>
      <param name="position">
            The position to be zoomed in on in PDF page coordinates
            </param>
      <param name="zoom">
            The zoom level of the view.  Zoom is a multiplier: 1.0 will be normal size. 
            0.5 will be half size, etc.  0 or null means "use current zoom"
            </param>
      <returns>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Right">
      <summary>
            Sets or gets the right extent of the view in PDF page coordinates
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Top">
      <summary>
            Sets or gets the top extent of the view in PDF page coordinates
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDestination.Zoom">
      <summary>
            Sets or gets the zoom to be used for the view
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfDocument">
      <summary>
            PdfDocument is a representation of a PDF document and the pages and other
            structures contained therein.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor">
      <summary>
            Constructs a new, empty PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.IO.Stream)">
      <summary>
            Constructs a new PDF document populated from the supplied stream
            </summary>
      <param name="stm">
            A non-null stream containing a PDF document
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String)">
      <summary>
            Constructs a new PDF document using the file specified by the supplied path.
            </summary>
      <param name="path">
            A non-null path to the PDF document to be opened
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.IO.Stream)">
      <summary>
            Constructs a new PDF document using the supplied stream and decodes it with
            the supplied password.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="stm">
            A non-null stream containing a PDF document
            </param>
      <exception>
            If the password is incorrect or cannot be verified, the constructor will
            throw a CodecException.
            </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String)">
      <summary>
            Constructs a new PDF document using the file specified by the supplied path
            and decodes it with the supplied password.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="path">
            A non-null path to the PDF document to be opened
            </param>
      <exception>
            If the password is incorrect or cannot be verified, the constructor will
            throw a CodecException.
            </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream)">
      <summary>
            Constructs a new PDF document using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
      <param name="stm">
            A non-null stream containing a PDF document
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
      <summary>
            Constructs a new PDF document using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
      <param name="stm">
            A non-null stream containing a PDF document
            </param>
      <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.String)">
      <summary>
            Constructs a new PDF document using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
      <param name="path">
            A non-null path to the PDF document to be opened
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.BookmarkTree">
      <summary>
            Sets or gets the PdfBookmarkTree for this document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Close">
      <summary>
            Closes the PdfDocument's underlying stream, invalidates all pages, and
            clears the Pages collection.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.IO.Stream,System.IO.Stream[])">
      <summary>
            Combines one or more streams containing PDF documents into a single stream
            </summary>
      <param name="output">
            A non-null stream in which to save the resulting document
            </param>
      <param name="sources">
            Two or more non-null streams containing PDF documents
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.IO.Stream,System.String[])">
      <summary>
            Combines one or more paths containing PDF documents into a single stream
            </summary>
      <param name="output">
            A non-null stream in which to save the resulting document
            </param>
      <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.IO.Stream,System.IO.Stream[])">
      <summary>
            Combines one or more streams containing PDF documents into a single stream
            and encrypts the document with the supplied password.
            </summary>
      <param name="password">
            A password to encrypt the document.  Null or empty string means "no
            password".
            </param>
      <param name="output">
            A non-null stream in which to save the resulting document
            </param>
      <param name="sources">
            Two or more non-null streams containing PDF documents
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.IO.Stream,System.String[])">
      <summary>
            Combines one or more paths containing PDF documents into a single stream and
            encrypts the document with the supplied password.
            </summary>
      <param name="password">
            A password to encrypt the document.  Null or empty string means "no
            password".
            </param>
      <param name="output">
            A non-null stream in which to save the resulting document
            </param>
      <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.String[])">
      <summary>
            Combines one or more paths containing PDF documents into a single file.
            </summary>
      <param name="outputFile">
            A non-null path to the resulting output file.
            </param>
      <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.EncryptMetadata">
      <summary>
            Sets or gets a boolean indicating that metadata should be encrypted. 
            Default is false.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.Metadata">
      <summary>
            Sets or gets the document metadata for the PDF.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.OwnerPassword"></member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.Pages">
      <summary>
            Gets a collection of objects that represent the pages in a PDF document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.Permissions">
      <summary>
            Sets or gets the set of allowable actions for this PDF.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.IO.Stream)">
      <summary>
            Saves a PdfDocument into the supplied stream.
            </summary>
      <param name="stm">
            A non-null stream in which to save the resulting document
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String)">
      <summary>
            Saves a PdfDocument into a new file.
            </summary>
      <param name="path">
            A non-null path to the resulting output file.
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.IO.Stream)">
      <summary>
            Saves a PdfDocument into the supplied stream, encrypting with the supplied
            password.
            </summary>
      <param name="userPassword">
            A value to use for the user password.  This parameter may be null.
            </param>
      <param name="stm">
            A non-null stream in which to save the resulting document
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String)">
      <summary>
            Saves a PdfDocument into a new file encrypting with the supplied password.
            </summary>
      <param name="userPassword">
            A value to use for the user password.  This parameter may be null.
            </param>
      <param name="path">
            A non-null path to the resulting output file.
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String,System.IO.Stream)">
      <summary>
            Saves a PdfDocument into a stream encrypting with the supplied passwords.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
      <param name="stm">
            A non-null stream in which to save the resulting document
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String,System.String)">
      <summary>
            Saves a PdfDocument into a new file encrypting with the supplied passwords.
            </summary>
      <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
      <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
      <param name="path">
            A non-null path to the resulting output file.
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.SelfPrintingPdf">
      <summary>
            Gets or sets a value indicating whether the document generated will automatically print upon opening.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Separate(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfStreamCreator)">
      <summary>
            Separates the pdf into two pdf
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="source">The source.</param>
      <param name="creator">The creator.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocument.Separate(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Separates the pdf into two pdf
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="source">The source.</param>
      <param name="destFolder">The dest folder.</param>
      <param name="fileNameFormat">The file name format.</param>
      <param name="overwrite">if set to <c>true</c> [overwrite].</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocument.UserPassword">
      <summary>
            Sets or gets a password to use for the user password for the document.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfDocumentLoadedProgress">
      <summary>
            A delegate that will be called when a page has been loaded in the document.
            </summary>
      <param name="currentPageNumber">The current page number of the page loaded relative to the document</param>
      <param name="currentPageIndex">Indicates the total number of pages loaded so far.</param>
      <param name="totalPages">The total number of pages that will be loaded.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfDocumentMetadata">
      <summary>
            PdfDocumentMetadata represents standard PDF metadata including title,
            subject, author and so on.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.#ctor">
      <summary>
            Constructs a new PdfDocumentMetadata object with default values for all the
            fields.
            </summary>
      <returns>
            A new PdfDocumentMetadata object with default values.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.AddCustomField(System.String,System.String)">
      <summary>
            Adds a custom field to the metadata object.
            </summary>
      <param name="name">
            The name to be associated with this metadata
            </param>
      <param name="val">
            The string value to associate with this metadata
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.Append(System.IO.Stream,System.Boolean)">
      <summary>
            Adds the metadata to an existing PDF stream
            </summary>
      <param name="stm">
            A non-null stream containing a PDF document.
            </param>
      <param name="mergeMetadata">
            Determines if the metadata will be merged into the existing document
            metadata, if any.
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Author">
      <summary>
            Gets or sets the Author field of the document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.Clear">
      <summary>
            Clears out all metadata within a PdfDocumentMetadata object.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CreationDate">
      <summary>
            Sets or gets the date when the document was created.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Creator">
      <summary>
            Gets or sets the Creator field of the document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CustomFields">
      <summary>
            Gets a table of custom metadata fields.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.DocumentTrapping">
      <summary>
            Gets or sets the trapping to be used for this document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.FromStream(System.IO.Stream)">
      <summary>
            Constructs a new PdfDocumentMetadata object from the stream
            </summary>
      <param name="stm">
            A stream containing a PDF document
            </param>
      <returns>
            A new PdfDocumentMetadata object containing the fields from the PDF.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.FromStream(System.IO.Stream,System.String)">
      <summary>
            Constructs a new PdfDocumentMetadata object from the stream, using the
            supplied password
            </summary>
      <param name="stm">
            A stream containing a PDF document
            </param>
      <param name="password">
            A password to use to decrypt the document
            </param>
      <returns>
            A new PdfDocumentMetadata object containing the fields from the PDF.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.GetCustomField(System.String)">
      <summary>
            Attempts to retrieve the value of a custom field from the
            PdfDocumentMetadata object.
            </summary>
      <param name="name">
            The name of a custom field in the metadata.  See
            %AddCustomField:Atalasoft.PdfDoc~Atalasoft.PdfDoc.PdfDocumentMetadata~AddCustomField%
            for restrictions.
            </param>
      <returns>
            A string containing the metadata.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Keywords">
      <summary>
            Gets or sets the keywords associated with the document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.ModificationDate">
      <summary>
            Gets or sets the modification date for this document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Producer">
      <summary>
            Gets or sets the producer of this PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.RemoveCustomField(System.String)">
      <summary>
            Removes a field from the metadata object.
            </summary>
      <param name="name">
            The name associated with the metadata to be removed.
            </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Subject">
      <summary>
            Gets or sets the Subject of this PDF document
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Title">
      <summary>
            Gets or sets the title of the PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.UpdateCustomField(System.String,System.String)">
      <summary>
            Updates a custom field in the metadata object.
            </summary>
      <param name="name">
            The name associated with the metadata field to be updated.
            </param>
      <param name="val">
            The string value to associate with this metadata.
            </param>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfDocumentType">
      <summary>
            Controls the type of PDF Document generated.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfDocumentType.Default">
      <summary>
            Generate a default PDF document, without any specific constraints.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfDocumentType.PdfA1b">
      <summary>
            Generate a PDFA-1b complaint PDF document.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfException">
      <summary>
            An exception from DotPdf
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
              </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfFileCreator">
      <summary>
            The event delegate for file creation
            </summary>
      <param name="pathToOriginalPdf">The path to original PDF.</param>
      <param name="pageIndex">Index of the page.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfGoToViewAction">
      <summary>
            PdfGoToViewAction is a concrete class that represents an action that causes
            a PDF viewer to go to a specific view within a document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor">
      <summary>
            Constructs a new empty PdfGoToViewAction
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor(Atalasoft.PdfDoc.PdfDestination)">
      <summary>
            Constructs a new PdfGoToViewAction that goes to the destination.
            </summary>
      <param name="dest">
            The destination of the view
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfGoToViewAction.ActionType">
      <summary>
            Gets the action type for this action
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfGoToViewAction.Destination">
      <summary>
            Sets or gets the destination of the PdfGoToViewAction
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfImageCodec">
      <summary>
            An enum to represnet which codec is used to compress an image resource
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.None">
      <summary>
            No Compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.LZW">
      <summary>
            LZW compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.Flate">
      <summary>
            Flate compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.RunLength">
      <summary>
            Run Length compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.CCITTGroup4">
      <summary>
            CCITT Group 4 Compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.JBIG2">
      <summary>
            JBIG2 Compression (requires JBig2 Encoder License)
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.DCT">
      <summary>
            DCT Compression
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageCodec.JPX">
      <summary>
            JPEG 2000 Compression (requires Jpeg2k Encoder License)
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfImageColorSpace">
      <summary>
            An enum representing the color space types as their channel designations
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Gray">
      <summary>
            Grayscale color space. One channel representing Gamma.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Rgb">
      <summary>
            Red Green Blue color space. Channels representing Red, Green, then Blue.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Cmyk">
      <summary>
            Cyan Magenta Yellow Black color space. Channels representing Cyan, Magenta, Yellow, then Black.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Paletted">
      <summary>
            Palleted color space. Specific colors mapped to single channel values.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfIndexedPageReference">
      <summary>
            PdfIndexedPageReference is low-overhead class that represents a PDF page by
            its 0-based page number.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.#ctor(System.Int32)">
      <summary>
            Constructs a new PdfIndexedPageReference using the supplied index
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new PdfIndexedPageReference using the supplied index
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfIndexedPageReference.PageIndex">
      <summary>
            Sets or gets the page index
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfIndexedPageReference.ReferenceType">
      <summary>
            Gets the PdfPageReferenceType for this PdfPageReference object
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfPage">
      <summary>
            PdfPage is a class that represents a single page within a PDF Document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfPage.Frame">
      <summary>
            Gets the page index for this page
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfPage.Rotation">
      <summary>
            Gets or sets the rotation for the page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfPage.Stream">
      <summary>
            Gets the stream from which this page was constructed
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfPageFitMode">
      <summary>
            Descibes view modes for a document
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.PointZoom">
      <summary>
            The view of the document will center on a specified point and a specified
            zoom
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitPage">
      <summary>
            The view will contain the entire page
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitWidth">
      <summary>
            The view will contain the document scaled so that the width fills the view
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitHeight">
      <summary>
            The view will contain the document scaled so that the height fills the view
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitRectangle">
      <summary>
            The view will contain a specific rectangle
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitBounds">
      <summary>
            The view will contain the page bounding box
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitBoundsWidth">
      <summary>
            The view will contain the page bounding box scaled to fit its width
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfPageReference">
      <summary>
            PdfPageReference is an abstract class that is used to refer to pages within
            a PDF document.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfPageReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfPageReference" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfPageReference.ReferenceType">
      <summary>
            Gets the PdfPageReferenceType for this object
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfPageReferenceType">
      <summary>
            Defines the possible types of page references
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageReferenceType.Indexed">
      <summary>
            Pages will be referenced by a 0-based index
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfPageRotation">
      <summary>
            An enum representing possible rotations of a PDF page for display.
            Several of the values overlap for convenience.  For example, Clockwise180 and
            CounterClockwise180 are identical.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.None">
      <summary>
            The page will not be rotated.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise90">
      <summary>
            The page will be rotated 90 degrees clockwise
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise180">
      <summary>
            The page will be rotated 180 degrees clockwise
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise270">
      <summary>
            The page will be rotated 270 degrees clockwise
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise90">
      <summary>
            The page will be rotated 90 degrees counter clockwise (equivalent to Clockwise270)
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise180">
      <summary>
            The page will be rotated 180 degrees counter clockwise (equivalent to Clockwise180)
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise270">
      <summary>
            The page will be rotated 270 degrees counter clockwise (equivalent to Clockwise90)
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfStreamCreator">
      <summary>
            The delegate for PdfStream creation events
            </summary>
      <param name="originalStream">The original stream.</param>
      <param name="pageIndex">Index of the page.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter">
      <summary>
            This class converts coordinates from PDF coordinate space (values measured
            in 1/72 inch with the origin in the lower left of the page and X and Y
            extending to the right and up respectively) to conventional image space
            (values measured in Dots Per cm (Pixels Per cm) with the origin in the upper
            left corner and X and Y extending to the right and down respectively).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
      <summary>
            Constructs a new converter object with the specified target resolution in
            dots per cm and the specified source page size in PDF units.
            </summary>
      <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
      <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
      <summary>
            Constructs a new converter object with the specified target resolution in
            dots per cm and the specified source page size in PDF units.
            </summary>
      <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
      <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter">
      <summary>
            This class converts coordinates from PDF coordinate space (values measured
            in 1/72 inch with the origin in the lower left of the page and X and Y
            extending to the right and up respectively) to conventional image space
            (values measured in Dots Per inch (Pixels Per inch) with the origin in the
            upper left corner and X and Y extending to the right and down respectively).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
      <summary>
            Constructs a new converter object with the specified target resolution in
            dots per inch and the specified source page size in PDF units.
            </summary>
      <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
      <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
      <summary>
            Constructs a new converter object with the specified target resolution in
            dots per inch and the specified source page size in PDF units.
            </summary>
      <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
      <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfTrapSetting">
      <summary>
            An enumeration used to indicate the trapping information in the document.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.None">
      <summary>
            No setting - no entry will be placed in the PDF document.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.False">
      <summary>
            The document has not yet been trapped.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.True">
      <summary>
            The document has been fully trapped
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.Unknown">
      <summary>
            Either the document has not yet been trapped or has not yet been fully trapped.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfUnknownAction">
      <summary>
            PdfUnknownAction is a concrete representation of PdfActions that do not map
            to any other concrete PdfAction class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfUnknownAction.ActionType">
      <summary>
            Gets the PDF action type associated with this action
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.PdfURIAction">
      <summary>
            An action that pdf documents can be made to take upon load
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction" /> class.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction" /> class.
            </summary>
      <param name="uri">The URI.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Uri,System.Uri,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction" /> class.
            </summary>
      <param name="uri">The URI.</param>
      <param name="baseUri">The base URI.</param>
      <param name="isMap">if set to <c>true</c> [is map].</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfURIAction.ActionType">
      <summary>
            Gets the type of the action represented by this object
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfURIAction.Base">
      <summary>
            Gets or sets the base.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.PdfURIAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfURIAction.IsMap">
      <summary>
            Gets or sets a value indicating whether this instance is map.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.PdfURIAction.URI">
      <summary>
            Gets or sets the URI.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.IPdfCmykColor">
      <summary>
            The interface for CMYK colors in Pdf.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.C">
      <summary>
            Gets or sets the Cyan channel
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.K">
      <summary>
            Gets or sets the Black channel.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.M">
      <summary>
            Gets or sets the Magenta channel.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.Y">
      <summary>
            Gets or sets the Yellow channel.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.IPdfColor">
      <summary>
            A container interface used to carry color objects in collections. Do not use this interface unless you are simply moving a more specific color object to another object.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfColor.ColorSpaceResourceName">
      <summary>
            Gets or sets the name of the color space resource.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.IPdfGrayColor">
      <summary>
            The interface for Gray based colors in Pdf
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfGrayColor.Gray">
      <summary>
            Gets or sets the gray.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.IPdfRgbColor">
      <summary>
            The interface for RGB color in Pdf
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.B">
      <summary>
            Gets or sets the Blue channel.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.G">
      <summary>
            Gets or sets the Green channel.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.R">
      <summary>
            Gets or sets the Red channel.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.OpaquePageInformer">
      <summary>
            When a page from a PDF document can't be imported for some reason,
            this class can report the reason for the failure if it is available.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.OpaquePageInformer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.OpaquePageInformer" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.OpaquePageInformer.ImportFailureReason(Atalasoft.PdfDoc.BasePage)">
      <summary>
            Imports the failure reason from the page.
            </summary>
      <param name="page">The page must be the type OpaquePage which is used internally in DotPdf.</param>
      <returns>The reason for failure to import, null if the page is not an OpaquePage</returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.PdfColorFactory">
      <summary>
            A factory class to create PdfColors from their channel components.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfColorFactory" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a Cymk color for use in Pdf.
            </summary>
      <param name="c">The cyan color. Value between 0.0 and 1.0</param>
      <param name="y">The yellow color. Value between 0.0 and 1.0</param>
      <param name="m">The magenta color. Value between 0.0 and 1.0</param>
      <param name="k">The black color. Value between 0.0 and 1.0</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromCmyk(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a Cymk color for use in Pdf.
            </summary>
      <param name="c">The cyan color. Value between 0.0 and 1.0</param>
      <param name="y">The yellow color. Value between 0.0 and 1.0</param>
      <param name="m">The magenta color. Value between 0.0 and 1.0</param>
      <param name="k">The black color. Value between 0.0 and 1.0</param>
      <param name="resourceName">Name of the color space resource to use to describe this color.</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromColor(System.Drawing.Color)">
      <summary>
            Create an Rgb color for use in Pdf.
            </summary>
      <param name="color">The color.</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromColor(System.Drawing.Color,System.String)">
      <summary>
            Create an Rgb color for use in Pdf.
            </summary>
      <param name="color">The color.</param>
      <param name="resourceName">Name of the color space resource to use to describe this color.</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromGray(System.Double)">
      <summary>
            Create a Grayscale color for use in Pdf
            </summary>
      <param name="gray">The gray color. Value between 0.0 (black) and 1.0 (white)</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromGray(System.Double,System.String)">
      <summary>
            Froms the gray.
            </summary>
      <param name="gray">The gray.</param>
      <param name="resourceName">Name of the color space resource to use to describe this color.</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromRgb(System.Double,System.Double,System.Double)">
      <summary>
            Create an Rgb color for use in Pdf.
            </summary>
      <param name="r">The red channel. Value between 0.0 and 1.0</param>
      <param name="g">The green channel. Value between 0.0 and 1.0</param>
      <param name="b">The blue channel. Value between 0.0 and 1.0</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromRgb(System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create an Rgb color for use in Pdf.
            </summary>
      <param name="r">The red channel. Value between 0.0 and 1.0</param>
      <param name="g">The green channel. Value between 0.0 and 1.0</param>
      <param name="b">The blue channel. Value between 0.0 and 1.0</param>
      <param name="resourceName">Name of the color space resource to use to describe this color.</param>
      <returns>a new IPdfColor representing the desired color</returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.PdfColorSpaceType">
      <summary>
            The available color spaces in pdf
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Rgb">
      <summary>
            Red Green Blue
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Gray">
      <summary>
            Grayscale
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Cmyk">
      <summary>
            Cyan Magenta Yellow Black
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Lab">
      <summary>
            Custom color spaces
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.PdfDefaultPages">
      <summary>
            A collection of default pages for use in the PdfGeneratedDocument object
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfDefaultPages.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfDefaultPages" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A4">
      <summary>
            Gets the a4 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A4Landscape">
      <summary>
            Gets the a4 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A5">
      <summary>
            Gets the a5 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A5Landscape">
      <summary>
            Gets the a5 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A6">
      <summary>
            Gets the a6 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A6Landscape">
      <summary>
            Gets the a6 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B4">
      <summary>
            Gets the b4 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B4Landscape">
      <summary>
            Gets the b4 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B5">
      <summary>
            Gets the b5 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B5Landscaped">
      <summary>
            Gets the b5 landscaped sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B6">
      <summary>
            Gets the b6 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B6Landscape">
      <summary>
            Gets the b6 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C4">
      <summary>
            Gets the c4 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C4Landscape">
      <summary>
            Gets the c4 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C5">
      <summary>
            Gets the c5 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C5Landscape">
      <summary>
            Gets the c5 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C6">
      <summary>
            Gets the c6 sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C6Landscape">
      <summary>
            Gets the c6 landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Ledger">
      <summary>
            Gets the ledger sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LedgerLandscape">
      <summary>
            Gets the ledger landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Legal">
      <summary>
            Gets the legalsized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LegalLandscape">
      <summary>
            Gets the legal landscape sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Letter">
      <summary>
            Gets the letter sized page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LetterLandscape">
      <summary>
            Gets the letter landscape sized page.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument">
      <summary>
            The PdfGeneratedDocument object is designed to create documents using the Pdf Generating Tools. 
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
      <param name="stm">The stream containing the previously generated pdf.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
      <param name="stm">The stream containing the previously generated pdf.</param>
      <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class. This overload is designed to open an existing DotPdf generated pdf document for editing/modification.
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="stm">The stream containing the previously generated pdf.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="stm">The stream containing the previously generated pdf.</param>
      <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
      <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="stm">The stream containing the previously generated pdf.</param>
      <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
      <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
      <param name="pagesToLoad">A a set of page numbers to load.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument" /> class.
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="stm">The stream containing the previously generated pdf.</param>
      <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
      <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
      <param name="pagesToLoad">A a set of page numbers to load.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.BookmarkTree">
      <summary>
            Gets or sets the bookmark tree.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.EmbedGeneratedContent">
      <summary>
            Gets or sets a value indicating whether to embed Generated content allowing a PdfGeneratedDocument to be
            reconstructed from a PDF.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.EncryptMetadata">
      <summary>
            Gets or sets a value indicating whether to encrypt metadata.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Metadata">
      <summary>
            Gets the document's metadata.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.OwnerPassword">
      <summary>
            Gets or sets the owner password.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Pages">
      <summary>
            Gets the pages of the document.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Permissions">
      <summary>
            Gets or sets the permissions.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Resources">
      <summary>
            Gets or sets the global resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.IO.Stream)">
      <summary>
            Saves the document to the specified outStream
            </summary>
      <param name="outStream">The out stream.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.IO.Stream,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
      <summary>
            Saves the document to the specified outStream
            </summary>
      <param name="outStream">The out stream.</param>
      <param name="progressHandler">The progress handler.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String)">
      <summary>
            Saves the document to the specified output file.
            </summary>
      <param name="outputFile">The path to the output file.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
      <summary>
            Saves the document to the specified output file.
            </summary>
      <param name="outputFile">The path to the output file.</param>
      <param name="progressHandler">The progress handler.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String,System.String,System.IO.Stream,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
      <summary>
            Saves the Pdf document to the output stream using the provided passwords
            </summary>
      <param name="userPassword">The user password.</param>
      <param name="ownerPassword">The owner password.</param>
      <param name="outStream">The out stream.</param>
      <param name="progressHandler">The progress handler.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.SelfPrinting">
      <summary>
            Gets or sets a value indicating whether will self print upon opening.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.UserPassword">
      <summary>
            Gets or sets the user password.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage">
      <summary>
            A BasePage object which contains functionality to create Pdf. Use this class when trying to programmatically generate pdf pages.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage" /> class.
            </summary>
      <param name="width">The width of the page.</param>
      <param name="height">The height of the page.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ArtBox">
      <summary>
            Gets or sets the art box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.BleedBox">
      <summary>
            Gets or sets the bleed box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.CropBox">
      <summary>
            Gets or sets the crop box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.DrawingList">
      <summary>
            Gets the drawing list. The drawing list contains all the objects on the page to be saved to the pdf file.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedColorSpaces">
      <summary>
            Gets a list of global resource names of the color spaces that were successfully imported into GlobalResources from the source document (if any).
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedFonts">
      <summary>
            Gets a list of global resource names of the fonts that were successfully imported into GlobalResources from the source document (if any).
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedImages">
      <summary>
            Gets a list of global resource names of the images that were successfully imported into GlobalResources from the source document (if any).
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.MediaBox">
      <summary>
            Gets or sets the media box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Rotation">
      <summary>
            Gets or sets the rotation for the page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.TrimBox">
      <summary>
            Gets or sets the trim box.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer">
      <summary>
            The DocumentRenderer class is an abstract class that defines how a PdfGeneratedDocument is rendered into some other form.
            DocumentRenderer defines the process of rendering, but doesn't define the actual steps.  In this way one concrete instance of DocumentRenderer
            could create a PDF file from a PdfGeneratedDocument and another could create a WPF approximation of a single page within a PdfGeneratedDocument, but
            both renderers could be treated the same in client code.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer" /> class</summary>
    </member>
    <member name="E:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.DocumentProgress">
      <summary>
            Occurs when progress is made in the overall process of rendering the document. This event is fired when rendering starts, when rendering
            completes, when each page starts and when each page completes.  If the document contains no pages, then precisely one DocumentProgress
            event will be fired.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.ErrorOccurred">
      <summary>
            Gets or sets a value indicating whether an error occurred in the process of rendering a page. ErrorOccurred will be cleared
            before rendering begins.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLBeginDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            This method represents the Low-Level implementation of BeginDoc.  It is called once at the start of rendering the document
            after the first DocumentProgress event has been fired, but before the first page is rendered.  If a document has an empty
            Pages collection, LLBeginDoc will not be called.  The default implementation does nothing.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLBeginPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            This method represents the Low-Level implementation of BeginPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to set up for rendering a given page.  For exmaple, a particular rendered might need to
            create GDI Graphics objects or clear a frame buffer before rendering a page.
            </summary>
      <param name="document">The document being rendered.</param>
      <param name="page">The page that is about to be rendered.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLEndDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            This method represents the Low-Level implementation of EndDoc.  It is called once at the end of rendering a document after
            the final DocumentProgress event has been fired.  If a document has an empty Pages collection, LLEndDoc will not be called.
            A concrete implementation of DocumentRenderer could use this method for cleaning up temporary files created during the
            rendering process.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLEndPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            This method represents the Low-Level implementation of EndPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to finish up after a page has been rendered. For example, a particular instance might need to
            remove temporary files created earlier.  The default implementation does nothing.
            </summary>
      <param name="document">The document being rendered.</param>
      <param name="page">The current page that was just rendered.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLGenerate(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage,Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            This method represents the Low-Level implementation of code used to generate PDF content for a particular page.
            A complete implementation of this method should call the GeneratePdf method of the page's DrawlingList property,
            passing in the given PdfPageRenderer object.  The default implementation does nothing.
            </summary>
      <param name="document">The document being rendered.</param>
      <param name="page">The page being rendered.</param>
      <param name="renderer">The PdfPageRenderer object returned by MakeWriter.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.MakePageRenderer(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            Makes the PdfPageRenderer that will be used for each page being rendered.  When rendering a document, MakeWriter will be called
            once for every page that is rendered.  A concrete implementation of DocumentRenderer must implement this method.
            </summary>
      <param name="document">The document being rendered.</param>
      <param name="page">The page that is about to be rendered.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.OnDocumentProgress(Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs)">
      <summary>
            Raises the <see cref="E:DocumentProgress" /> event.
            </summary>
      <param name="e">The <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.Render(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            Renders the entire PdfGeneratedDocument.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.Render(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,System.Collections.Generic.ICollection{Atalasoft.PdfDoc.BasePage})">
      <summary>
            Renders a subset of pages from the specified document.  This method is intended to allow the rendering of a subset
            of pages from a document.  If pages is an empty enumeration, the output is undefined.
            </summary>
      <param name="document">The document to render.</param>
      <param name="pages">An enumerable collection of pages to render.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.IOpaqueDrawingList">
      <summary>
            This interface is meant to denote drawing lists that were imported from existing
            PDF content that could not be translated into IPdfRenderable objects.  Opaque drawing
            lists may be removed from their page or reordered within the list, but they cannot be
            put into any other list.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable">
      <summary>
            Represents objects that can generate PDF document content,
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable.Name">
      <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
      <param name="r">The PdfPageRenderer for generating PDF.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PathAction">
      <summary>
            PathAction describes elements that are used in describing a path or subpath
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Move">
      <summary>
            Move to a new location in the path.  This is used to either start a new path or a new subpath.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Line">
      <summary>
            Extends the current path or subpath by connection a line from the last location in the current path to a new point
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Curve">
      <summary>
            Extends the current path or subpath by adding a Bezier curve from the last location in the current path through two control
            points and ending with the final path.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Close">
      <summary>
            Closes the current path or subpath by connection a straight line segment from the the last point in the current path to
            the first point in the current path.  Note that closing a path is different from simply doing a Line operation to the last point
            in that if the path is stroked, the corners will be correctly mitered with a Close but will not be mitered with a Line.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList">
      <summary>
            PdfDrawing list is a container class used to hold a collection of IPdfRenderable.
            PdfDrawingList is itself IPdfRenderable allowing nesting or structural grouping of
            Pdf content generating objects.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.Name">
      <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Generating API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
      <summary>
            Notifies that the resource was renamed.
            </summary>
      <param name="gr">The gr.</param>
      <param name="resourceClass">The resource class.</param>
      <param name="originalName">Name of the original.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            
            PdfDrawingList iterates over each IPdfRenderable element of its collection calling their GeneratePdf methods in turn.
            </summary>
      <param name="r">The PdfPageRenderer for generating PDF.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface">
      <summary>
            PdfDrawingSurface is an abstract class that defines the drawing operations that can be performed on PDF page or
            other PDF content item.
            
            In this model, there is a notion of current path.  A path a set of possibly disjoint lines or curves.  A path or any
            of its sub paths may be closed open.  An existing path may have more paths added to it.
            
            When any of the painting operations are performed, the current path will be cleared - unless the user performs a GSave
            operation in the containing PdfPageRenderer object before painting.
            
            Paths may be stroked, painted, painted and stroked, or clipped.  Clipping is cumulative.  Clipping to a path can only reduce
            the current clipping region or keep it the same size.  Use GSave/GRestore to make temporary changes to the clipping region.
            
            In addition, a tranformation matrix may be applied to the drawing surface that will be incorporated into the current transformation.
            Transformations are cumulative and will affect all subsequent drawing unless managed with a GSave/Grestore operation.
            
            Before any operations can be performed on a PdfDrawingSurface, client code is required to call Begin.  Client code should also
            call End when done.  Begin and End are very efficient operations.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation})">
      <summary>
            Adds a set of path operations to the current path.  Path should start with a Move operation.
            </summary>
      <param name="path">The path to add.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            First applies a translation transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The translation remains in place after the addition.
            </summary>
      <param name="path">The path to add.</param>
      <param name="location">The location to which the path will be translated.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            First applies a transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The transform remains in place after the addition.
            </summary>
      <param name="path">The path to add.</param>
      <param name="transform">The transform to apply.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Adds the a closed rectangle to the current path.
            </summary>
      <param name="r">The rectangle to add.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            First applies a translation transform then adds the a closed rectangle to the current path.
            The translation remains in place after the addition.
            </summary>
      <param name="r">The rectangle to add.</param>
      <param name="location">The location to which the rectangle will be translated.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            First applies a transform then adds the a closed rectangle to the current path.
            The transform remains in place after the addition.
            </summary>
      <param name="r">The rectangle to add.</param>
      <param name="transform">The transform to apply.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.ApplyTransformation(Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Applies the transform to the drawing surface.  The transform will be accumulated onto any existing transformation.
            Previous transforms can be saved and restored via the GSave and GRestore methods in PdfPageRenderer.
            </summary>
      <param name="transform">The transform to apply.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Begin">
      <summary>
            Signal that drawing operations have begun.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
      <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
      <param name="fillMethod">The fill method to use for the path.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,System.Boolean)">
      <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
      <param name="fillMethod">The fill method to use for the path.</param>
      <param name="keepPath">True if the clipping path should be kept as the current path, false otherwise</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.End">
      <summary>
            Signal that drawing on the drawing surface is complete.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Fill(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Paints the current path using the specified fill method and color then clears the current path.
            </summary>
      <param name="fillMethod">The fill method for the path.</param>
      <param name="color">The color used to fill the path.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.FillAndStroke(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Paints then strokes the current path using the specified parameters, then clears the current path.
            </summary>
      <param name="fillMethod">The fill method that will be used to fill the path.</param>
      <param name="fillColor">The Color used for filling the path.</param>
      <param name="style">The style of the line used to stroke the path.</param>
      <param name="lineColor">The Color of the line used to stroke the path.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Places the image on the drawing surface within the bounds provided.
            </summary>
      <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
      <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
      <param name="locationAndSize">location and size of the image in PDF page units.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Places the image on the drawing surface at the given location.  The image will be placed such that each pixel is
            1 PDF page unit square.
            </summary>
      <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
      <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
      <param name="location">The location of the image on the page.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Places the image on the drawing surface within the bounds and transformed by the matrix provided.
            </summary>
      <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
      <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
      <param name="transform">The transform.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Stroke(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Strokes the current path in the specified style and color then clears the current path.
            </summary>
      <param name="style">The line style that will be used to draw the path.</param>
      <param name="color">The color of the line that will be drawn.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod">
      <summary>
            Defines how a path in PDF page content will be filled.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod.NonZeroWinding">
      <summary>
            This fill method represents the non-zero winding rule.  In this method, horizontal rays are fired through the path and if segments cross
            the ray from bottom to top, 1 is added to a winding count.  If segments cross the ray from top to bottom, 1 is subtracted from the winding
            count.  If the winding count is non-zero, the path will be filled along the ray.  If the winding number is 0, the path will be
            empty along the ray.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod.EvenOdd">
      <summary>
            This fill method represents the even/odd rule.  In this method, horizontal rays are fired through the path and a running total
            of segments crossing the ray is kept.  If the running total is odd, the path will be filled along the ray.  If the running total
            is even, the path will not be filled along the ray.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle">
      <summary>
            Represents the way that ends of stroked paths will look.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.Butt">
      <summary>
            Represents flat ends to lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.Round">
      <summary>
            Represetns half-circle round ends to lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.ProjectingSquare">
      <summary>
            Similar to butt ends, but lines ends will project out by half the line width forming a square end.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle">
      <summary>
            Represents how transitions in segments in path will look.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Mitered">
      <summary>
            At the vertex of connected line segments, the segments will be joined by projecting the outer edges of the
            segments until they intersect.  If this would produce too sharp an angle a bevel is used instead.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Rounded">
      <summary>
            At the vertex of connected line segments, the segments will be joined by a circular arc.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Beveled">
      <summary>
            At the vertex of connected line segments, the segments will be joined by connecting the outer tips of the
            segments, creating a bevel.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle">
      <summary>
            Represents all the elements that defines the style of stoked lines in PDF content.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle" /> class using the contents of the PdfLineStyle passed in.
            </summary>
      <param name="source">The source to copy from.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle" /> class.
            </summary>
      <param name="source">The source to copy from.</param>
      <param name="width">The width of the line in PDF units that will override the width in source.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle" /> class with defaults, except for the width.
            </summary>
      <param name="width">The width of the line in PDF units.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(System.Double,Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle,System.Double,System.Double[],System.Int32)">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle" /> class.
            </summary>
      <param name="width">The width of the line in PDF units.</param>
      <param name="capStyle">The line cap style.</param>
      <param name="joinStyle">The line join style.</param>
      <param name="miterLimit">The miter limit of mitered line joints.</param>
      <param name="dashPattern">The dash pattern.</param>
      <param name="dashPhase">The dash phase.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.CapStyle">
      <summary>
            Gets or sets the line cap style.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.DashPattern">
      <summary>
            Gets or sets the dash pattern used for lines.  This is an array of doubles that represents alternating on and
            off patterns of dashes in PDF units.  An empty array is a solid line.  A single number is alternated on and off (ie,
            [4] will be 4 units on, 4 units off).  More than a single number will be alternated.  Default is an empty array.
            
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.DashPhase">
      <summary>
            Gets or sets the dash phase.  This number represents at what point dashes will start in the DashPattern.  For example,
            if the DashPattern is [2, 3] and the phase is 1, the dashed line will be 1 unit on, 3 off, 2 on, 3 off, etc.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Default">
      <summary>
            Gets the default line style: 1 PDF unit wide, butt line ends, mitered joints, a miter limit of 10, no dash pattern, 0 phase.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.JoinStyle">
      <summary>
            Gets or sets the line join style.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.MiterLimit">
      <summary>
            Gets or sets the miter limit when JoinStyle is set to Mitered.  When segments join with a mitered joint at sharp
            angles, MiterLimit keeps the joints from projecting too far.  The miter length of a joint is this distance from
            the internal intersection of the line to the projected external intersection.  If the ration of the miter length to the
            line width is greater than the miter limit, the joint will be beveled.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Width">
      <summary>
            Gets or sets the width of the line in PDF units.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer">
      <summary>
            PdfPageRenderer is an abstract class that represents mechanisms for generating or rendering PDF content from
            a PdfGenerated page.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources)">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer" /> class.
            </summary>
      <param name="globalResources">The global resources that are available for this document.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.DrawingSurface">
      <summary>
            Gets or sets the drawing surface for rendering graphics or images on a PDF page.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GlobalResources">
      <summary>
            Gets the global resources that are available to a document and page that is being rendered.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GRestore">
      <summary>
            Restores the current graphics state to the last saved state by GSave.  It is an error to call GRestore without first calling
            GSave.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GSave">
      <summary>
            Performs a graphics save operation.  All current graphics state should be encapsulated and pushed on a stack for later
            retrieval.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.TextSurface">
      <summary>
            Gets or sets the text surface for rendering text content on a PDF page.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation">
      <summary>
            PdfPathOperation is a class that represents actions taken to create a path and the encapsulated data.
            PdfPathOperation objects are not constructed directly, but are instead made through static factory methods or through
            convenince methods in higher level shape objects such as PdfPath.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Action">
      <summary>
            Gets the action for this path operation.
            <example><code>
            // print out every operation in a list of PdfPathOperations
            foreach (PdfPathOpertaion op in ops) {
                string output = "";
                switch (op.Action) {
                case PathAction.Move: output = String.Format("Move({0})", op.Points[0]); break;
                case PathAction.Line: output = String.Format("Line({0})", op.Points[0]); break;
                case PathAction.Curve: output = String.Format("Curve({0}, {1}, {2})", op.Points[0], op.Points[1], op.Points[2]); break;
                case PathAction.Close: output = "Close"; break;
                }
                Console.WriteLine(output);
            }
            </code></example></summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Close">
      <summary>
            Constructs a new Close PdfPathOperation, representing a closed sub path.
            </summary>
      <returns>A new PdfPathOperation with Action set to Close.  The Points property will be empty.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Constructs a new Curve PdfPathOpertaion, representing a Bezier curve
            </summary>
      <param name="sourceControlPoint">The source control point.</param>
      <param name="destinationControlPoint">The destination control point.</param>
      <param name="destinationPoint">The destination point.</param>
      <returns>a new PdfPathoperation with Action set to Curve.  The Points property will contain three points representing the source and destination control points and the destination point, respectively.</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.DestinationPoint">
      <summary>
            Gets the destination point for a Move, Line or Curve operation.  In the case of a Curve, this returns the final
            point in the set of three as the curve will always end at that point.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Constructs a new Line PdfPathOperation to the specified point.
            </summary>
      <param name="pt">The point to connect a line to.</param>
      <returns>A new PdfPathOperation with Action set ot Line and one PdfPoint in the Points property.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.LineTo(System.Double,System.Double)">
      <summary>
            Constructs a new Line PdfPathOperation to the specified x and y coordinates.
            </summary>
      <param name="x">The x coordinate of the point.</param>
      <param name="y">The y coordinate of the point.</param>
      <returns>a new PdfPathOperation with Action set to Line and one PdfPoint in the Points property.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Constructs a new Move PdfPathOperation to the specified point.
            </summary>
      <param name="pt">The point to Move to.</param>
      <returns>a new PdfPathOperation with Action set to Move and one PdfPoint in the Points property.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.MoveTo(System.Double,System.Double)">
      <summary>
            Constructs a new Move PdfPathOperation to the specified x and y coordinates.
            </summary>
      <param name="x">The x coordinate of the point.</param>
      <param name="y">The y coordinate of the point.</param>
      <returns>a new PdfPathOperation with Action set to Move and one PdfPoint in the Points property.</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Points">
      <summary>
            Gets the points associated with this path operation.  For Move and Line operations, this list will contain one PdfPoint.
            For Curve operations, the list will contain exactly three points.  For Close operations, this list will be empty.  Changing
            the number of points in an existing PdfPathOperation object will cause unpredictable results.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer">
      <summary>
            PdfRenderer is a concrete implementation of the DocumentRenderer class.  It is responsible for creating PDF
            files/streams from PdfGeneratedDocument objects.  Most client applications concerned with creating PDF files
            will either use this class or the Save method in PdfGeneratedDocument (which in turns uses PdfRenderer).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.IO.Stream)">
      <summary>
            Creates a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer" /> class.
            </summary>
      <param name="outStream">The stream to which a PdfGeneratedDocument will be rendered.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.String,System.String,System.IO.Stream)">
      <summary>
            Creates a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer" /> class.
            </summary>
      <param name="UserPassword">The user password for the document.  Null indicates no password.</param>
      <param name="OwnerPassword">The owner password for the document.  Null indicates no password.</param>
      <param name="outStream">The output stream.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer" /> class.
            </summary>
      <param name="UserPassword">The user password.</param>
      <param name="OwnerPassword">The owner password.</param>
      <param name="outStream">The out stream.</param>
      <param name="embedGeneratedContent">if set to <c>true</c> [embed generated content].</param>
      <param name="selfPrinting">if set to <c>true</c> [self printing].</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLBeginDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            This method represents the Low-Level implementation of BeginDoc.  It is called once at the start of rendering the document
            after the first DocumentProgress event has been fired, but before the first page is rendered.  If a document has an empty
            Pages collection, LLBeginDoc will not be called.  The default implementation does nothing.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLBeginPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            Low Level the begin page.
            </summary>
      <param name="document">The document.</param>
      <param name="basePage">The base page.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLEndDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            This method represents the Low-Level implementation of EndDoc.  It is called once at the end of rendering a document after
            the final DocumentProgress event has been fired.  If a document has an empty Pages collection, LLEndDoc will not be called.
            A concrete implementation of DocumentRenderer could use this method for cleaning up temporary files created during the
            rendering process.
            </summary>
      <param name="document">The document.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLEndPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            This method represents the Low-Level implementation of EndPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to finish up after a page has been rendered. For example, a particular instance might need to
            remove temporary files created earlier.  The default implementation does nothing.
            </summary>
      <param name="document">The document being rendered.</param>
      <param name="page">The current page that was just rendered.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLGenerate(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage,Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Low Level generate.
            </summary>
      <param name="document">The document.</param>
      <param name="basePage">The base page.</param>
      <param name="renderer">The renderer.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.MakePageRenderer(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
      <summary>
            Makes the page renderer.
            </summary>
      <param name="document">The document.</param>
      <param name="basePage">The base page.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface">
      <summary>
            PdfTextSurface is used to add Text objects to the pdf display list.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.ApplyTextMatrix(Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Applies the text matrix.
            </summary>
      <param name="transform">The transform matrix.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.Begin">
      <summary>
            Begin starts the TextSurface and prepares it for writing. It must be called before using any other TextSurface operations.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.End">
      <summary>
            End completes the TextSurface. It must be called when the TextSurface is no longer needed.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetFont(System.String,System.Double,System.Boolean)">
      <summary>
            Sets the font.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="requiresUnicodeFont">if set to <c>true</c> then the font will need unicode characters.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetHorizontalScale(System.Double)">
      <summary>
            Sets the horizontal scale.
            </summary>
      <param name="scale">The scale in percentage from default (100 is the default).</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextLeading(System.Double)">
      <summary>
            Sets the text leading.
            </summary>
      <param name="leading">The text leading expressed in Pdf text points.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextPoint(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Sets the text start point.
            </summary>
      <param name="point">The text start point.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode)">
      <summary>
            Sets the text render mode.
            </summary>
      <param name="mode">The render mode.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Sets the text render mode.
            </summary>
      <param name="mode">The render mode.</param>
      <param name="fillColor">Color the text will be filled with.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Nullable{System.Double})">
      <summary>
            Sets the text render mode.
            </summary>
      <param name="mode">The render mode.</param>
      <param name="fillColor">Color the text will be filled with.</param>
      <param name="outlineColor">Color of the outline of the text.</param>
      <param name="outlineWidth">Width of the outline of the text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Sets the text render mode.
            </summary>
      <param name="mode">The render mode.</param>
      <param name="outlineColor">Color of the outline of the text.</param>
      <param name="outlineWidth">Width of the outline of the text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetWordSpace(System.Double)">
      <summary>
            Sets the word space.
            </summary>
      <param name="space">The spaceing between words.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.TextIsUnicode(System.String)">
      <summary>
            Identifies if the text is unicode or not
            </summary>
      <param name="text">The text.</param>
      <returns>True if the text requires unicode encoding</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteAdvanceLineWithNewXStartPoint(System.Double,System.String)">
      <summary>
            Writes the text line with a new X start point and inserts a newline.
            </summary>
      <param name="newXStartPos">The new X coordinate to write the line at.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteKerningPairs(System.Collections.Generic.IList{Atalasoft.PdfDoc.Generating.Utilities.KerningPair})">
      <summary>
            Writes the kerning pairs.
            </summary>
      <param name="kerningPairs">The kerning pairs.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteText(System.String)">
      <summary>
            Writes the text at the current point.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAdvanceLine(System.String)">
      <summary>
            Writes the text and inserts a newline.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAt(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Writes the text at the specified point.
            </summary>
      <param name="text">The text.</param>
      <param name="point">The point to start writing the text at.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAt(System.String,System.Double,System.Double)">
      <summary>
            Writes the text at.
            </summary>
      <param name="text">The text.</param>
      <param name="xLineOffset">The x coordinate of the point to write the text.</param>
      <param name="yLineOffset">The y coordinate of the point to write the text.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs">
      <summary>
            This class represents information about progress made during PDF Rendering.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs" /> class.  Note that this class
            is constructed during normal operation of document rendering.  There are few cases where client code
            would have to construct this.
            </summary>
      <param name="currentProgress">The current progress of the document.</param>
      <param name="total">The total progress to be made.</param>
      <param name="message">Description of the current work being done.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Message">
      <summary>
            Gets or sets a message describing current work being done.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Progress">
      <summary>
            Gets or sets the current progress.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Total">
      <summary>
            Gets or sets the total amount of work to do.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources">
      <summary>
            This class represents resources that will be used globally through one or more PDF documents being Generated.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources" /> class with new managers for each class of resource.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.ColorSpaces">
      <summary>
            Gets the color spaces.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Dispose">
      <summary>
            Disposes all the resources in all the resource maangers contained within this object.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.DisposeUnmanagedResources">
      <summary>
            Disposes the unmanaged resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Fonts">
      <summary>
            Gets the font resource manager for these global resources
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Images">
      <summary>
            Gets the images.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Merge(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier)">
      <summary>
            Merges the specified other.
            </summary>
      <param name="other">The other.</param>
      <param name="notifier">The notifier.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier">
      <summary>
            An event delegate used for alerting about successful merge renames.
            </summary>
      <param name="resourceClass">The resource class.</param>
      <param name="oldName">The old name.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.IPdfResourceConsumer">
      <summary>
            An interface to prevent renaming conflict disconnects when a resource changes names.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.IPdfResourceConsumer.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
      <summary>
            Notifies that the resource was renamed.
            </summary>
      <param name="gr">The gr.</param>
      <param name="resourceClass">The resource class.</param>
      <param name="originalName">Name of the original.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource">
      <summary>
            PdfResource is a base class for all document resources used in Generating PDF documents.
            These resource include fonts, images, page content templates, and color space definitions.
            
            Resources can represent large amounts of data that may be used by multiple pages within a document.
            By referring to them indirectly through resource managers allows the resources to be shared within
            the document.
            
            The PDF Generating toolkit defines the resource types and managers for each.  Client code will never
            need to define its own resource types.
            
            PdfResource on its own is never used except to define base capabilities and to create collection
            classes.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Dispose">
      <summary>
            Disposes the resource.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.DisposeUnmanagedResources">
      <summary>
            Disposes the unmanaged resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass">
      <summary>
            A PdfResource designation class
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Fonts">
      <summary>
            A font used for typography
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Images">
      <summary>
            An image to display on the pdf
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.ColorSpaces">
      <summary>
            A colorspace to use
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1">
      <summary>
            PdfResourceManager is a generic type that is used for defining the base capabilities and implementations
            of all classes of resource manager.
            
            Specific implementations of PdfResourceManager are defined in the PDF Generating toolkit and need not be created
            by client code.
            
            Resources are referred to by a string name.  The actual name itself is not important and will not appear directly
            in any produced PDF.  The name is used to distinguish one resource from another.  Clients may choose any name they wish
            as long as different resources of the same type have different names.
            </summary>
      <typeparam name="T">The type of resource that is to be managed, must be a subclass of PdfResource</typeparam>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1" /> class.
            </summary>
      <param name="autoPrefix">The auto prefix.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Add(System.String,`0)">
      <summary>
            Adds a resource to the resource manager.  Throws ArgumentException if a resource with the same name is already present.
            </summary>
      <param name="name">The name of the resource to add.</param>
      <param name="resource">The resource that will be added.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Add(`0)">
      <summary>
            Adds the specified resource with an auto-generated name.
            </summary>
      <param name="resource">The resource to add.</param>
      <returns>A unique name that is associated with the given resource</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Contains(System.String)">
      <summary>
            Determines whether or not the resource is present.
            </summary>
      <param name="name">The name of the resource to look up.</param>
      <returns>
        <c>true</c> if the manager contains the specified name; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Dispose">
      <summary>
            Disposes all resources contained in this resource manager
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.DisposeUnmanagedResources">
      <summary>
            Disposes the unmanaged resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Get(System.String)">
      <summary>
            Gets a resource with the given name.  Throws an exception if there is no resource present with that name.
            </summary>
      <param name="name">The name of the resource to get.</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Item(System.String)">
      <summary>
            Gets the resource with the specified s.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Merge(Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager{`0},Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier)">
      <summary>
            Merges the set of resources, other, into this ResourceManager using the selector to resolve name conflicts.
            </summary>
      <param name="other">The set of other resources to be merged.</param>
      <param name="notifier">The selector to resolve conflicts.  If selector is <c>null</c>, the original resource will be kept.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.NextName">
      <summary>
            Returns the next available auto-generated name for this resource.
            <code>
            string name = someResourceManager.NextName();
            someResourceManager.Add(name, someResource);
            </code></summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Remove(System.String)">
      <summary>
            Removes the resource of the specified name.  Throws an ArgumentException if name is not present.
            </summary>
      <param name="name">The name of the resource to remove.</param>
      <returns>The resource associated with name.</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourceClass">
      <summary>
            Gets the resource class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourceNames">
      <summary>
            Gets the resource names for this resource manager.
            <example><code>
            foreach (string name in globalResources.Images.ResourceNames) {
                Console.WriteLine("resource name: " + name);
            }
            </code></example></summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourcesMatch(`0,`0)">
      <summary>
            Resourceses the match.
            </summary>
      <param name="one">The first resource.</param>
      <param name="two">The second resource.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.TryGet(System.String,`0@)">
      <summary>
            Tries to get the specified resource.
            </summary>
      <param name="name">The name of the resource to get.</param>
      <param name="value">The resource retrieved.</param>
      <returns>
        <c>true</c> if name is present; <c>false</c>otherwise.</returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection">
      <summary>
            The handler for duplicate entries coming into the ResourceManager
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection.KeepOriginal">
      <summary>
            Keep the original discard the new
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection.OverwriteWithNew">
      <summary>
            Discard the original keep the new
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource">
      <summary>
            A concrete calibrated grayscale color resource
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource" /> class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource.Gamma">
      <summary>
            Gets or sets the gamma.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource">
      <summary>
            A generic calibrated color space
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.#ctor(Atalasoft.PdfDoc.Generating.PdfColorSpaceType,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="components">The components.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.BlackPoint">
      <summary>
            Gets the black point.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.ThrowOnGammaOutOfRange(System.Double,System.String)">
      <summary>
            Throws the on gamma out of range.
            </summary>
      <param name="gamma">The gamma.</param>
      <param name="propname">The propname.</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.WhitePoint">
      <summary>
            Gets the white point.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource">
      <summary>
            A Calibrated color space as a resource.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource" /> class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.BlueGamma">
      <summary>
            Gets or sets the blue gamma.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.ComponentMatrix">
      <summary>
            Gets the component matrix.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.Gammas">
      <summary>
            Gets the gammas.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.GreenGamma">
      <summary>
            Gets or sets the green gamma.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.RedGamma">
      <summary>
            Gets or sets the red gamma.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager">
      <summary>
            Manages the pdf color space resources
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromBytes(System.Byte[])">
      <summary>
            Adds from bytes.
            </summary>
      <param name="data">The data.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromFile(System.String)">
      <summary>
            Adds from file.
            </summary>
      <param name="path">The path.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromStream(System.IO.Stream,System.Boolean)">
      <summary>
            Adds from stream.
            </summary>
      <param name="stm">The STM.</param>
      <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultCmykColorSpace">
      <summary>
            Gets or sets the default cmyk color space.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultGrayColorSpace">
      <summary>
            Gets or sets the default gray color space.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultRgbColorSpace">
      <summary>
            Gets or sets the default RGB color space.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromBytes(System.Byte[])">
      <summary>
            Froms the bytes.
            </summary>
      <param name="data">The data.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromFile(System.String)">
      <summary>
            Froms the file.
            </summary>
      <param name="path">The path.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromStream(System.IO.Stream,System.Boolean)">
      <summary>
            Froms the stream.
            </summary>
      <param name="stm">The STM.</param>
      <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.ResourceClass">
      <summary>
            Gets the resource class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.ResourcesMatch(Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource)">
      <summary>
            Resourceses the match.
            </summary>
      <param name="one">The one.</param>
      <param name="two">The two.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource">
      <summary>
            A resource representing a color space for use in a pdf image.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.#ctor(Atalasoft.PdfDoc.Generating.PdfColorSpaceType)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.ColorSpaceType">
      <summary>
            Gets or sets the type of the color space.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.IsCalibrated">
      <summary>
            Gets or sets a value indicating whether this instance is calibrated.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource">
      <summary>
            A class representing an ICC complient color space for use in pdf
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource" /> class.
            </summary>
      <param name="profile">The profile.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource" /> class.
            </summary>
      <param name="stm">The STM.</param>
      <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction">
      <summary>
            Describes an anction to take in response to a request to embed a font.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.Embed">
      <summary>
            Embed the font within the PDF
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.DontEmbed">
      <summary>
            Do not embed the font within the PDF
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.ThrowException">
      <summary>
            Throw an exception instead of embedding the font
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission">
      <summary>
            This enumeration describes possible permissions for embedding a TrueType font.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.Unrestricted">
      <summary>
            The font may be embedded in a PDF with no restrictions
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.ForbiddenWithoutPermission">
      <summary>
            The font may not be embedded in a PDF unless client code has been granted permission from the font's creator
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.PreviewAndPrint">
      <summary>
            The font may be embedded in a PDF, but only for previewing and printing actions.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.NoSubsetting">
      <summary>
            The font may be embedded in a PDF, but only in its entirety
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.Editable">
      <summary>
            The font may be embedded in a PDF and the document may be editable.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy">
      <summary>
            When a font needs to be embedded in a PDF document, client code will be called in order to determine what action
            to take.  Client code will return an object of PdfFontEmbeddingPolicy which will be used to enact that action.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction)">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy" /> class.
            </summary>
      <param name="action">The action to take on a font embedding request.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction,System.Exception)">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy" /> class.
            </summary>
      <param name="action">The action to take on a font embedding request.</param>
      <param name="exception">An exception to throw if the action is set to PdfFontEmbeddingAction.ThrowException.  If exception is null, a PdfException will be thrown.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.Action">
      <summary>
            Gets or sets the action to take on a font embedding request.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.ExceptionToThrow">
      <summary>
            Gets or sets the exception to throw when action is set to PdfFontEmbeddingAction.ThrowException.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicyProvider">
      <summary>
            This delegate represents a method of function that will be called when a request has come to embed a particular font within a PDF.
            Client code will be passed a font resource and the embedding permissions that are contained within the font's data.  The permissions describe
            the circumstances under which the font may be embedded.  It is up to client code to respect these permissions.
            </summary>
      <param name="resource">The font resource that is needs an embedding policy.</param>
      <param name="permissions">The permissions for the font resource.</param>
      <returns>A new PdfFontEmbeddingPolicy describing the embedding action to take for this font.</returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager">
      <summary>
            PdfFontManager is a class that is used by the GlobalResources class to maintain and manage fonts within PDF
            documents.  In addition to tracking which fonts are requested, PdfFontManager also handles policy decisions
            for embedding fonts in PDF files.
            
            The choice to embed a font or not depends upon the circumstances.  For example, some fonts may publish that they are not
            to be embedded without permission from the creator.  Since the PDF Generating toolkit can't know if client code has 
            permission for a given font, the action to be taken for embedding should be provided by client code where possible.
            
            The PdfFontManager contains a default policy which embeds the font when the permissions are PreviewAndPrint,
            Unrestricted, NoSubsetting, and Editable.  In all other cases it will throw an exception.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager" /> class and sets its default embedding policy.
            A PdfFontManager is constructed for client code in the GlobalResources class. Client code will rarely if ever
            need to construct this class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddFromFile(System.String)">
      <summary>
            Adds a new font resource using a new unique name from from a path to a true type font file.
            </summary>
      <param name="path">The path to a true type font file.</param>
      <returns>A unique name that is associated with the new font resource</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddFromFontName(System.String)">
      <summary>
            Adds a new font resource using a new unique named from the name of an installed font.
            </summary>
      <param name="name">The name of the font to add.</param>
      <returns>A unique name that is associated with the new font resource</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddStream(System.IO.Stream,System.Boolean)">
      <summary>
            Adds a new font resource using a new unique name from a stream that contains a true type font.
            </summary>
      <param name="stm">The stream that contains the true type font.</param>
      <param name="closeOnDispose">if set to <c>true</c> the stream when the resource is disposed.</param>
      <returns>A unique name that is associated with the new font resource</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.DefaultEmbeddingPolicyProvider">
      <summary>
            Gets the default embedding policy provider for the font manager.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.EmbeddingPolicyProvider">
      <summary>
            Gets or sets the embedding policy provider for the font resource manager.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromFile(System.String)">
      <summary>
            Constructs a new PdfFontResource from the path to a true type file.
            </summary>
      <param name="path">The path to the file that contains the font.</param>
      <returns>A new PdfFontResource representing the font.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromFontName(System.String)">
      <summary>
            Constructs a new PdfFontResource from the name of a font.
            </summary>
      <param name="name">The name of an installed font.</param>
      <returns>A new PdfFontResource representing the font.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromStream(System.IO.Stream,System.Boolean)">
      <summary>
            Constructs a new PdfFontResource from a stream that contains a true type font.
            </summary>
      <param name="stm">The stream that contains the font.</param>
      <param name="closeOnDispose">if set to <c>true</c> clost the stream when the resource is disposed.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.GetEmbeddingPolicy(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission)">
      <summary>
            Gets the embedding policy for a particular font.  This method will be called by DocumentRenderer objects or
            PDF writer objects.  There is typically no need to call it from client code.  Calling this method from client code
            will not affect how any given font is embedded.
            </summary>
      <param name="resource">The font resource that is being considered for embedding.</param>
      <param name="permission">The permission published by that font for embedding.</param>
      <returns>A new PdfFontEmbeddingPolicy represention an action to take for embedding the font.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.RebuildAvailableFontList">
      <summary>
            When new font resources are constructed by font name (instead of using the font stream directly), the font manager
            uses a cached list of installed fonts on the client computer to avoid having to repeatedly search the available resources.
            An application should call this method if it wishes to invalidate the list.  This would allow an application to be aware
            of new fonts installed while the application is running at the cost of some performance.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.ResourceClass">
      <summary>
            Gets the resource class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics">
      <summary>
            This class contains tools for measuring text that is to be placed in a page in a PDF document.  Concrete versions of this
            class are constructed behind the scenes for client code.  It is unlikely that client code would ever need to create or
            construct a concrete version of this class.  FontBounds, Ascent, Descent, and Leading are measured in PDF font design units, in which
            glyph coordinates are laid out in a design grid that is 1000 units by 1000 units.  In practice, glyphs will go outside this
            grid for descender and for glyphs that project to the left (swashes, for example).  To convert these numbers to a particular point
            size, use this formula: final size = (size in PDF design units x font size in points) / 1000
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Ascent">
      <summary>
            Gets the ascent of the font in PDF font design units.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Descent">
      <summary>
            Gets the descent of the font in PDF font design units.  The Descent is the distance that the font extends below the baseline of the font.  Descent is usually negative.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.FontBounds">
      <summary>
            Gets the smallest bounding box that can surround all glyphs within the font.  Units are in PDF font design units.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetCharMetrics(System.Char,Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Gets the metrics for a given character using the specified transform.  This method is implemented by concrete
            instances of PdfFontMetrics.  Client code will not typically create subclasses of PdfFontMetrics.
            </summary>
      <param name="c">The character to measure.</param>
      <param name="fontTransfrom">The font transfrom.</param>
      <returns>The advance width for the given character.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetTextBounds(System.Double,System.String)">
      <summary>
            Gets bounding box that surrounds the text.
            </summary>
      <param name="pointSize">Size of the font in points.</param>
      <param name="text">The text to be measured.</param>
      <returns>
            descent plus its ascent.  Vertical writing systems are not currently supported.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetTextBounds(System.Double,System.String,System.Int32,System.Int32)">
      <summary>
            Gets bounding box that surrounds the text.
            </summary>
      <param name="pointSize">Size of the font in points.</param>
      <param name="text">The text to be measured.</param>
      <param name="start">The start index of text to measure.</param>
      <param name="length">The number of characters to measure.</param>
      <returns>A new PdfBounds object that represents the bounds of the text in points.  X will be 0.  Width will be the
            absolute value of the width of the string. Y will be the negative of the font's Descent.  Height will be the font's
            descent plus its ascent.  Vertical writing systems are not currently supported.</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Leading">
      <summary>
            Gets the recommended leading for this font in PDF font design units.  This should be the height of the gap
            between lines, not the distance between baselines of successive lines.  The distance between successive lines
            will be Ascent - Descent + Leading.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.MeasureText(System.Double,System.String)">
      <summary>
            Measures the given text in the procided font size in points.
            </summary>
      <param name="pointSize">Size of the font in points.</param>
      <param name="text">The text to be measured.</param>
      <returns>The size of the text provided.  In practice, this measurement represents what is known as the Advance Width of a given
            string.  The is the amount and the direction that the text origin would be moved by placing the text.  If the font represents a left to
            right writing system, the X value of the returned point will be set to "width" of the text and the Y value will be 0.  Vertical writing systems
            are not currently supported.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.MeasureText(System.Double,System.String,System.Int32,System.Int32)">
      <summary>
            Measures the given text in the provided font size in points.
            </summary>
      <param name="pointSize">Size of the font in points.</param>
      <param name="text">The text to be measured.</param>
      <param name="start">The start index of text to measure.</param>
      <param name="length">The number of characters to measure.</param>
      <returns>The size of the text provided.  In practice, this measurement represents what is known as the Advance Width of a given
            string.  The is the amount and the direction that the text origin would be moved by placing the text.  If the font represents a left to
            right writing system, the X value of the returned point will be set to "width" of the text and the Y value will be 0.  Vertical writing systems
            are not currently supported.</returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource">
      <summary>
            PdfFontResource represents a typographic font that will be used for placing text on a page in
            a PDF document.  This object represents the font as a whole and not a rendering of the font in a
            specific size.  Font resources represent a single style of the font and not a family of fonts.
            For example, Basketball Overextended and Basketball Overextended Bold are considered to be two
            different fonts, even if conceptually they are in the same family.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource" /> class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FontFamily">
      <summary>
            Gets the name of the font's family.  For example, the font Armageddon Light would have the FontFamily "Armageddon"
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FontSubFamily">
      <summary>
            Gets the font sub family name such as "Bold" or "Condensed".
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.Metrics">
      <summary>
            Gets the an object that can be used for measuring text in the font.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode">
      <summary>
            The mode with which to render text
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillText">
      <summary>
            Fill the text with the current fill color (Default).
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.StrokeText">
      <summary>
            Draw the outline of the text based on the linewidth.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillThenStrokeText">
      <summary>
            Fill the text then draw the outline based on the linewidth.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.Invisible">
      <summary>
            Draw nothing
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillTextAndClip">
      <summary>
            Fill the text and set the clip region to the text
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.StrokeTextAndClip">
      <summary>
            Strokes the text and sets the clip region to the text
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillStrokeTextAndClip">
      <summary>
            Both fills and clips the text and sets the clip region
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.Clip">
      <summary>
            Sets the clip region to the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor">
      <summary>
            A compressor for Gdi Images
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.CanCompress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill)">
      <summary>
            Determines whether this instance can compress the specified o.
            </summary>
      <param name="o">The o.</param>
      <param name="skill">The skill.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.Compress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression)">
      <summary>
            Compresses the specified o.
            </summary>
      <param name="o">The o.</param>
      <param name="streamProvider">The stream provider.</param>
      <param name="compression">The compression.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.GetImageInformation(System.Object,System.String)">
      <summary>
            Gets the image information.
            </summary>
      <param name="o">The o.</param>
      <param name="colorSpaceResourceName">Name of the color space resource.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider">
      <summary>
            The provider for bitmap image data
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.#ctor(System.Drawing.Bitmap,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider" /> class.
            </summary>
      <param name="bm">The bm.</param>
      <param name="invert">if set to <c>true</c> [invert].</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.#ctor(System.Drawing.Imaging.BitmapData,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider" /> class.
            </summary>
      <param name="data">The data.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Begin">
      <summary>
            Begins this instance.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.End">
      <summary>
            Ends this instance.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Gets the row.
            </summary>
      <param name="y">The y.</param>
      <param name="destBuffer">The dest buffer.</param>
      <param name="destOffset">The dest offset.</param>
      <param name="totalBytes">The total bytes.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Height">
      <summary>
            Gets or sets the height.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill">
      <summary>
            The style of image handling to use
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.Perfect">
      <summary>
            Do not change information at all
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.IncreaseInformation">
      <summary>
            Only increase information
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.ReduceInformation">
      <summary>
            Only reduce information
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor">
      <summary>
            An interface for compressing pdf images
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.CanCompress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill)">
      <summary>
            Determines whether this instance can compress the specified o.
            </summary>
      <param name="o">The o.</param>
      <param name="skill">The skill.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.Compress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression)">
      <summary>
            Compresses the specified o.
            </summary>
      <param name="o">The o.</param>
      <param name="streamProvider">The stream provider.</param>
      <param name="compression">The compression.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.GetImageInformation(System.Object,System.String)">
      <summary>
            Gets the image information.
            </summary>
      <param name="o">The o.</param>
      <param name="colorSpaceResourceName">Name of the color space resource.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider">
      <summary>
            An interface used for generating streams from stored locations
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider.MakeStream">
      <summary>
            Makes the required stream.
            </summary>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider">
      <summary>
            A stream for handling images from a MemoryStream
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider.MakeStream">
      <summary>
            Makes the required stream.
            </summary>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression">
      <summary>
            The settings class for CCITT (group 4) compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider">
      <summary>
            Used to decompress image streams from existing pdf into PdfImageResource
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider" /> class.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="maskStream">The mask stream.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider" /> class.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="maskStream">The mask stream.</param>
      <param name="isSoftMask">if set to <c>true</c> [is soft mask].</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.CloseImageStream(System.IO.Stream)">
      <summary>
            Closes the image stream.
            </summary>
      <param name="stm">The STM.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.CloseMaskStream(System.IO.Stream)">
      <summary>
            Closes the mask stream.
            </summary>
      <param name="stm">The STM.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Dispose">
      <summary>
            Disposes the resource.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.DisposeUnmanagedResources">
      <summary>
            Disposes the unmanaged resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.HasImage">
      <summary>
            Gets a value indicating whether this instance has image.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.HasMask">
      <summary>
            Gets a value indicating whether this instance has mask.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.IsSoftMask">
      <summary>
            Gets a value indicating whether this instance is soft mask.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.OpenImageStream">
      <summary>
            Opens the image stream.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.OpenMaskStream">
      <summary>
            Opens the mask stream.
            </summary>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails">
      <summary>
            The settings for Dct encoded images in generated pdfs
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails" /> class.
            </summary>
      <param name="quality">The quality.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails.Quality">
      <summary>
            Gets the quality.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression">
      <summary>
            The compression settings for Dct compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression" /> class.
            </summary>
      <param name="quality">The quality.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.DefaultQuality">
      <summary>
            Gets the default quality.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression">
      <summary>
            Settings for Flate Compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails">
      <summary>
            A class to hold codec details
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails" /> class</summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo">
      <summary>
            PdfImageColorSpaceInfo is a class that is used to describe the color representation
            of an image in a PDF document.  This includes the color space of the image (red, green, blue for example)
            as well as the number of channels in the image and an optional associated color space resource for
            associating calibrated colors with the image. This class is constructed for client code during the
            process of converting an image into an image resource and there is no reason to construct it directly.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo" /> class.
            </summary>
      <param name="space">The space.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo" /> class.
            </summary>
      <param name="space">The space.</param>
      <param name="colorSpaceResource">The color space resource.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace,System.String,System.Collections.Generic.IList{Atalasoft.PdfDoc.Generating.IPdfColor})">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo" /> class.
            </summary>
      <param name="space">The space.</param>
      <param name="colorSpaceResource">The color space resource.</param>
      <param name="palette">The palette.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.Channels">
      <summary>
            Gets the channels.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.ColorSpace">
      <summary>
            Gets the color space.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.ColorSpaceResourceName">
      <summary>
            Gets or sets the name of the color space resource.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.Palette">
      <summary>
            Gets the palette.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression">
      <summary>
            An object used to set the image compression used in an image resource.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.#ctor(Atalasoft.PdfDoc.PdfImageCodec,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression" /> class.
            </summary>
      <param name="codec">The codec.</param>
      <param name="details">The details.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.Codec">
      <summary>
            Gets the codec.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.Details">
      <summary>
            Gets the details.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompressionSelector">
      <summary>
            The event delegate that is called when it is time to select image compression
            </summary>
      <param name="codecs">The codecs.</param>
      <param name="info">The info.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation">
      <summary>
            Information about a pdf image
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation" /> class.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="channels">The channels.</param>
      <param name="bitsPerChannel">The bits per channel.</param>
      <param name="compression">The compression.</param>
      <param name="colorSpace">The color space.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.BitsPerChannel">
      <summary>
            Gets the bits per channel.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Channels">
      <summary>
            Gets the channels.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.ColorSpace">
      <summary>
            Gets the color space.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Compression">
      <summary>
            Gets the compression.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Height">
      <summary>
            Gets the height.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Width">
      <summary>
            Gets the width.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager">
      <summary>
            The resource manager for images
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.Object)">
      <summary>
            Adds the image.
            </summary>
      <param name="o">The o.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.Object,System.String)">
      <summary>
            Adds the image.
            </summary>
      <param name="o">The o.</param>
      <param name="colorSpaceResourceName">Name of the color space resource.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.String,System.Object)">
      <summary>
            Adds the image.
            </summary>
      <param name="name">The name.</param>
      <param name="o">The o.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.String,System.Object,System.String)">
      <summary>
            Adds the image.
            </summary>
      <param name="name">The name.</param>
      <param name="o">The o.</param>
      <param name="colorSpaceResourceName">Name of the color space resource.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.CompressionSelector">
      <summary>
            Gets or sets the compression selector.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.Compressors">
      <summary>
            Gets the compressors.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.DctQuality">
      <summary>
            Gets or sets the DCT quality.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.FromImage(System.Object)">
      <summary>
            Froms the image.
            </summary>
      <param name="o">The o.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.FromImage(System.Object,System.String)">
      <summary>
            Froms the image.
            </summary>
      <param name="o">The o.</param>
      <param name="colorSpaceResourceName">Name of the color space resource.</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.JpxQuality">
      <summary>
            Gets or sets the JPX quality.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.ResourceClass">
      <summary>
            Gets the resource class.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.StreamProvider">
      <summary>
            Gets or sets the stream provider.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource">
      <summary>
            A resource for pdf creation that is an image.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.ImageInfo">
      <summary>
            Gets the image info.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.ImageProvider">
      <summary>
            Gets the image provider.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression">
      <summary>
            The Jbig2 settings for pdf images
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails">
      <summary>
            The settings for the pdf jpeg2000 codec
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails" /> class.
            </summary>
      <param name="quality">The quality.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails.Quality">
      <summary>
            Gets the quality.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression">
      <summary>
            The settings for Jpeg2000 image compression for a PdfImageResource
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression" /> class.
            </summary>
      <param name="quality">The quality.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression">
      <summary>
            The settings for Lzw compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression">
      <summary>
            The settings for no compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression">
      <summary>
            The settings for run length image compression
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression" /> class.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream">
      <summary></summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Acquire">
      <summary>
            Acquires a stream.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.CanCloseStream">
      <summary>
            Determines whether this instance [can close stream].
            </summary>
      <returns>
        <c>true</c> if this instance [can close stream]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Dispose">
      <summary>
            Disposes the resource.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.DisposeManagedResources">
      <summary>
            Disposes the managed resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.DisposeUnmanagedResources">
      <summary>
            Disposes the unmanaged resources.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.LLAquire">
      <summary>
            LowLLevel aquire.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.LLRelease(System.IO.Stream)">
      <summary>
            Low Level release.
            </summary>
      <param name="stm">The STM.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Release">
      <summary>
            Releases the stream.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider">
      <summary>
            A stream provider for temporary files
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider.MakeStream">
      <summary>
            Makes the required stream.
            </summary>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1">
      <summary>
            This object represents the information provided on an Add or Remove event to an ObservableList.
            </summary>
      <typeparam name="T">The type of the object in the list under observation.</typeparam>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.#ctor(`0,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1" /> class.
            </summary>
      <param name="item">The item.</param>
      <param name="isAdd">if set to <c>true</c> [is add].</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.IsAdd">
      <summary>
            Gets a value indicating whether this instance is an add event or a remove event.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.Item">
      <summary>
            Gets the item that is being added or removed.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox">
      <summary>
            DynamicPdfTextBox is a text shape that is used to take a variable amount of space. By providing a maximum height and maximum width and the text instructions, the DynamicPdfTextBox will provide the minimum amount of space required to display the information through its MinimumBounds property.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox" /> class.
            </summary>
      <param name="startPoint">The start point.</param>
      <param name="width">The width.</param>
      <param name="maximumHeight">The maximum height.</param>
      <param name="text">The styled text input.</param>
      <param name="manager">The manager.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.String,System.Double,System.Double,System.Double,System.String,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox" /> class.
            </summary>
      <param name="startPoint">The start point.</param>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="width">The width.</param>
      <param name="maximumHeight">The maximum height.</param>
      <param name="text">The text.</param>
      <param name="manager">The manager.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.LockedWidth">
      <summary>
            Gets the width of the box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.MaximumHeight">
      <summary>
            Gets the maximum height of the box.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.MinimumBounds">
      <summary>
            Gets the minimum bounds of the box calculated from the given text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.GRestore">
      <summary>
            A displaylist level GRestore operation for generating pdf
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GRestore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.GRestore" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.GRestore.Name">
      <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GRestore.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
      <param name="r"></param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.GSave">
      <summary>
            A drawinglist level call to GSave
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GSave.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.GSave" /> class</summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.GSave.Name">
      <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GSave.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
      <param name="r"></param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.IPdfTextContainer">
      <summary>
            An interface for shapes that contain text.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.IPdfTextContainer.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1">
      <summary>
            Represents a list that generates events when objects are being added or removed.
            Hooking into the ItemChanged event will allow an application to observe when an item
            has been added or removed.  On a set operation through the array accessor both a remove
            and add event are fired.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />. Fires an ItemChanged "add" event.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  Fires ItemChanged "remove"
            events for every item in the list.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
            -or-
              <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            -or-
            Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
              </exception>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
              </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.  Fires the
            ItemChanged event with an "add".
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
              </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
              </exception>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
              </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.  Fires an ItemChanged event with a "remove" and then an "add".
            </summary>
      <returns>
            The element at the specified index.
              </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
              </exception>
      <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
              </exception>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.ItemChanged">
      <summary>
            Event for hooking to the list to observe add/remove operations
            <code>
            list.ItemChanged += new EventHandler&lt;AddRemoveEventArgs&lt;MyItemType&gt;&gt;(MyEventHandler);
            </code></summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.OnItemChanged(Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs{`0})">
      <summary>
            Raises the <see cref="E:ItemChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1" /> instance containing the event data.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            Fires the ItemChanged event with a "remove".
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.RemoveAll(System.Predicate{`0})">
      <summary>
            Removes all the elements in the list for which pred returns true.  Note that each element will be visited twice.
            <code>
            list.RemoveAll(shape =&gt; shape is PdfPath); // remove all paths from the list
            </code></summary>
      <param name="pred">The pred.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index. Fires the ItemChanged event with
            a "remove".
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
              </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
              </exception>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle">
      <summary>
            The style of how the text is broken to apply to the path.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle.Letter">
      <summary>
            break per letter
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle.Word">
      <summary>
            break per word
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc">
      <summary>
             A Shape class for PdfGeneratedDocuments which draws Arcs, Chords and Pie segments.
             </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc" /> class.
            </summary>
      <param name="center">The center of the circle that is used to generate the arc</param>
      <param name="radius">The radius.</param>
      <param name="startAngle">The start angle.</param>
      <param name="endAngle">The end angle.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc" /> class.
            </summary>
      <param name="center">The center of the circle that is used to generate the arc</param>
      <param name="radius">The radius of the circle that is used to generate the arc</param>
      <param name="startAngle">The start angle of the arc</param>
      <param name="endAngle">The end angle</param>
      <param name="outlineColor">Color of the outline</param>
      <param name="linewidth">The width of the drawn lines</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc" /> class.
            </summary>
      <param name="center">The center of the circle that is used to generate the arc</param>
      <param name="radius">The radius of the circle that is used to generate the arc</param>
      <param name="startAngle">The start angle of the arc</param>
      <param name="endAngle">The end angle of the arc</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The width of drawn lines.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Center">
      <summary>
            Gets or sets the center.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Clockwise">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc" /> is clockwise.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.EndAngle">
      <summary>
            Gets or sets the end angle.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.IncludeWedge">
      <summary>
            Gets or sets a value indicating whether to include the wedge of the arc.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.StartAngle">
      <summary>
            Gets or sets the start angle.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape">
      <summary>
            A base class for any repeatable composite drawing action. To use this class inherit from PdfBaseShape then override the CloneInstance and DrawShape methods to get the PdfPageRenderer object.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape" /> class.
            </summary>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape" /> class.
            </summary>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The width of outlines.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape" /> class.
            </summary>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The width of outlines.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Clip">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape" /> shape will clip.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.CopyBaseShapePropertiesTo(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape,System.Boolean)">
      <summary>
            Copies the base shape properties to the parameter shape.
            </summary>
      <param name="other">The parameter shape.</param>
      <param name="copyTransform">if set to <c>true</c> [copy transform].</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.FillColor">
      <summary>
            Gets or sets the color of the fill.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.GenerateTransform">
      <summary>
            Generates the default transform based on Scale, Rotate, and Translate.
            </summary>
      <returns>the PdfTransform based on the Scale, Rotate, and Translate properties.</returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Location">
      <summary>
            Gets or sets the location.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Name">
      <summary>
            Gets or sets the name of the IPdfRenderable object.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
      <summary>
            Notifies that the resource was renamed.
            </summary>
      <param name="gr">The gr.</param>
      <param name="resourceClass">The resource class.</param>
      <param name="originalName">Name of the original.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
      <summary>
            Called when [resource renamed].
            </summary>
      <param name="gr">The gr.</param>
      <param name="resourceClass">The resource class.</param>
      <param name="originalName">Name of the original.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.OutlineColor">
      <summary>
            Gets or sets the color of the outline.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates the PDF.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Style">
      <summary>
            Gets or sets the style.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape">
      <summary>
            The base class for making pdf text shapes. It provides the basic settings to control fonts and transformations automatically.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape" /> class.
            </summary>
      <param name="copy">The PdfBaseTextShape to copy from.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape" /> class.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape" /> class.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="lineWidth">Width of the line.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.FontName">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.FontSize">
      <summary>
            Gets or sets the size of the font.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.GetTextStartOffset(System.Double,System.Double)">
      <summary>
            Gets the text start offset for a line of text. This is used to align text based on the alignment.
            </summary>
      <param name="textLength">Length of the text.</param>
      <param name="spaceLength">Length of the space.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.GetTextStartOffset(System.Double,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment)">
      <summary>
            Gets the text start offset for a line of text. This is used to align text based on the alignment.
            </summary>
      <param name="textLength">Length of the text.</param>
      <param name="spaceLength">Length of the space.</param>
      <param name="alignment">The alignment.</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.HorizontalScaling">
      <summary>
            Gets or sets the horizontal scaling.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates the PDF display list objects.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.RenderMode">
      <summary>
            Gets or sets the render mode.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.WordSpacing">
      <summary>
            Gets or sets the word spacing.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle">
      <summary>
             A PdfBaseShape overload which draws a circle based on a center point and a radius.
             </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle" /> class.
            </summary>
      <param name="center">The center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="fillColor">Color of the fill of the circle.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle" /> class.
            </summary>
      <param name="center">The center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="outlineColor">Color of the outline of the circle.</param>
      <param name="linewidth">The linewidth of the outline of the circle.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle" /> class.
            </summary>
      <param name="center">The center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="outlineColor">Color of the outline of the circle.</param>
      <param name="linewidth">The linewidth of the outline of the circle.</param>
      <param name="fillColor">Color of the fill of the circle.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.Center">
      <summary>
            Gets or sets the center.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine">
      <summary>
            A pdf text object which writes text and clips to a rectangle. This object is best used to make spreadsheet like trimming of long strings to fit into a cell of a table.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.#ctor(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine" /> class while intelligently figuring out fontsize and positioning.
            </summary>
      <param name="text">The text.</param>
      <param name="fontName">Name of the font.</param>
      <param name="bounds">The bounds.</param>
      <param name="manager">The manager.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine" /> class.
            </summary>
      <param name="text">The text.</param>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="textStartPoint">The text start point.</param>
      <param name="clipBounds">The clip bounds.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.ClipBounds">
      <summary>
            Gets or sets the clip bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates the PDF display list objects.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape">
      <summary>
            The shape used to place an image on a page
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape" /> class.
            </summary>
      <param name="imageName">Name of the image.</param>
      <param name="bounds">The bounds.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.Bounds">
      <summary>
            Gets or sets the bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.ImageName">
      <summary>
            Gets or sets the name of the image.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
      <summary>
            Called when [resource renamed].
            </summary>
      <param name="gr">The gr.</param>
      <param name="resourceClass">The resource class.</param>
      <param name="originalName">Name of the original.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath">
      <summary>
            A PdfBaseShape that contains a series of operations to define a custom drawing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath" /> class.
            </summary>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath" /> class.
            </summary>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The width of the outlines of the shape.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath" /> class.
            </summary>
      <param name="outlineColor">Color of the outline of the shape.</param>
      <param name="linewidth">The width of outlines of the shape.</param>
      <param name="fillColor">Color of the fill if the shape.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath" /> class.
            </summary>
      <param name="s">the object to copy from</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.Close">
      <summary>
            Closes the path to the previous MoveTo command.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Curves to the destination point from the previous point using the sourceControlPoint and destinationControl point to render the curve
            </summary>
      <param name="sourceControlPoint">The source control point.</param>
      <param name="destinationControlPoint">The destination control point.</param>
      <param name="destinationPoint">The destination point.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.FillMethod">
      <summary>
            Gets or sets the fill method.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Draws a line from the current drawing point to the parameter
            </summary>
      <param name="p">The point to draw a line to.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.LineTo(System.Double,System.Double)">
      <summary>
            Draws a line from the current drawing point to (x, y)
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Sets the current drawing point to the parameter
            </summary>
      <param name="p">The point to move to.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.MoveTo(System.Double,System.Double)">
      <summary>
            Sets the current drawing point to (x, y)
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle">
      <summary>
            A PdfBaseShape to draw a Rectangle.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rectangle.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rectangle.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The linewidth of the outline.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rectangle.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="linewidth">The linewidth of the outline.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.Bounds">
      <summary>
            Gets or sets the bounds of the rectangle.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle">
      <summary>
            A PdfBaseShape for making RoundedRectangles
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rounded rectangle.</param>
      <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rounded rectangle.</param>
      <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
      <param name="fillColor">Color of the fill.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="lineWidth">Width of the line.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle" /> class.
            </summary>
      <param name="bounds">The bounds of the rounded rectangle.</param>
      <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="lineWidth">Width of the line.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.Bounds">
      <summary>
            Gets or sets the bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.CurveRadius">
      <summary>
            Gets or sets the curve radius.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox">
      <summary>
            An object to output styled text to a PdfGeneratedDocument.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox" /> class. Add text to the box using the Fill method.
            </summary>
      <param name="defaultFontName">Name of the default font.</param>
      <param name="bounds">The bounds of the text object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Bounds">
      <summary>
            Gets or sets the bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Fill(Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
      <summary>
            Fills the specified input. This method must be called before the shape attempts to draw. This is what fills the styled text shape with content.
            </summary>
      <param name="input">The input.</param>
      <param name="manager">The manager.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable">
      <summary>
             An object to output object data in a table format to a PdfGeneratedDocument.    
             </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable" /> class.
            </summary>
      <param name="tableBounds">The bounds of the table</param>
      <param name="defaultFontName">Name of the default font</param>
      <param name="defaultFontSize">Default font size</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.ActualHeight">
      <summary>
            returns the height of the filled table. 
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.AddRows(System.Collections.IEnumerator)">
      <summary>
            Add row data to the table. Pass an enumerator for a collection of items.  Can also be an enumerator of a List&lt;Dictionary&lt;string,string&gt;&gt; object.
            </summary>
      <param name="en">An enumerator for the data collection</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderColor">
      <summary>
            Gets/sets the color to draw the border grid lines.        
            The default border color is black.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderStyle">
      <summary>
            The border style for the table. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle" />
            The default border style is None.
            Border options are: Grid,Vertical,Horizontal,Outline, None.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderWidth">
      <summary>
            Gets/sets the width the border should be drawn. This applies to all the lines that are drawn for the table
            The default border width is 1.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Bounds">
      <summary>
            Gets/sets the bounds for the table
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Clone">
      <summary>
            Copy the PdfTable object to a new instance. 
            Reuses the Font Resource manager. Reuses the Ta
            Does not copy table rows.
            </summary>
      <returns>
        <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable" />
      </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Columns">
      <summary>
            Returns the columns already set for the PdfTable. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /></summary>
      <returns>List of  columns set for the table. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Fill(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
      <summary>
            Fills the specified table with rows using the PdfTableInput enumerator 
            This method must be called before the table attempts to render. This fills the table with the rows provided,
            it will stop at the point the table bounds height has been reached.
            </summary>
      <param name="fontManager">The font manager to use for resources.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.FontName">
      <summary>
            Gets/sets the name of the font to be used
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.FontSize">
      <summary>
            Gets/sets the size of the font.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.HasMoreRows">
      <summary>
             Returns true if there are more rows to draw for the table. Check this after the Fill() method to see if all the rows were written to the table.
             </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.LineHeight">
      <summary>
            Gets/sets the height of each row in the table.
            If text has multiple lines the row height will be multiplied by the number of lines.
            The default row height is calculated based on the font type and font size specified.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Name">
      <summary>
            Gets/sets the name of the IPdfRenderable object.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates the PDFTable. Draws each row in the table
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.ShowColumnHeadingRow">
      <summary>
            Get/sets whether to draw the a heading row for the table. Default is true.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.TextPaddingLeft">
      <summary>
            The padding from the left margin to the start of the text. This will apply to the entire table. 
            If there is a column TextPaddingLeft defined it will override this value.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.TextPaddingRight">
      <summary>
            The padding from the end of the text to the right margin. This will apply to the entire table
            If there is a column TextPaddingRight defined it will override this value.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle">
      <summary>
            Border style options available for the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable" />. To be used to set the PdfTable.BorderStyle property.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.None">
      <summary>
            Draw no border. No vertical column lines, no horizontal row lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Vertical">
      <summary>
            Draw only vertical column lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Horizontal">
      <summary>
            Draw only horizontal row lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Outline">
      <summary>
            Draw only outside border. No vertical column lines and NO horizontal row lines
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Grid">
      <summary>
            Draws vertical column lines and horizontal row lines and outside border lines
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn">
      <summary>
            Used to define the columns for the PdfTable
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
      <param name="key">Key for column. This should be the same as the property name of the object</param>
      <param name="displayText">Text to show in table</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
      <param name="key">Key for column. This should be the same as the property name of the object</param>
      <param name="displayText">Text to show in table column header</param>
      <param name="columnWidth">The width the column should span</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
      <param name="key">Key for column. This should be the same as the property name of the object or Dictionary&lt;string,string&gt; key.</param>
      <param name="displayText">Text to show in table column header</param>
      <param name="columnWidth">The width the column should span</param>
      <param name="textAlignment">The horizontal alignment for the column text</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn" /> class.
            The key is used to do a lookup in a collection or Dictionary for property values.
            </summary>
      <param name="key">Key for column. This should be the same as the property name of the object or Dictionary&lt;string,string&gt; key.</param>
      <param name="displayText">Text to show in table column header</param>
      <param name="columnWidth">The width the column should span</param>
      <param name="textAlignment">The horizontal alignment for the column text</param>
      <param name="textPaddingLeft">The amount of padding to the left of the text for the column</param>
      <param name="textPaddingRight">The amount of padding to the right of the text for the column</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Clone">
      <summary>
            Creates and returns a new instance of the PdfTableColumn
            </summary>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.DisplayText">
      <summary>
            Text that will display in the column heading
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Key">
      <summary>
            The key is used to do a lookup in a collection or Dictionary for property values.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextAlignment">
      <summary>
            Horizontal alignment for the text in the column
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextPaddingLeft">
      <summary>
            Get/sets the padding to the left of text for the column
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextPaddingRight">
      <summary>
            Get/sets the padding to the right of text for the column
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextStyle">
      <summary>
            The text style to apply to the column
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Width">
      <summary>
            width of the column
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection">
      <summary>
            Collection of table columns, added methods to calculate widths and clone the column collection
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Add(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
      <summary>
            adds an item to the collection
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.AddRange(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection)">
      <summary>
            add a collection of PdfTableColumn
            </summary>
      <param name="columns"></param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.AddRange(System.Collections.Generic.List{Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn})">
      <summary>
            adds multiple items tothe collection
            </summary>
      <param name="items"></param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Clear">
      <summary>
            clears all items from the collection
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Contains(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
      <summary>
            returns true if the item is found in the collection
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.CopyTo(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn[],System.Int32)">
      <summary>
            copies the collection
            </summary>
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Count">
      <summary>
            the number of columns
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.GetEnumerator">
      <summary>
            returns an enumerator for the column collection
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.IndexOf(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
      <summary>
            returns the index of the item
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Insert(System.Int32,Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
      <summary>
            inserts an items at the index
            </summary>
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.IsReadOnly">
      <summary>
            whther the collection is read only
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Item(System.Int32)">
      <summary>
            indexor access
            </summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Remove(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
      <summary>
            removes an item from collection
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.RemoveAt(System.Int32)">
      <summary>
            removes the item at the index
            </summary>
      <param name="index"></param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment">
      <summary>
            An enum to represent text alignment styles
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Left">
      <summary>
            Left justify. (Default)
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Right">
      <summary>
            Right justify.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Center">
      <summary>
            Center justify.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Fill">
      <summary>
            Fill the available space. This is not supported by all text objects.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox">
      <summary>
            A simple pdf text box.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox" /> class.
            </summary>
      <param name="bounds">The bounds.</param>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox" /> class.
            </summary>
      <param name="box">The box.</param>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="lineWidth">Width of the outline.</param>
      <param name="fillColor">Color of the fill.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox" /> class.
            </summary>
      <param name="bounds">The bounds.</param>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="text">The text.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.Bounds">
      <summary>
            Gets or sets the bounds of the text box.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.Text">
      <summary>
            Gets or sets the text that will be in the box.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine">
      <summary>
            The PdfTextLine is a Shape object that can be added to a PdfGeneratedDocument.DisplayList. It provides an interface to write a single line of text at a specified location.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.#ctor(System.String,System.Double,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine" /> class.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="text">The text that will be outputted</param>
      <param name="point">The point where the text will begin</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.#ctor(System.String,System.Double,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine" /> class.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="fontSize">Size of the font.</param>
      <param name="text">The text.</param>
      <param name="point">The point.</param>
      <param name="fillColor">Color of the fill.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer used for drawing the shape.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates the PDF display list objects.
            </summary>
      <param name="r"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath">
      <summary>
            A PdfBaseShape to perform complex custom direction text writing
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.#ctor(System.String,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Draws a curve from the previous point to the destination point using two bezier control points
            </summary>
      <param name="sourceControlPoint">The source control point.</param>
      <param name="destinationControlPoint">The destination control point.</param>
      <param name="destinationPoint">The destination point.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r">The writer object.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Draws a line from the previous point to the destination point
            </summary>
      <param name="p">The destination point</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Moves to a point in pdf space
            </summary>
      <param name="p">The destination point</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.PathStyle">
      <summary>
            Gets or sets the path style.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle">
      <summary>
            An object used to provide a text style to a pdf text object.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle" /> class (This constructor defaults FontSize to 12 and FontColor to Black and RenderMode to Fill).
            </summary>
      <param name="fontName">Name of the font.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontColor">
      <summary>
            Gets or sets the color of the font.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontName">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontSize">
      <summary>
            Gets or sets the size of the font.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.HorizontalScale">
      <summary>
            Gets or sets the horizontal scale.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.op_Addition(Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle,Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle)">
      <summary>
            Masks one style object onto the other. Any value left null will not effect the original.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.OutlineColor">
      <summary>
            Gets or sets the color of the outline.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.TextRenderMode">
      <summary>
            Gets or sets the text render mode.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.WordSpace">
      <summary>
            Gets or sets the word space.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape">
      <summary>
            The shape for drawing Postnet style barcodes. 
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape" /> class.
            </summary>
      <param name="code">The code.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape" /> class.
            </summary>
      <param name="code">The code.</param>
      <param name="location">The location.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.CloneInstance">
      <summary>
            Clones the instance.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Draws the shape.
            </summary>
      <param name="r"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.Size">
      <summary>
            Gets the size.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities">
      <summary>
            A utility class for objects that Override PdfBaseShape
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities" /> class</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities.ConditionallyClipStrokeOrFill(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Boolean,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
      <summary>
            Conditionallies the clip stroke or fill.
            </summary>
      <param name="r">The r.</param>
      <param name="strokeColor">Color of the stroke.</param>
      <param name="fillColor">Color of the fill.</param>
      <param name="clip">if set to <c>true</c> [clip].</param>
      <param name="style">The style.</param>
      <param name="fillMethod">The fill method.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities.ConditionallyClipStrokeOrFill(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Boolean,System.Boolean,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
      <summary>
            Conditionallies the clip stroke or fill.
            </summary>
      <param name="r">The r.</param>
      <param name="strokeColor">Color of the stroke.</param>
      <param name="fillColor">Color of the fill.</param>
      <param name="clip">if set to <c>true</c> [clip].</param>
      <param name="maintainPathAfterClip">
        <c>true</c> if the shape will maintain the current path after clip; otherwise, <c>false</c>.</param>
      <param name="style">The style.</param>
      <param name="fillMethod">The fill method.</param>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput">
      <summary>
            An object used to provide styled text to pdf text objects that can handle style changes.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput" /> class.
            </summary>
      <param name="defaultFontName">Default name of the font.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.AddLineBreak">
      <summary>
            Adds a line break to the input.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.AddText(System.String)">
      <summary>
            Adds text of the current style to the input.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFont(System.String)">
      <summary>
            Changes the font of future text input.
            </summary>
      <param name="fontName">Name of the font of future text input.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFontColor(Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Changes the color of the font of future text input.
            </summary>
      <param name="color">The color of future text input.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFontSize(System.Double)">
      <summary>
            Changes the size of the font of future text input.
            </summary>
      <param name="p">The point size of the future text input.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeHoizontalScale(System.Double)">
      <summary>
            Changes the hoizontal scale of future text input.
            </summary>
      <param name="scaleFactor">The scale factor of future text input (100 is default).</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeOutlineColor(Atalasoft.PdfDoc.Generating.IPdfColor)">
      <summary>
            Changes the color of the outline of future text input.
            </summary>
      <param name="color">The color of the outline of future text input.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeStyle(Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle)">
      <summary>
            Changes the style of the future text input.
            </summary>
      <param name="style">The style of future text input.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ContainsText">
      <summary>
            Gets a value indicating whether the input contains text.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Shapes.Transform">
      <summary>
            Transform represents an Affine transform in PDF page.  It wraps a PdfTransform object
            and will apply it upon render.  Client code should avoid injecting transformations that
            have no inverse (Scale with 0 in either or both X and Y), as it creates a degenrate transform that
            can only be undone with a GRestore to a prior GSave.  Since this has other side effects (changing clipping,
            line thickness and so on), it is not good practice.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.#ctor(Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Construct a new Transform object with the given PdfTransform.  
            </summary>
      <param name="tr">The PdfTransform that will be applied.  The transform is used directly, not copied.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.GetInverse">
      <summary>
            Returns a new Transform object which represents the inverse transform.
            </summary>
      <returns>A new inverse Transform object.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.IsInvertable">
      <summary>
            Returns <em>true</em> if the TransformationMatrix has an inverse <em>false</em> otherwise.
            </summary>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.Transform.Name">
      <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
      <param name="r"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Shapes.Transform.TransformationMatrix">
      <summary>
            Gets or sets the transformation matrix that will be applied when this object is rendered.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Utilities.KerningPair">
      <summary>
            An object to represent a "kerning pair". A "kerning pair" is comprised of a string and a kern value. The kern value represents how much spacing exists inbetween each letter.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Utilities.KerningPair" /> struct.
            </summary>
      <param name="text">The text.</param>
      <param name="kernValue">The kern value.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.KernValue">
      <summary>
            Gets or sets the kern value.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel"></member>
    <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.None">
      <summary> This value denotes that there is no error present.  While it is not presently used, it is included for the
            sake of completeness. </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Warning">
      <summary> This value denotes that a problem of very mild severity has been detected in a codec. </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Error">
      <summary> This value denotes that a problem of moderate to high severity has been detected in a codec. </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Fatal">
      <summary> This value denotes that there a severe error has occurred that could be fatal to the CLR or the current
            application.  This severity should never be used in released software. </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs">
      <summary> This class is used for encapsulating errors encountered while parsing SVG files. </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.#ctor(System.String,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel)">
      <summary> Construct a new set CodecErrorEventArgs object. </summary>
      <param name="description"> A string description of the error that has occurred. </param>
      <param name="level"> The severity of the error that has occurred. </param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.Description">
      <summary> Get the description of the error that has occurred. </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.ErrorLevel">
      <summary> Get the severity of the error that has occurred. </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler">
      <summary> Event handler when errors occur when reading images. </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument">
      <summary>
            This object is created by parsing an SVG file. It extends from IPdfRenderable so it can be placed in a drawing list of a page.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
      <param name="filePath">The path to the .svg file</param>
      <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
      <param name="doc">The PdfGeneratedDocument object the SVG will be inserted.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler)">
      <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
      <param name="filePath">The path to the .svg file</param>
      <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
      <param name="doc">The PdfGeneratedDocument object the SVG will be inserted.</param>
      <param name="parsingErrorHandler">The parsing error delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.Xml.XmlDocument,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
      <param name="xml">An XmlDocument object loaded with SVG. Can use the LoadXml() method to load a string of SVG</param>
      <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
      <param name="doc">The PdfGeneratedDocument object to the SVG will be inserted.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.Xml.XmlDocument,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler)">
      <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
      <param name="xml">An XmlDocument object loaded with SVG. Can use the LoadXml() method to load a string of SVG</param>
      <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
      <param name="doc">The PdfGeneratedDocument object to the SVG will be inserted.</param>
      <param name="parsingErrorHandler">The parsing error delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.CloneInstance">
      <summary>
            Creates a clone of current SvgDocument
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.CloneInstance(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
      <summary>
            Creates a clone of current SvgDocument
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
      <summary>
            Override of PdfBaseShape DrawShape. Draws all SVG shapes that need rendering for document.
            </summary>
      <param name="r"></param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.PageHeight">
      <summary>
            The page height defined in SVG xml
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.PageWidth">
      <summary>
            The page width defined in SVG xml
            </summary>
    </member>
    <member name="E:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.SvgParsingError">
      <summary> This event is used by the <STRONG>SvgDocument</STRONG> object to report errors that occur when parsing a
            SVG file. </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.Version">
      <summary>
            The version defined in SVG xml
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.ViewBox">
      <summary>
            The viewbox defined in the root svg node
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Geometry.PdfBounds">
      <summary>
            A struct representing the bounds of an object in Pdf space.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfBounds" /> struct.
            </summary>
      <param name="left">The left coordinate.</param>
      <param name="bottom">The bottom coordinate.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.#ctor(System.Drawing.RectangleF)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfBounds" /> struct.
            </summary>
      <param name="r">The rectangle.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Bottom">
      <summary>
            Gets or sets the bottom.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Contains(Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Determines whether the bounds contains the specified point.
            </summary>
      <param name="that">The point to check</param>
      <returns>
        <c>true</c> if the specified point is contained in the bounds; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Empty">
      <summary>
            Returns the Empty PdfBounds
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Height">
      <summary>
            Gets or sets the height.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.IsEmpty">
      <summary>
            Determines whether this instance is empty.
            </summary>
      <returns>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Left">
      <summary>
            Gets or sets the left.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.op_Equality(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>
            The result of the equality.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.op_Inequality(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfBounds)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>
            The result of the inequality.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Right">
      <summary>
            Gets the right.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Top">
      <summary>
            Gets the top.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Geometry.PdfPoint">
      <summary>
            A representation of a point in Pdf space.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint" /> struct.
            </summary>
      <param name="p">The point to copy.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint" /> struct.
            </summary>
      <param name="x">The x value.</param>
      <param name="y">The y value.</param>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.Empty">
      <summary>
            Returns the empty PdfPoint (0,0).
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Addition(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>
            The result of the addition.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Equality(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>
            The result of the equality.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Inequality(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>
            The result of the lack of equality.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Subtraction(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>
            The result of the subtraction.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.X">
      <summary>
            Gets or sets the X component.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.Y">
      <summary>
            Gets or sets the Y component.
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.Geometry.PdfTransform">
      <summary>
            A class representing a matrix transform usable with the Pdf Generating Tools.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform" /> class.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform" /> class copying the transform coming in.
            </summary>
      <param name="other">The transform to copy from.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform" /> class.
            </summary>
      <param name="a">the first value in the matrix</param>
      <param name="b">The second value in the matrix</param>
      <param name="c">The third value in the matrix</param>
      <param name="d">The fourth value in the matrix</param>
      <param name="e">The fifth value in the matrix</param>
      <param name="f">The sixth value in the matrix</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform" /> class copying the array coming in.
            </summary>
      <param name="arr">The 2x3 matrix as an array</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Concat(Atalasoft.PdfDoc.Geometry.PdfTransform)">
      <summary>
            Concats the specified transform on to the current transform.
            </summary>
      <param name="t">The specified transform.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Determinant">
      <summary>
            Returns the determinant of this transform
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
              </exception>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.GetInverse">
      <summary>
            Gets the inverse.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Identity">
      <summary>
            Returns an Identity Transform.
            </summary>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.IsIdentity">
      <summary>
            Determines whether this instance is the identity matrix.
            </summary>
      <returns>
        <c>true</c> if this instance is the identity matrix; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.IsInvertable">
      <summary>
            Determines whether this instance is invertable.
            </summary>
      <returns>
        <c>true</c> if this instance is invertable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.Double" /> with the specified index.
            </summary>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.Matrix">
      <summary>
            Gets the matrix as an array.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Rotate(System.Double)">
      <summary>
            Returns a Rotation Transform
            </summary>
      <param name="theta">The theta in radians.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Scale(System.Double)">
      <summary>
            Returns a Scale Transform
            </summary>
      <param name="s">The scale factor.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Scale(System.Double,System.Double)">
      <summary>
            Returns a Scale Transform
            </summary>
      <param name="x">The x scale factor.</param>
      <param name="y">The y scale factor.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Skew(System.Double,System.Double)">
      <summary>
            Returns a Skew Transform
            </summary>
      <param name="x">The x skew.</param>
      <param name="y">The y skew.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(Atalasoft.PdfDoc.Geometry.PdfPoint)">
      <summary>
            Transforms the specified point.
            </summary>
      <param name="src">The source point.</param>
      <returns></returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Transforms the specified x.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="xprime">The x output.</param>
      <param name="yprime">The y output.</param>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(System.Drawing.PointF)">
      <summary>
            Transforms the specified point.
            </summary>
      <param name="src">The source point.</param>
      <returns></returns>
    </member>
    <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.TransformType">
      <summary>
            Gets the type of the transform.
            </summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Translate(System.Double,System.Double)">
      <summary>
            Returns a Translate Transform
            </summary>
      <param name="x">The x translation.</param>
      <param name="y">The y translation.</param>
      <returns></returns>
    </member>
    <member name="T:Atalasoft.PdfDoc.Geometry.PdfTransformType">
      <summary>
            The type of transform that a PdfTransform is
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Identity">
      <summary>
            Identity is a matrix which will provide the same output as the input.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Translate">
      <summary>
            Translate is a matrix which will offset the position of the input points.
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Scale">
      <summary>
            Scale is a matrix which will stretch or shrink the position of input points
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.NonUniformScale">
      <summary>
            NonUniformScale is a matrix which will stretch or shrink the position of input points, but will not
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Rotate">
      <summary>
            Rotate is a matrix which will rotate input points around the origin
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Skew">
      <summary>
            Skew is a matrix which will offset points in a direction (usually in just the X or Y direction).
            </summary>
    </member>
    <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Other">
      <summary>
            Other is a matrix which is a combination of other PdfTransformType matricies 
            </summary>
    </member>
    <member name="T:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper">
      <summary>
            SerializationHelper is a set of static methods to help in the process of
            deserialization of an object graph.</summary>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
      <summary>
            Get an object from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="type">The expected type of the object</param>
      <returns>an object of the Type specified if found, null otherwise</returns>
    </member>
  </members>
</doc>